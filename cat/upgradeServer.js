import { PRIVATE_SERVER_NAME_PREFIX } from "src/cat/libs/constants";
import { NetscriptExtension } from "src/cat/libs/NetscriptExtension";
let nsx;
const defaultConfig = {
  reservedMoney: 1e6,
  limitPurchasableRAMBasedOnHomeServerRAM: false,
  useCustomMaxPurchasableRAM: true,
  customMaxPurchasableRAM: 8192
};
let customConfig = null;
customConfig = {
  reservedMoney: 25e9,
  limitPurchasableRAMBasedOnHomeServerRAM: false,
  useCustomMaxPurchasableRAM: true,
  customMaxPurchasableRAM: 8192 * 128
};
async function main(ns) {
  nsx = new NetscriptExtension(ns);
  nsx.killProcessesSpawnFromSameScript();
  const config = customConfig !== null ? customConfig : defaultConfig;
  ns.disableLog("ALL");
  const reservedMoney = config.reservedMoney;
  const limitPurchasableRAMBasedOnHomeServerRAM = config.limitPurchasableRAMBasedOnHomeServerRAM;
  let maxPurchasableRAM = ns.getPurchasedServerMaxRam();
  if (config.useCustomMaxPurchasableRAM) {
    maxPurchasableRAM = config.customMaxPurchasableRAM;
  }
  if (limitPurchasableRAMBasedOnHomeServerRAM) {
    maxPurchasableRAM = Math.min(maxPurchasableRAM, ns.getServerMaxRam("home"));
  }
  if (ns.getPurchasedServers().length === 0 && ns.getServerMoneyAvailable("home") < reservedMoney) {
    ns.tprint("Reserved money is set too high while we have not purchased any server");
    return;
  }
  const maxNumberOfPurchasedServer = ns.getPurchasedServerLimit();
  while (ns.getPurchasedServers().length < maxNumberOfPurchasedServer) {
    const availableMoney = ns.getServerMoneyAvailable("home") - reservedMoney;
    const ram = 2;
    if (availableMoney >= ns.getPurchasedServerCost(ram)) {
      const newServerHostname = ns.purchaseServer(`${PRIVATE_SERVER_NAME_PREFIX}${ns.getPurchasedServers().length}`, ram);
      ns.print(
        `Purchase new server: ${newServerHostname !== "" ? `Success. New server's hostname: ${newServerHostname}` : "Fail"}`
      );
    }
  }
  let ramTier = Number.MAX_SAFE_INTEGER;
  for (const hostname of ns.getPurchasedServers()) {
    ramTier = Math.min(ramTier, Math.log2(ns.getServerMaxRam(hostname)));
  }
  while (true) {
    ++ramTier;
    const newRAM = 2 ** ramTier;
    if (newRAM > maxPurchasableRAM) {
      ns.tprint("All servers have been upgraded");
      break;
    }
    for (const hostname of ns.getPurchasedServers()) {
      if (ns.getServerMaxRam(hostname) >= newRAM) {
        continue;
      }
      while (true) {
        const availableMoney = ns.getServerMoneyAvailable("home") - reservedMoney;
        const upgradeCost = ns.getPurchasedServerUpgradeCost(hostname, newRAM);
        if (availableMoney >= upgradeCost) {
          ns.print(
            `Upgrade server ${hostname} with new RAM ${ns.formatRam(newRAM)}. Cost: ${ns.formatNumber(upgradeCost)}. Result: ${ns.upgradePurchasedServer(hostname, newRAM) ? "Success" : "Fail"}`
          );
          break;
        }
        await ns.sleep(1e3);
      }
    }
    await ns.sleep(1e3);
  }
}
export {
  main
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3VwZ3JhZGVTZXJ2ZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7TlN9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHtQUklWQVRFX1NFUlZFUl9OQU1FX1BSRUZJWH0gZnJvbSBcIi9saWJzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQge05ldHNjcmlwdEV4dGVuc2lvbn0gZnJvbSBcIi9saWJzL05ldHNjcmlwdEV4dGVuc2lvblwiO1xyXG5cclxuaW50ZXJmYWNlIENvbmZpZyB7XHJcbiAgICByZXNlcnZlZE1vbmV5OiBudW1iZXI7XHJcbiAgICBsaW1pdFB1cmNoYXNhYmxlUkFNQmFzZWRPbkhvbWVTZXJ2ZXJSQU06IGJvb2xlYW47XHJcbiAgICB1c2VDdXN0b21NYXhQdXJjaGFzYWJsZVJBTTogYm9vbGVhbjtcclxuICAgIGN1c3RvbU1heFB1cmNoYXNhYmxlUkFNOiBudW1iZXI7XHJcbn1cclxuXHJcbmxldCBuc3g6IE5ldHNjcmlwdEV4dGVuc2lvbjtcclxuXHJcbmNvbnN0IGRlZmF1bHRDb25maWc6IENvbmZpZyA9IHtcclxuICAgIHJlc2VydmVkTW9uZXk6IDFlNixcclxuICAgIGxpbWl0UHVyY2hhc2FibGVSQU1CYXNlZE9uSG9tZVNlcnZlclJBTTogZmFsc2UsXHJcbiAgICB1c2VDdXN0b21NYXhQdXJjaGFzYWJsZVJBTTogdHJ1ZSxcclxuICAgIGN1c3RvbU1heFB1cmNoYXNhYmxlUkFNOiA4MTkyXHJcbn07XHJcblxyXG5sZXQgY3VzdG9tQ29uZmlnOiBDb25maWcgfCBudWxsID0gbnVsbDtcclxuY3VzdG9tQ29uZmlnID0gPENvbmZpZz57XHJcbiAgICByZXNlcnZlZE1vbmV5OiAyNWU5LFxyXG4gICAgbGltaXRQdXJjaGFzYWJsZVJBTUJhc2VkT25Ib21lU2VydmVyUkFNOiBmYWxzZSxcclxuICAgIHVzZUN1c3RvbU1heFB1cmNoYXNhYmxlUkFNOiB0cnVlLFxyXG4gICAgY3VzdG9tTWF4UHVyY2hhc2FibGVSQU06IDgxOTIgKiAxMjhcclxufTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgbnN4ID0gbmV3IE5ldHNjcmlwdEV4dGVuc2lvbihucyk7XHJcbiAgICBuc3gua2lsbFByb2Nlc3Nlc1NwYXduRnJvbVNhbWVTY3JpcHQoKTtcclxuXHJcbiAgICBjb25zdCBjb25maWcgPSAoY3VzdG9tQ29uZmlnICE9PSBudWxsKSA/IGN1c3RvbUNvbmZpZyA6IGRlZmF1bHRDb25maWc7XHJcblxyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuXHJcbiAgICBjb25zdCByZXNlcnZlZE1vbmV5ID0gY29uZmlnLnJlc2VydmVkTW9uZXk7XHJcbiAgICBjb25zdCBsaW1pdFB1cmNoYXNhYmxlUkFNQmFzZWRPbkhvbWVTZXJ2ZXJSQU0gPSBjb25maWcubGltaXRQdXJjaGFzYWJsZVJBTUJhc2VkT25Ib21lU2VydmVyUkFNO1xyXG4gICAgbGV0IG1heFB1cmNoYXNhYmxlUkFNID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVyTWF4UmFtKCk7XHJcbiAgICBpZiAoY29uZmlnLnVzZUN1c3RvbU1heFB1cmNoYXNhYmxlUkFNKSB7XHJcbiAgICAgICAgbWF4UHVyY2hhc2FibGVSQU0gPSBjb25maWcuY3VzdG9tTWF4UHVyY2hhc2FibGVSQU07XHJcbiAgICB9XHJcbiAgICBpZiAobGltaXRQdXJjaGFzYWJsZVJBTUJhc2VkT25Ib21lU2VydmVyUkFNKSB7XHJcbiAgICAgICAgbWF4UHVyY2hhc2FibGVSQU0gPSBNYXRoLm1pbihtYXhQdXJjaGFzYWJsZVJBTSwgbnMuZ2V0U2VydmVyTWF4UmFtKFwiaG9tZVwiKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5sZW5ndGggPT09IDBcclxuICAgICAgICAmJiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShcImhvbWVcIikgPCByZXNlcnZlZE1vbmV5KSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiUmVzZXJ2ZWQgbW9uZXkgaXMgc2V0IHRvbyBoaWdoIHdoaWxlIHdlIGhhdmUgbm90IHB1cmNoYXNlZCBhbnkgc2VydmVyXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUcnkgYnV5aW5nIHRvIGxpbWl0IG51bWJlciBvZiBzZXJ2ZXJzIHdpdGggMkdCIFJBTVxyXG4gICAgY29uc3QgbWF4TnVtYmVyT2ZQdXJjaGFzZWRTZXJ2ZXIgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpO1xyXG4gICAgd2hpbGUgKG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5sZW5ndGggPCBtYXhOdW1iZXJPZlB1cmNoYXNlZFNlcnZlcikge1xyXG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZU1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoXCJob21lXCIpIC0gcmVzZXJ2ZWRNb25leTtcclxuICAgICAgICBjb25zdCByYW0gPSAyO1xyXG4gICAgICAgIGlmIChhdmFpbGFibGVNb25leSA+PSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KHJhbSkpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3U2VydmVySG9zdG5hbWUgPSBucy5wdXJjaGFzZVNlcnZlcihgJHtQUklWQVRFX1NFUlZFUl9OQU1FX1BSRUZJWH0ke25zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5sZW5ndGh9YCwgcmFtKTtcclxuICAgICAgICAgICAgbnMucHJpbnQoYFB1cmNoYXNlIG5ldyBzZXJ2ZXI6IGBcclxuICAgICAgICAgICAgICAgICsgYCR7KG5ld1NlcnZlckhvc3RuYW1lICE9PSBcIlwiID8gYFN1Y2Nlc3MuIE5ldyBzZXJ2ZXIncyBob3N0bmFtZTogJHtuZXdTZXJ2ZXJIb3N0bmFtZX1gIDogXCJGYWlsXCIpfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmluZCBzdWl0YWJsZSB0aWVyXHJcbiAgICBsZXQgcmFtVGllciA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gICAgZm9yIChjb25zdCBob3N0bmFtZSBvZiBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkpIHtcclxuICAgICAgICByYW1UaWVyID0gTWF0aC5taW4ocmFtVGllciwgTWF0aC5sb2cyKG5zLmdldFNlcnZlck1heFJhbShob3N0bmFtZSkpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUcnkgdXBncmFkaW5nIHB1cmNoYXNlZCBzZXJ2ZXJzXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICsrcmFtVGllcjtcclxuICAgICAgICBjb25zdCBuZXdSQU0gPSAyICoqIHJhbVRpZXI7XHJcbiAgICAgICAgaWYgKG5ld1JBTSA+IG1heFB1cmNoYXNhYmxlUkFNKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChcIkFsbCBzZXJ2ZXJzIGhhdmUgYmVlbiB1cGdyYWRlZFwiKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgaG9zdG5hbWUgb2YgbnMuZ2V0UHVyY2hhc2VkU2VydmVycygpKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgc2VydmVyJ3MgUkFNIGlzIGJpZ2dlciB0aGFuIHZhbHVlIG9mIGN1cnJlbnQgdGllclxyXG4gICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RuYW1lKSA+PSBuZXdSQU0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFRoaXMgc2VydmVyIG5lZWRzIHRvIGJlIHVwZ3JhZGVkLCBsb29wIHVudGlsIHdlIGhhdmUgZW5vdWdoIG1vbmV5XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdmFpbGFibGVNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSAtIHJlc2VydmVkTW9uZXk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1cGdyYWRlQ29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlclVwZ3JhZGVDb3N0KGhvc3RuYW1lLCBuZXdSQU0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZU1vbmV5ID49IHVwZ3JhZGVDb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMucHJpbnQoYFVwZ3JhZGUgc2VydmVyICR7aG9zdG5hbWV9IHdpdGggbmV3IFJBTSAke25zLmZvcm1hdFJhbShuZXdSQU0pfWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBgLiBDb3N0OiAke25zLmZvcm1hdE51bWJlcih1cGdyYWRlQ29zdCl9YFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIGAuIFJlc3VsdDogJHsobnMudXBncmFkZVB1cmNoYXNlZFNlcnZlcihob3N0bmFtZSwgbmV3UkFNKSkgPyBcIlN1Y2Nlc3NcIiA6IFwiRmFpbFwifWBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQ0EsU0FBUSxrQ0FBaUM7QUFDekMsU0FBUSwwQkFBeUI7QUFTakMsSUFBSTtBQUVKLE1BQU0sZ0JBQXdCO0FBQUEsRUFDMUIsZUFBZTtBQUFBLEVBQ2YseUNBQXlDO0FBQUEsRUFDekMsNEJBQTRCO0FBQUEsRUFDNUIseUJBQXlCO0FBQzdCO0FBRUEsSUFBSSxlQUE4QjtBQUNsQyxlQUF1QjtBQUFBLEVBQ25CLGVBQWU7QUFBQSxFQUNmLHlDQUF5QztBQUFBLEVBQ3pDLDRCQUE0QjtBQUFBLEVBQzVCLHlCQUF5QixPQUFPO0FBQ3BDO0FBRUEsZUFBc0IsS0FBSyxJQUF1QjtBQUM5QyxRQUFNLElBQUksbUJBQW1CLEVBQUU7QUFDL0IsTUFBSSxpQ0FBaUM7QUFFckMsUUFBTSxTQUFVLGlCQUFpQixPQUFRLGVBQWU7QUFFeEQsS0FBRyxXQUFXLEtBQUs7QUFFbkIsUUFBTSxnQkFBZ0IsT0FBTztBQUM3QixRQUFNLDBDQUEwQyxPQUFPO0FBQ3ZELE1BQUksb0JBQW9CLEdBQUcseUJBQXlCO0FBQ3BELE1BQUksT0FBTyw0QkFBNEI7QUFDbkMsd0JBQW9CLE9BQU87QUFBQSxFQUMvQjtBQUNBLE1BQUkseUNBQXlDO0FBQ3pDLHdCQUFvQixLQUFLLElBQUksbUJBQW1CLEdBQUcsZ0JBQWdCLE1BQU0sQ0FBQztBQUFBLEVBQzlFO0FBRUEsTUFBSSxHQUFHLG9CQUFvQixFQUFFLFdBQVcsS0FDakMsR0FBRyx3QkFBd0IsTUFBTSxJQUFJLGVBQWU7QUFDdkQsT0FBRyxPQUFPLHVFQUF1RTtBQUNqRjtBQUFBLEVBQ0o7QUFHQSxRQUFNLDZCQUE2QixHQUFHLHdCQUF3QjtBQUM5RCxTQUFPLEdBQUcsb0JBQW9CLEVBQUUsU0FBUyw0QkFBNEI7QUFDakUsVUFBTSxpQkFBaUIsR0FBRyx3QkFBd0IsTUFBTSxJQUFJO0FBQzVELFVBQU0sTUFBTTtBQUNaLFFBQUksa0JBQWtCLEdBQUcsdUJBQXVCLEdBQUcsR0FBRztBQUNsRCxZQUFNLG9CQUFvQixHQUFHLGVBQWUsR0FBRywwQkFBMEIsR0FBRyxHQUFHLG9CQUFvQixFQUFFLE1BQU0sSUFBSSxHQUFHO0FBQ2xILFNBQUc7QUFBQSxRQUFNLHdCQUNDLHNCQUFzQixLQUFLLG1DQUFtQyxpQkFBaUIsS0FBSyxNQUFPO0FBQUEsTUFDckc7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUdBLE1BQUksVUFBVSxPQUFPO0FBQ3JCLGFBQVcsWUFBWSxHQUFHLG9CQUFvQixHQUFHO0FBQzdDLGNBQVUsS0FBSyxJQUFJLFNBQVMsS0FBSyxLQUFLLEdBQUcsZ0JBQWdCLFFBQVEsQ0FBQyxDQUFDO0FBQUEsRUFDdkU7QUFHQSxTQUFPLE1BQU07QUFDVCxNQUFFO0FBQ0YsVUFBTSxTQUFTLEtBQUs7QUFDcEIsUUFBSSxTQUFTLG1CQUFtQjtBQUM1QixTQUFHLE9BQU8sZ0NBQWdDO0FBQzFDO0FBQUEsSUFDSjtBQUNBLGVBQVcsWUFBWSxHQUFHLG9CQUFvQixHQUFHO0FBRTdDLFVBQUksR0FBRyxnQkFBZ0IsUUFBUSxLQUFLLFFBQVE7QUFDeEM7QUFBQSxNQUNKO0FBRUEsYUFBTyxNQUFNO0FBQ1QsY0FBTSxpQkFBaUIsR0FBRyx3QkFBd0IsTUFBTSxJQUFJO0FBQzVELGNBQU0sY0FBYyxHQUFHLDhCQUE4QixVQUFVLE1BQU07QUFDckUsWUFBSSxrQkFBa0IsYUFBYTtBQUMvQixhQUFHO0FBQUEsWUFBTSxrQkFBa0IsUUFBUSxpQkFBaUIsR0FBRyxVQUFVLE1BQU0sQ0FBQyxXQUN2RCxHQUFHLGFBQWEsV0FBVyxDQUFDLGFBQ3pCLEdBQUcsdUJBQXVCLFVBQVUsTUFBTSxJQUFLLFlBQVksTUFBTTtBQUFBLFVBQ3JGO0FBQ0E7QUFBQSxRQUNKO0FBQ0EsY0FBTSxHQUFHLE1BQU0sR0FBSTtBQUFBLE1BQ3ZCO0FBQUEsSUFDSjtBQUNBLFVBQU0sR0FBRyxNQUFNLEdBQUk7QUFBQSxFQUN2QjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
