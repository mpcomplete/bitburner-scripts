let ns;
let doc;
function unclickable() {
  const unclickableDiv = doc.querySelector("#unclickable");
  unclickableDiv.style.display = "block";
  unclickableDiv.style.visibility = "visible";
  unclickableDiv.style.backgroundColor = "red";
  unclickableDiv.addEventListener("click", () => {
    unclickableDiv.style.display = "none";
    unclickableDiv.style.visibility = "hidden";
  });
}
function undocumented() {
  ns.exploit();
}
function rainbow() {
  ns.rainbow("noodles");
}
function bypass() {
  ns.bypass(doc);
}
function alterReality() {
}
function prototypeTampering() {
  const originalFunction = Number.prototype.toExponential;
  Number.prototype.toExponential = function(fractionDigits) {
    return originalFunction.apply(this, [fractionDigits]) + " ";
  };
}
function timeCompression() {
  const originalFunction = window.setTimeout;
  window.setTimeout = function(handler, timeout, ...args) {
    if (timeout === 15e3) {
      timeout = 250;
    }
    return originalFunction.apply(this, [handler, timeout, ...args]);
  };
}
function trueRecursion() {
}
function exposeWebpackRequire() {
  if (!globalThis.webpackRequire) {
    globalThis.webpackChunkbitburner.push(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      [[-1], {}, (webpackRequire2) => globalThis.webpackRequire = webpackRequire2]
    );
  }
}
function checkIfFunctionCodeIncludesSpecificString(object, specificString) {
  return !!object && typeof object === "function" && !Object.hasOwn(object, "toString") && String(object).includes(specificString);
}
function exposeGameInternalObjects() {
  if (!globalThis.webpackChunkbitburner) {
    return;
  }
  exposeWebpackRequire();
  let SaveObjectModule;
  let AllServersModule;
  for (const moduleId of Object.keys(webpackRequire.m)) {
    const module = webpackRequire(moduleId);
    for (const object of Object.values(module)) {
      if (!object) {
        continue;
      }
      if (object.bitNodeN) {
        globalThis.Player = object;
      }
      if (object.load && object.start && object.updateGame) {
        globalThis.Engine = object;
      }
      if (object.getSaveData) {
        SaveObjectModule = module;
      }
      if (checkIfFunctionCodeIncludesSpecificString(object, "Error: Trying to add a server with an existing IP")) {
        AllServersModule = module;
      }
    }
  }
  if (!globalThis.Player) {
    throw new Error("Cannot expose Player");
  }
  if (!globalThis.Engine) {
    throw new Error("Cannot expose Engine");
  }
  if (!SaveObjectModule) {
    throw new Error("Cannot expose SaveObject");
  }
  globalThis.SaveObject = {
    saveObject: {
      getSaveData: async () => ""
    },
    loadGame: async () => true
  };
  for (const object of Object.values(SaveObjectModule)) {
    if (object.getSaveData) {
      globalThis.SaveObject.saveObject = object;
    }
    if (checkIfFunctionCodeIncludesSpecificString(object, "Could not load Staneks Gift from save")) {
      globalThis.SaveObject.loadGame = object;
    }
  }
  if (!AllServersModule) {
    throw new Error("Cannot expose AllServers");
  }
  globalThis.AllServers = {
    loadAllServers: () => {
    },
    saveAllServers: () => ""
  };
  for (const object of Object.values(AllServersModule)) {
    if (checkIfFunctionCodeIncludesSpecificString(object, "JSON.parse")) {
      globalThis.AllServers.loadAllServers = object;
    }
    if (checkIfFunctionCodeIncludesSpecificString(object, "JSON.stringify")) {
      globalThis.AllServers.saveAllServers = object;
    }
  }
}
function openDevMenu() {
  if (!globalThis.webpackChunkbitburner) {
    return;
  }
  exposeWebpackRequire();
  for (const moduleId of Object.keys(webpackRequire.m)) {
    const module = webpackRequire(moduleId);
    for (const object of Object.values(module)) {
      if (object && object.toPage) {
        object.toPage("Dev");
        return;
      }
    }
  }
}
function main(nsContext) {
  ns = nsContext;
  doc = eval("document");
}
export {
  exposeGameInternalObjects,
  main,
  openDevMenu
};
//# sourceMappingURL=data:application/json;base64,
