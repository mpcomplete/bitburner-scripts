import { MAX_STOCK_HISTORY_RECORD, STOCK_HISTORY_LOGS_PREFIX } from "src/cat/libs/constants";
import { NetscriptExtension } from "src/cat/libs/NetscriptExtension";
let nsx;
async function main(ns) {
  nsx = new NetscriptExtension(ns);
  nsx.killProcessesSpawnFromSameScript();
  ns.disableLog("ALL");
  ns.tail();
  const stockSymbols = ns.stock.getSymbols();
  const stockTraderData = {
    stockPrices: {},
    stockForecasts: {}
  };
  let rotateLog = true;
  let logFilename = "";
  while (true) {
    if (ns.ls("home", STOCK_HISTORY_LOGS_PREFIX).length >= 10) {
      break;
    }
    if (rotateLog) {
      stockSymbols.forEach((symbol) => {
        stockTraderData.stockPrices[symbol] = [ns.stock.getPrice(symbol)];
        stockTraderData.stockForecasts[symbol] = [ns.stock.getForecast(symbol)];
      });
      logFilename = `${STOCK_HISTORY_LOGS_PREFIX}${Date.now()}.txt`;
      rotateLog = false;
    }
    const isPriceChanged = stockSymbols.some((symbol) => {
      const records = stockTraderData.stockPrices[symbol];
      return records[records.length - 1] !== ns.stock.getPrice(symbol);
    });
    if (!isPriceChanged) {
      await ns.sleep(2e3);
      continue;
    }
    stockSymbols.forEach((symbol) => {
      const records = stockTraderData.stockPrices[symbol];
      records.push(ns.stock.getPrice(symbol));
      stockTraderData.stockForecasts[symbol].push(ns.stock.getForecast(symbol));
      if (records.length === MAX_STOCK_HISTORY_RECORD) {
        rotateLog = true;
      }
    });
    ns.write(logFilename, JSON.stringify(stockTraderData), "w");
    await ns.sleep(2e3);
  }
}
export {
  main
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3N0b2NrSGlzdG9yeVJlY29yZGVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQge05TfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7TUFYX1NUT0NLX0hJU1RPUllfUkVDT1JELCBTVE9DS19ISVNUT1JZX0xPR1NfUFJFRklYfSBmcm9tIFwiL2xpYnMvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7TmV0c2NyaXB0RXh0ZW5zaW9ufSBmcm9tIFwiL2xpYnMvTmV0c2NyaXB0RXh0ZW5zaW9uXCI7XHJcblxyXG4vKipcclxuICogVXNlIFJlY29yZCBpbnN0ZWFkIG9mIE1hcCwgc28gd2UgY2FuIHVzZSBKU09OLnN0cmluZ2lmeSBlYXNpZXJcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RvY2tUcmFkZXJEYXRhIHtcclxuICAgIHN0b2NrUHJpY2VzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXJbXT47XHJcbiAgICBzdG9ja0ZvcmVjYXN0czogUmVjb3JkPHN0cmluZywgbnVtYmVyW10+O1xyXG59XHJcblxyXG5sZXQgbnN4OiBOZXRzY3JpcHRFeHRlbnNpb247XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIG5zeCA9IG5ldyBOZXRzY3JpcHRFeHRlbnNpb24obnMpO1xyXG4gICAgbnN4LmtpbGxQcm9jZXNzZXNTcGF3bkZyb21TYW1lU2NyaXB0KCk7XHJcblxyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIG5zLnRhaWwoKTtcclxuXHJcbiAgICBjb25zdCBzdG9ja1N5bWJvbHMgPSBucy5zdG9jay5nZXRTeW1ib2xzKCk7XHJcbiAgICBjb25zdCBzdG9ja1RyYWRlckRhdGE6IFN0b2NrVHJhZGVyRGF0YSA9IHtcclxuICAgICAgICBzdG9ja1ByaWNlczoge30sXHJcbiAgICAgICAgc3RvY2tGb3JlY2FzdHM6IHt9XHJcbiAgICB9O1xyXG4gICAgbGV0IHJvdGF0ZUxvZyA9IHRydWU7XHJcbiAgICBsZXQgbG9nRmlsZW5hbWUgPSBcIlwiO1xyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAvLyBPbmx5IHN0b3JlIDEwIGxvZyBmaWxlc1xyXG4gICAgICAgIGlmIChucy5scyhcImhvbWVcIiwgU1RPQ0tfSElTVE9SWV9MT0dTX1BSRUZJWCkubGVuZ3RoID49IDEwKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSb3RhdGUgbG9nXHJcbiAgICAgICAgaWYgKHJvdGF0ZUxvZykge1xyXG4gICAgICAgICAgICAvLyBJbml0XHJcbiAgICAgICAgICAgIHN0b2NrU3ltYm9scy5mb3JFYWNoKHN5bWJvbCA9PiB7XHJcbiAgICAgICAgICAgICAgICBzdG9ja1RyYWRlckRhdGEuc3RvY2tQcmljZXNbc3ltYm9sXSA9IFtucy5zdG9jay5nZXRQcmljZShzeW1ib2wpXTtcclxuICAgICAgICAgICAgICAgIHN0b2NrVHJhZGVyRGF0YS5zdG9ja0ZvcmVjYXN0c1tzeW1ib2xdID0gW25zLnN0b2NrLmdldEZvcmVjYXN0KHN5bWJvbCldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbG9nRmlsZW5hbWUgPSBgJHtTVE9DS19ISVNUT1JZX0xPR1NfUFJFRklYfSR7RGF0ZS5ub3coKX0udHh0YDtcclxuICAgICAgICAgICAgcm90YXRlTG9nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENoZWNrIGlmIHN0b2NrIHByaWNlIGNoYW5nZWRcclxuICAgICAgICBjb25zdCBpc1ByaWNlQ2hhbmdlZCA9IHN0b2NrU3ltYm9scy5zb21lKHN5bWJvbCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZHMgPSBzdG9ja1RyYWRlckRhdGEuc3RvY2tQcmljZXNbc3ltYm9sXTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZHNbcmVjb3Jkcy5sZW5ndGggLSAxXSAhPT0gbnMuc3RvY2suZ2V0UHJpY2Uoc3ltYm9sKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoIWlzUHJpY2VDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDIwMDApO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmVjb3JkIG5ldyBzdG9jayBwcmljZVxyXG4gICAgICAgIHN0b2NrU3ltYm9scy5mb3JFYWNoKHN5bWJvbCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZHMgPSBzdG9ja1RyYWRlckRhdGEuc3RvY2tQcmljZXNbc3ltYm9sXTtcclxuICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKG5zLnN0b2NrLmdldFByaWNlKHN5bWJvbCkpO1xyXG4gICAgICAgICAgICBzdG9ja1RyYWRlckRhdGEuc3RvY2tGb3JlY2FzdHNbc3ltYm9sXS5wdXNoKG5zLnN0b2NrLmdldEZvcmVjYXN0KHN5bWJvbCkpO1xyXG4gICAgICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPT09IE1BWF9TVE9DS19ISVNUT1JZX1JFQ09SRCkge1xyXG4gICAgICAgICAgICAgICAgcm90YXRlTG9nID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG5zLndyaXRlKGxvZ0ZpbGVuYW1lLCBKU09OLnN0cmluZ2lmeShzdG9ja1RyYWRlckRhdGEpLCBcIndcIik7XHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMjAwMCk7XHJcbiAgICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQ0EsU0FBUSwwQkFBMEIsaUNBQWdDO0FBQ2xFLFNBQVEsMEJBQXlCO0FBVWpDLElBQUk7QUFFSixlQUFzQixLQUFLLElBQXVCO0FBQzlDLFFBQU0sSUFBSSxtQkFBbUIsRUFBRTtBQUMvQixNQUFJLGlDQUFpQztBQUVyQyxLQUFHLFdBQVcsS0FBSztBQUNuQixLQUFHLEtBQUs7QUFFUixRQUFNLGVBQWUsR0FBRyxNQUFNLFdBQVc7QUFDekMsUUFBTSxrQkFBbUM7QUFBQSxJQUNyQyxhQUFhLENBQUM7QUFBQSxJQUNkLGdCQUFnQixDQUFDO0FBQUEsRUFDckI7QUFDQSxNQUFJLFlBQVk7QUFDaEIsTUFBSSxjQUFjO0FBQ2xCLFNBQU8sTUFBTTtBQUVULFFBQUksR0FBRyxHQUFHLFFBQVEseUJBQXlCLEVBQUUsVUFBVSxJQUFJO0FBQ3ZEO0FBQUEsSUFDSjtBQUVBLFFBQUksV0FBVztBQUVYLG1CQUFhLFFBQVEsWUFBVTtBQUMzQix3QkFBZ0IsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLE1BQU0sU0FBUyxNQUFNLENBQUM7QUFDaEUsd0JBQWdCLGVBQWUsTUFBTSxJQUFJLENBQUMsR0FBRyxNQUFNLFlBQVksTUFBTSxDQUFDO0FBQUEsTUFDMUUsQ0FBQztBQUNELG9CQUFjLEdBQUcseUJBQXlCLEdBQUcsS0FBSyxJQUFJLENBQUM7QUFDdkQsa0JBQVk7QUFBQSxJQUNoQjtBQUVBLFVBQU0saUJBQWlCLGFBQWEsS0FBSyxZQUFVO0FBQy9DLFlBQU0sVUFBVSxnQkFBZ0IsWUFBWSxNQUFNO0FBQ2xELGFBQU8sUUFBUSxRQUFRLFNBQVMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxTQUFTLE1BQU07QUFBQSxJQUNuRSxDQUFDO0FBQ0QsUUFBSSxDQUFDLGdCQUFnQjtBQUNqQixZQUFNLEdBQUcsTUFBTSxHQUFJO0FBQ25CO0FBQUEsSUFDSjtBQUVBLGlCQUFhLFFBQVEsWUFBVTtBQUMzQixZQUFNLFVBQVUsZ0JBQWdCLFlBQVksTUFBTTtBQUNsRCxjQUFRLEtBQUssR0FBRyxNQUFNLFNBQVMsTUFBTSxDQUFDO0FBQ3RDLHNCQUFnQixlQUFlLE1BQU0sRUFBRSxLQUFLLEdBQUcsTUFBTSxZQUFZLE1BQU0sQ0FBQztBQUN4RSxVQUFJLFFBQVEsV0FBVywwQkFBMEI7QUFDN0Msb0JBQVk7QUFBQSxNQUNoQjtBQUFBLElBQ0osQ0FBQztBQUNELE9BQUcsTUFBTSxhQUFhLEtBQUssVUFBVSxlQUFlLEdBQUcsR0FBRztBQUMxRCxVQUFNLEdBQUcsTUFBTSxHQUFJO0FBQUEsRUFDdkI7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
