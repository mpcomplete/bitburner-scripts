import {
  NetscriptExtension,
  parseAutoCompleteDataFromDefaultConfig
} from "/libs/NetscriptExtension";
import { GROW_SCRIPT_NAME, HACK_SCRIPT_NAME, STOCK_HISTORY_LOGS_PREFIX, WEAKEN_SCRIPT_NAME } from "/libs/constants";
function autocomplete(data, flags) {
  return parseAutoCompleteDataFromDefaultConfig(data, defaultConfig);
}
const defaultConfig = [
  ["killall", false],
  ["sellAllStocks", false],
  ["deleteStockHistoryLogs", false],
  ["evalPrint", ""],
  ["resetController", false],
  ["eatNoodles", false],
  ["deleteAllScripts", false]
];
let nsx;
async function main(ns) {
  nsx = new NetscriptExtension(ns);
  ns.disableLog("ALL");
  const config = ns.flags(defaultConfig);
  if (config.killall) {
    nsx.scanBFS("home", (host) => {
      ns.killall(host.hostname, true);
    });
  }
  if (config.sellAllStocks) {
    ns.stock.getSymbols().forEach((symbol) => {
      const position = ns.stock.getPosition(symbol);
      ns.stock.sellStock(symbol, position[0]);
    });
  }
  if (config.deleteStockHistoryLogs) {
    ns.ls("home", STOCK_HISTORY_LOGS_PREFIX).forEach((filename) => {
      ns.rm(filename);
    });
  }
  if (config.evalPrint !== "") {
    ns.tprint(eval(config.evalPrint));
  }
  if (config.resetController) {
    ns.scriptKill("controller2.js", "home");
    nsx.scanBFS("home").filter((host) => {
      return ns.getServerMaxRam(host.hostname) > 0 && ns.hasRootAccess(host.hostname);
    }).forEach((host) => {
      const hostname = host.hostname;
      ns.scriptKill(WEAKEN_SCRIPT_NAME, hostname);
      ns.scriptKill(GROW_SCRIPT_NAME, hostname);
      ns.scriptKill(HACK_SCRIPT_NAME, hostname);
    });
  }
  if (config.eatNoodles) {
    const doc = eval("document");
    const buttons = doc.querySelectorAll("#root > div:nth-of-type(2) > div:nth-of-type(2) > button");
    let eatNoodlesButton = null;
    for (const button of buttons) {
      if (button.textContent === "Eat noodles") {
        eatNoodlesButton = button;
        break;
      }
    }
    if (eatNoodlesButton === null) {
      return;
    }
    let count = 0;
    while (true) {
      ++count;
      eatNoodlesButton.click();
      if (count % 100 === 0) {
        await ns.sleep(200);
      }
      if (count > 1e5) {
        ns.print("Finish");
        break;
      }
    }
  }
  if (config.deleteAllScripts) {
    ns.ls("home", ".js").forEach((filename) => {
      ns.rm(filename);
    });
  }
}
export {
  autocomplete,
  main
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3Rvb2xzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQge0F1dG9jb21wbGV0ZURhdGEsIE5TfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7XHJcbiAgICBOZXRzY3JpcHRFeHRlbnNpb24sXHJcbiAgICBOZXRzY3JpcHRGbGFnc1NjaGVtYSxcclxuICAgIHBhcnNlQXV0b0NvbXBsZXRlRGF0YUZyb21EZWZhdWx0Q29uZmlnXHJcbn0gZnJvbSBcIi9saWJzL05ldHNjcmlwdEV4dGVuc2lvblwiO1xyXG5pbXBvcnQge0dST1dfU0NSSVBUX05BTUUsIEhBQ0tfU0NSSVBUX05BTUUsIFNUT0NLX0hJU1RPUllfTE9HU19QUkVGSVgsIFdFQUtFTl9TQ1JJUFRfTkFNRX0gZnJvbSBcIi9saWJzL2NvbnN0YW50c1wiO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG5leHBvcnQgZnVuY3Rpb24gYXV0b2NvbXBsZXRlKGRhdGE6IEF1dG9jb21wbGV0ZURhdGEsIGZsYWdzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiBwYXJzZUF1dG9Db21wbGV0ZURhdGFGcm9tRGVmYXVsdENvbmZpZyhkYXRhLCBkZWZhdWx0Q29uZmlnKTtcclxufVxyXG5cclxuY29uc3QgZGVmYXVsdENvbmZpZzogTmV0c2NyaXB0RmxhZ3NTY2hlbWEgPSBbXHJcbiAgICBbXCJraWxsYWxsXCIsIGZhbHNlXSxcclxuICAgIFtcInNlbGxBbGxTdG9ja3NcIiwgZmFsc2VdLFxyXG4gICAgW1wiZGVsZXRlU3RvY2tIaXN0b3J5TG9nc1wiLCBmYWxzZV0sXHJcbiAgICBbXCJldmFsUHJpbnRcIiwgXCJcIl0sXHJcbiAgICBbXCJyZXNldENvbnRyb2xsZXJcIiwgZmFsc2VdLFxyXG4gICAgW1wiZWF0Tm9vZGxlc1wiLCBmYWxzZV0sXHJcbiAgICBbXCJkZWxldGVBbGxTY3JpcHRzXCIsIGZhbHNlXSxcclxuXTtcclxuXHJcbmxldCBuc3g6IE5ldHNjcmlwdEV4dGVuc2lvbjtcclxuXHJcbi8qKlxyXG4gKiBVc2FnZTpcclxuICogcnVuIHRvb2xzLmpzIGtpbGxhbGxcclxuICpcclxuICogQHBhcmFtIG5zXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIG5zeCA9IG5ldyBOZXRzY3JpcHRFeHRlbnNpb24obnMpO1xyXG5cclxuICAgIG5zLmRpc2FibGVMb2coXCJBTExcIik7XHJcbiAgICAvLyBucy5jbGVhckxvZygpO1xyXG4gICAgLy8gbnMudGFpbCgpO1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZyA9IG5zLmZsYWdzKGRlZmF1bHRDb25maWcpO1xyXG4gICAgaWYgKGNvbmZpZy5raWxsYWxsKSB7XHJcbiAgICAgICAgbnN4LnNjYW5CRlMoXCJob21lXCIsIGhvc3QgPT4ge1xyXG4gICAgICAgICAgICBucy5raWxsYWxsKGhvc3QuaG9zdG5hbWUsIHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbmZpZy5zZWxsQWxsU3RvY2tzKSB7XHJcbiAgICAgICAgbnMuc3RvY2suZ2V0U3ltYm9scygpLmZvckVhY2goc3ltYm9sID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBucy5zdG9jay5nZXRQb3NpdGlvbihzeW1ib2wpO1xyXG4gICAgICAgICAgICBucy5zdG9jay5zZWxsU3RvY2soc3ltYm9sLCBwb3NpdGlvblswXSk7XHJcbiAgICAgICAgICAgIC8vIG5zLnN0b2NrLnNlbGxTaG9ydChzeW1ib2wsIHBvc2l0aW9uWzJdKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChjb25maWcuZGVsZXRlU3RvY2tIaXN0b3J5TG9ncykge1xyXG4gICAgICAgIG5zLmxzKFwiaG9tZVwiLCBTVE9DS19ISVNUT1JZX0xPR1NfUFJFRklYKS5mb3JFYWNoKGZpbGVuYW1lID0+IHtcclxuICAgICAgICAgICAgbnMucm0oZmlsZW5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbmZpZy5ldmFsUHJpbnQgIT09IFwiXCIpIHtcclxuICAgICAgICBucy50cHJpbnQoZXZhbCg8c3RyaW5nPmNvbmZpZy5ldmFsUHJpbnQpKTtcclxuICAgIH1cclxuICAgIGlmIChjb25maWcucmVzZXRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgbnMuc2NyaXB0S2lsbChcImNvbnRyb2xsZXIyLmpzXCIsIFwiaG9tZVwiKTtcclxuICAgICAgICBuc3guc2NhbkJGUyhcImhvbWVcIilcclxuICAgICAgICAgICAgLmZpbHRlcihob3N0ID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdC5ob3N0bmFtZSkgPiAwICYmIG5zLmhhc1Jvb3RBY2Nlc3MoaG9zdC5ob3N0bmFtZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGhvc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaG9zdG5hbWUgPSBob3N0Lmhvc3RuYW1lO1xyXG4gICAgICAgICAgICAgICAgbnMuc2NyaXB0S2lsbChXRUFLRU5fU0NSSVBUX05BTUUsIGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgIG5zLnNjcmlwdEtpbGwoR1JPV19TQ1JJUFRfTkFNRSwgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbnMuc2NyaXB0S2lsbChIQUNLX1NDUklQVF9OQU1FLCBob3N0bmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbmZpZy5lYXROb29kbGVzKSB7XHJcbiAgICAgICAgY29uc3QgZG9jOiBEb2N1bWVudCA9IGV2YWwoXCJkb2N1bWVudFwiKTtcclxuICAgICAgICBjb25zdCBidXR0b25zID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEJ1dHRvbkVsZW1lbnQ+KFwiI3Jvb3QgPiBkaXY6bnRoLW9mLXR5cGUoMikgPiBkaXY6bnRoLW9mLXR5cGUoMikgPiBidXR0b25cIikhO1xyXG4gICAgICAgIGxldCBlYXROb29kbGVzQnV0dG9uID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XHJcbiAgICAgICAgICAgIGlmIChidXR0b24udGV4dENvbnRlbnQgPT09IFwiRWF0IG5vb2RsZXNcIikge1xyXG4gICAgICAgICAgICAgICAgZWF0Tm9vZGxlc0J1dHRvbiA9IGJ1dHRvbjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlYXROb29kbGVzQnV0dG9uID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICArK2NvdW50O1xyXG4gICAgICAgICAgICBlYXROb29kbGVzQnV0dG9uLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIGlmIChjb3VudCAlIDEwMCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMjAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY291bnQgPiAxZTUpIHtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KFwiRmluaXNoXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoY29uZmlnLmRlbGV0ZUFsbFNjcmlwdHMpIHtcclxuICAgICAgICBucy5scyhcImhvbWVcIiwgXCIuanNcIikuZm9yRWFjaChmaWxlbmFtZSA9PiB7XHJcbiAgICAgICAgICAgIG5zLnJtKGZpbGVuYW1lKTtcclxuICAgICAgICB9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
