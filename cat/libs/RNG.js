class RNG0 {
  x;
  m = 1024;
  a = 341;
  c = 1;
  constructor() {
    this.x = 0;
    this.reset();
  }
  step() {
    this.x = (this.a * this.x + this.c) % this.m;
  }
  random() {
    this.step();
    return this.x / this.m;
  }
  reset() {
    this.x = (/* @__PURE__ */ new Date()).getTime() % this.m;
  }
}
const BadRNG = new RNG0();
class WHRNG {
  s1 = 0;
  s2 = 0;
  s3 = 0;
  constructor(totalPlaytime) {
    const v = totalPlaytime / 1e3 % 3e4;
    this.s1 = v;
    this.s2 = v;
    this.s3 = v;
  }
  step() {
    this.s1 = 171 * this.s1 % 30269;
    this.s2 = 172 * this.s2 % 30307;
    this.s3 = 170 * this.s3 % 30323;
  }
  random() {
    this.step();
    return (this.s1 / 30269 + this.s2 / 30307 + this.s3 / 30323) % 1;
  }
}
function SFC32RNG(seed) {
  let h = 1779033703 ^ seed.length;
  for (let i = 0; i < seed.length; i++) {
    h = Math.imul(h ^ seed.charCodeAt(i), 3432918353);
    h = h << 13 | h >>> 19;
  }
  const genSeed = () => {
    h = Math.imul(h ^ h >>> 16, 2246822507);
    h = Math.imul(h ^ h >>> 13, 3266489909);
    return (h ^= h >>> 16) >>> 0;
  };
  let a = genSeed();
  let b = genSeed();
  let c = genSeed();
  let d = genSeed();
  return () => {
    a >>>= 0;
    b >>>= 0;
    c >>>= 0;
    d >>>= 0;
    let t = a + b | 0;
    a = b ^ b >>> 9;
    b = c + (c << 3) | 0;
    c = c << 21 | c >>> 11;
    d = d + 1 | 0;
    t = t + d | 0;
    c = c + t | 0;
    return (t >>> 0) / 4294967296;
  };
}
export {
  BadRNG,
  SFC32RNG,
  WHRNG
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2xpYnMvUk5HLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYml0YnVybmVyLW9mZmljaWFsL2JpdGJ1cm5lci1zcmMvZGV2L3NyYy9DYXNpbm8vUk5HLnRzXHJcblxyXG5pbnRlcmZhY2UgUk5HIHtcclxuICAgIHJhbmRvbSgpOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qXHJcbiAqIHZlcnkgYmFkIFJORywgbWVhbnQgdG8gYmUgdXNlZCBhcyBpbnRyb2R1Y3Rpb24gdG8gUk5HIG1hbmlwdWxhdGlvbi4gSXQgaGFzIGFcclxuICogcGVyaW9kIG9mIDEwMjQuXHJcbiAqL1xyXG5jbGFzcyBSTkcwIGltcGxlbWVudHMgUk5HIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIG0gPSAxMDI0O1xyXG4gICAgYSA9IDM0MTtcclxuICAgIGMgPSAxO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMueCA9IDA7XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0ZXAoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy54ID0gKHRoaXMuYSAqIHRoaXMueCArIHRoaXMuYykgJSB0aGlzLm07XHJcbiAgICB9XHJcblxyXG4gICAgcmFuZG9tKCk6IG51bWJlciB7XHJcbiAgICAgICAgdGhpcy5zdGVwKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueCAvIHRoaXMubTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnggPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAlIHRoaXMubTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEJhZFJORzogUk5HMCA9IG5ldyBSTkcwKCk7XHJcblxyXG4vKlxyXG4gKiBXaWNobWFublx1MjAxM0hpbGwgUFJOR1xyXG4gKiBUaGUgcGVyaW9kIGlzIDZlMTIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV0hSTkcgaW1wbGVtZW50cyBSTkcge1xyXG4gICAgczEgPSAwO1xyXG4gICAgczIgPSAwO1xyXG4gICAgczMgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRvdGFsUGxheXRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIC8vIFRoaXMgb25lIGlzIHNlZWRlZCBieSB0aGUgcGxheWVycyB0b3RhbCBwbGF5IHRpbWUuXHJcbiAgICAgICAgY29uc3QgdjogbnVtYmVyID0gKHRvdGFsUGxheXRpbWUgLyAxMDAwKSAlIDMwMDAwO1xyXG4gICAgICAgIHRoaXMuczEgPSB2O1xyXG4gICAgICAgIHRoaXMuczIgPSB2O1xyXG4gICAgICAgIHRoaXMuczMgPSB2O1xyXG4gICAgfVxyXG5cclxuICAgIHN0ZXAoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zMSA9ICgxNzEgKiB0aGlzLnMxKSAlIDMwMjY5O1xyXG4gICAgICAgIHRoaXMuczIgPSAoMTcyICogdGhpcy5zMikgJSAzMDMwNztcclxuICAgICAgICB0aGlzLnMzID0gKDE3MCAqIHRoaXMuczMpICUgMzAzMjM7XHJcbiAgICB9XHJcblxyXG4gICAgcmFuZG9tKCk6IG51bWJlciB7XHJcbiAgICAgICAgdGhpcy5zdGVwKCk7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnMxIC8gMzAyNjkuMCArIHRoaXMuczIgLyAzMDMwNy4wICsgdGhpcy5zMyAvIDMwMzIzLjApICUgMS4wO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU0ZDMzJSTkcoc2VlZDogc3RyaW5nKTogKCkgPT4gbnVtYmVyIHtcclxuICAgIGxldCBoID0gMTc3OTAzMzcwMyBeIHNlZWQubGVuZ3RoO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWVkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaCA9IE1hdGguaW11bChoIF4gc2VlZC5jaGFyQ29kZUF0KGkpLCAzNDMyOTE4MzUzKTtcclxuICAgICAgICBoID0gKGggPDwgMTMpIHwgKGggPj4+IDE5KTtcclxuICAgIH1cclxuICAgIGNvbnN0IGdlblNlZWQgPSAoKTogbnVtYmVyID0+IHtcclxuICAgICAgICBoID0gTWF0aC5pbXVsKGggXiAoaCA+Pj4gMTYpLCAyMjQ2ODIyNTA3KTtcclxuICAgICAgICBoID0gTWF0aC5pbXVsKGggXiAoaCA+Pj4gMTMpLCAzMjY2NDg5OTA5KTtcclxuICAgICAgICByZXR1cm4gKGggXj0gaCA+Pj4gMTYpID4+PiAwO1xyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgYSA9IGdlblNlZWQoKTtcclxuICAgIGxldCBiID0gZ2VuU2VlZCgpO1xyXG4gICAgbGV0IGMgPSBnZW5TZWVkKCk7XHJcbiAgICBsZXQgZCA9IGdlblNlZWQoKTtcclxuICAgIHJldHVybiAoKTogbnVtYmVyID0+IHtcclxuICAgICAgICBhID4+Pj0gMDtcclxuICAgICAgICBiID4+Pj0gMDtcclxuICAgICAgICBjID4+Pj0gMDtcclxuICAgICAgICBkID4+Pj0gMDtcclxuICAgICAgICBsZXQgdCA9IChhICsgYikgfCAwO1xyXG4gICAgICAgIGEgPSBiIF4gKGIgPj4+IDkpO1xyXG4gICAgICAgIGIgPSAoYyArIChjIDw8IDMpKSB8IDA7XHJcbiAgICAgICAgYyA9IChjIDw8IDIxKSB8IChjID4+PiAxMSk7XHJcbiAgICAgICAgZCA9IChkICsgMSkgfCAwO1xyXG4gICAgICAgIHQgPSAodCArIGQpIHwgMDtcclxuICAgICAgICBjID0gKGMgKyB0KSB8IDA7XHJcbiAgICAgICAgcmV0dXJuICh0ID4+PiAwKSAvIDQyOTQ5NjcyOTY7XHJcbiAgICB9O1xyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICJBQVVBLE1BQU0sS0FBb0I7QUFBQSxFQUN0QjtBQUFBLEVBQ0EsSUFBSTtBQUFBLEVBQ0osSUFBSTtBQUFBLEVBQ0osSUFBSTtBQUFBLEVBRUosY0FBYztBQUNWLFNBQUssSUFBSTtBQUNULFNBQUssTUFBTTtBQUFBLEVBQ2Y7QUFBQSxFQUVBLE9BQWE7QUFDVCxTQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSztBQUFBLEVBQy9DO0FBQUEsRUFFQSxTQUFpQjtBQUNiLFNBQUssS0FBSztBQUNWLFdBQU8sS0FBSyxJQUFJLEtBQUs7QUFBQSxFQUN6QjtBQUFBLEVBRUEsUUFBYztBQUNWLFNBQUssS0FBSSxvQkFBSSxLQUFLLEdBQUUsUUFBUSxJQUFJLEtBQUs7QUFBQSxFQUN6QztBQUNKO0FBRU8sTUFBTSxTQUFlLElBQUksS0FBSztBQU05QixNQUFNLE1BQXFCO0FBQUEsRUFDOUIsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBRUwsWUFBWSxlQUF1QjtBQUUvQixVQUFNLElBQWEsZ0JBQWdCLE1BQVE7QUFDM0MsU0FBSyxLQUFLO0FBQ1YsU0FBSyxLQUFLO0FBQ1YsU0FBSyxLQUFLO0FBQUEsRUFDZDtBQUFBLEVBRUEsT0FBYTtBQUNULFNBQUssS0FBTSxNQUFNLEtBQUssS0FBTTtBQUM1QixTQUFLLEtBQU0sTUFBTSxLQUFLLEtBQU07QUFDNUIsU0FBSyxLQUFNLE1BQU0sS0FBSyxLQUFNO0FBQUEsRUFDaEM7QUFBQSxFQUVBLFNBQWlCO0FBQ2IsU0FBSyxLQUFLO0FBQ1YsWUFBUSxLQUFLLEtBQUssUUFBVSxLQUFLLEtBQUssUUFBVSxLQUFLLEtBQUssU0FBVztBQUFBLEVBQ3pFO0FBQ0o7QUFFTyxTQUFTLFNBQVMsTUFBNEI7QUFDakQsTUFBSSxJQUFJLGFBQWEsS0FBSztBQUMxQixXQUFTLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxLQUFLO0FBQ2xDLFFBQUksS0FBSyxLQUFLLElBQUksS0FBSyxXQUFXLENBQUMsR0FBRyxVQUFVO0FBQ2hELFFBQUssS0FBSyxLQUFPLE1BQU07QUFBQSxFQUMzQjtBQUNBLFFBQU0sVUFBVSxNQUFjO0FBQzFCLFFBQUksS0FBSyxLQUFLLElBQUssTUFBTSxJQUFLLFVBQVU7QUFDeEMsUUFBSSxLQUFLLEtBQUssSUFBSyxNQUFNLElBQUssVUFBVTtBQUN4QyxZQUFRLEtBQUssTUFBTSxRQUFRO0FBQUEsRUFDL0I7QUFFQSxNQUFJLElBQUksUUFBUTtBQUNoQixNQUFJLElBQUksUUFBUTtBQUNoQixNQUFJLElBQUksUUFBUTtBQUNoQixNQUFJLElBQUksUUFBUTtBQUNoQixTQUFPLE1BQWM7QUFDakIsV0FBTztBQUNQLFdBQU87QUFDUCxXQUFPO0FBQ1AsV0FBTztBQUNQLFFBQUksSUFBSyxJQUFJLElBQUs7QUFDbEIsUUFBSSxJQUFLLE1BQU07QUFDZixRQUFLLEtBQUssS0FBSyxLQUFNO0FBQ3JCLFFBQUssS0FBSyxLQUFPLE1BQU07QUFDdkIsUUFBSyxJQUFJLElBQUs7QUFDZCxRQUFLLElBQUksSUFBSztBQUNkLFFBQUssSUFBSSxJQUFLO0FBQ2QsWUFBUSxNQUFNLEtBQUs7QUFBQSxFQUN2QjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
