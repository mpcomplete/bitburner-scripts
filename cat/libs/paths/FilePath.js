import {
  directoryRegexString,
  isAbsolutePath,
  oneValidCharacter,
  resolveValidatedDirectory
} from "/libs/paths/Directory";
const filenameRegexString = `(?<file>${oneValidCharacter}+\\.${oneValidCharacter}+)$`;
const basicFilePathRegex = new RegExp(directoryRegexString + filenameRegexString);
function isFilePath(path) {
  return basicFilePathRegex.test(path);
}
function asFilePath(input) {
  if (isFilePath(input) && isAbsolutePath(input))
    return input;
  throw new Error(`${input} failed to validate as a FilePath.`);
}
function getFilenameOnly(path) {
  const start = path.lastIndexOf("/") + 1;
  return path.substring(start);
}
function getFileParts(path) {
  const result = basicFilePathRegex.exec(path);
  return result ? result.groups : null;
}
function resolveFilePath(path, base = "") {
  if (isAbsolutePath(path)) {
    if (path.startsWith("/"))
      path = path.substring(1);
    return isFilePath(path) ? path : null;
  }
  base = getBaseDirectory(base);
  const pathParts = getFileParts(path);
  if (!pathParts)
    return null;
  const directory = resolveValidatedDirectory(pathParts.directory, base);
  return directory === null ? null : combinePath(directory, pathParts.file);
}
function getBaseDirectory(path) {
  return path.replace(/[^/]+\.[^/]+$/, "");
}
function combinePath(directory, file) {
  return directory + file;
}
function removeDirectoryFromPath(directory, path) {
  if (!path.startsWith(directory))
    return null;
  return path.substring(directory.length);
}
export {
  asFilePath,
  combinePath,
  getFilenameOnly,
  isFilePath,
  removeDirectoryFromPath,
  resolveFilePath
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2xpYnMvcGF0aHMvRmlsZVBhdGgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7XHJcbiAgICBBYnNvbHV0ZVBhdGgsXHJcbiAgICBCYXNpY0RpcmVjdG9yeSxcclxuICAgIERpcmVjdG9yeSxcclxuICAgIGRpcmVjdG9yeVJlZ2V4U3RyaW5nLFxyXG4gICAgaXNBYnNvbHV0ZVBhdGgsXHJcbiAgICBvbmVWYWxpZENoYXJhY3RlcixcclxuICAgIHJlc29sdmVWYWxpZGF0ZWREaXJlY3RvcnksXHJcbn0gZnJvbSBcIi9saWJzL3BhdGhzL0RpcmVjdG9yeVwiO1xyXG5cclxuLyoqIEZpbGVwYXRoIFJ1bGVzOlxyXG4gKiAxLiBGaWxlIGV4dGVuc2lvbiBjYW5ub3QgY29udGFpbiBhIFwiL1wiXHJcbiAqIDIuIExhc3QgY2hhcmFjdGVyIGJlZm9yZSB0aGUgZXh0ZW5zaW9uIGNhbm5vdCBiZSBhIFwiL1wiIGFzIHRoaXMgd291bGQgYmUgYSBibGFuayBmaWxlbmFtZVxyXG4gKiAzLiBNdXN0IG5vdCBjb250YWluIGEgbGVhZGluZyBcIi9cIlxyXG4gKiA0LiBEaXJlY3RvcnkgbmFtZXMgY2Fubm90IGJlIDAtbGVuZ3RoIChubyBcIi8vXCIpXHJcbiAqIDUuIFRoZSBjaGFyYWN0ZXJzICosID8sIFssIGFuZCBdICBjYW5ub3QgZXhpc3QgaW4gdGhlIGZpbGVwYXRoKi9cclxudHlwZSBCYXNpY0ZpbGVQYXRoID0gc3RyaW5nICYgeyBfX3R5cGU6IFwiRmlsZVBhdGhcIjsgfTtcclxuXHJcbi8qKiBBIGZpbGUgcGF0aCB0aGF0IGlzIGFsc28gYW4gYWJzb2x1dGUgcGF0aC4gQWRkaXRpb25hbCBhYnNvbHV0ZSBydWxlczpcclxuICogMS4gU3BlY2lmaWMgZGlyZWN0b3J5IG5hbWVzIFwiLlwiIGFuZCBcIi4uXCIgYXJlIGRpc2FsbG93ZWRcclxuICogQWJzb2x1dGVuZXNzIGlzIHR5cGVjaGVja2VkIHdpdGggaXNBYnNvbHV0ZVBhdGggaW4gRGlyZWN0b3J5UGF0aC50cyAqL1xyXG5leHBvcnQgdHlwZSBGaWxlUGF0aCA9IEJhc2ljRmlsZVBhdGggJiBBYnNvbHV0ZVBhdGg7XHJcblxyXG4vLyBDYXB0dXJpbmcgZ3JvdXAgbmFtZWQgZmlsZSB3aGljaCBjYXB0dXJlcyB0aGUgZW50aXJlIGZpbGVuYW1lIHBhcnQgb2YgYSBmaWxlIHBhdGguXHJcbmNvbnN0IGZpbGVuYW1lUmVnZXhTdHJpbmcgPSBgKD88ZmlsZT4ke29uZVZhbGlkQ2hhcmFjdGVyfStcXFxcLiR7b25lVmFsaWRDaGFyYWN0ZXJ9KykkYDtcclxuXHJcbi8qKiBSZWdleCBtYWRlIG9mIHRoZSB0d28gYWJvdmUgcmVnZXggcGFydHMgdG8gdGVzdCBmb3IgYSB3aG9sZSB2YWxpZCBmaWxlcGF0aC4gKi9cclxuY29uc3QgYmFzaWNGaWxlUGF0aFJlZ2V4ID0gbmV3IFJlZ0V4cChkaXJlY3RvcnlSZWdleFN0cmluZyArIGZpbGVuYW1lUmVnZXhTdHJpbmcpIGFzIFJlZ0V4cCAmIHtcclxuICAgIGV4ZWM6IChwYXRoOiBzdHJpbmcpID0+IG51bGwgfCB7IGdyb3VwczogeyBkaXJlY3Rvcnk6IEJhc2ljRGlyZWN0b3J5OyBmaWxlOiBGaWxlUGF0aDsgfTsgfTtcclxufTtcclxuXHJcbi8qKiBTaW1wbGUgdmFsaWRhdGlvbiBmdW5jdGlvbiB3aXRoIG5vIG1vZGlmaWNhdGlvbi4gQ2FuIGJlIGNvbWJpbmVkIHdpdGggaXNBYnNvbHV0ZVBhdGggdG8gZ2V0IGEgcmVhbCBGaWxlUGF0aCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aChwYXRoOiBzdHJpbmcpOiBwYXRoIGlzIEJhc2ljRmlsZVBhdGgge1xyXG4gICAgcmV0dXJuIGJhc2ljRmlsZVBhdGhSZWdleC50ZXN0KHBhdGgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXNGaWxlUGF0aDxUIGV4dGVuZHMgc3RyaW5nPihpbnB1dDogVCk6IFQgJiBGaWxlUGF0aCB7XHJcbiAgICBpZiAoaXNGaWxlUGF0aChpbnB1dCkgJiYgaXNBYnNvbHV0ZVBhdGgoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7aW5wdXR9IGZhaWxlZCB0byB2YWxpZGF0ZSBhcyBhIEZpbGVQYXRoLmApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsZW5hbWVPbmx5PFQgZXh0ZW5kcyBCYXNpY0ZpbGVQYXRoPihwYXRoOiBUKTogVCAmIEZpbGVQYXRoIHtcclxuICAgIGNvbnN0IHN0YXJ0ID0gcGF0aC5sYXN0SW5kZXhPZihcIi9cIikgKyAxO1xyXG4gICAgcmV0dXJuIHBhdGguc3Vic3RyaW5nKHN0YXJ0KSBhcyBUICYgRmlsZVBhdGg7XHJcbn1cclxuXHJcbi8qKiBWYWxpZGF0ZSB3aGlsZSBhbHNvIGNhcHR1cmluZyBhbmQgcmV0dXJuaW5nIGRpcmVjdG9yeSBhbmQgZmlsZSBwYXJ0cyAqL1xyXG5mdW5jdGlvbiBnZXRGaWxlUGFydHMocGF0aDogc3RyaW5nKTogeyBkaXJlY3Rvcnk6IEJhc2ljRGlyZWN0b3J5OyBmaWxlOiBGaWxlUGF0aDsgfSB8IG51bGwge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYmFzaWNGaWxlUGF0aFJlZ2V4LmV4ZWMocGF0aCkgYXMgbnVsbCB8IHsgZ3JvdXBzOiB7IGRpcmVjdG9yeTogQmFzaWNEaXJlY3Rvcnk7IGZpbGU6IEZpbGVQYXRoOyB9OyB9O1xyXG4gICAgcmV0dXJuIHJlc3VsdCA/IHJlc3VsdC5ncm91cHMgOiBudWxsO1xyXG59XHJcblxyXG4vKiogU2FuaXRpemVzIGEgcGxheWVyIGlucHV0IGFuZCByZXNvbHZlcyBhIHJlbGF0aXZlIGZpbGUgcGF0aCB0byBhbiBhYnNvbHV0ZSBvbmUuXHJcbiAqIEBwYXJhbSBwYXRoIFRoZSBwbGF5ZXItcHJvdmlkZWQgcGF0aCBzdHJpbmcuIENhbiBpbmNsdWRlIHJlbGF0aXZlIGRpcmVjdG9yaWVzLlxyXG4gKiBAcGFyYW0gYmFzZSBUaGUgYWJzb2x1dGUgYmFzZSBmb3IgcmVzb2x2aW5nIGEgcmVsYXRpdmUgcGF0aC4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVGaWxlUGF0aChwYXRoOiBzdHJpbmcsIGJhc2UgPSBcIlwiIGFzIEZpbGVQYXRoIHwgRGlyZWN0b3J5KTogRmlsZVBhdGggfCBudWxsIHtcclxuICAgIGlmIChpc0Fic29sdXRlUGF0aChwYXRoKSkge1xyXG4gICAgICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgLy8gQmVjYXVzZSB3ZSBtb2RpZmllZCB0aGUgc3RyaW5nIHNpbmNlIGNoZWNraW5nIGFic29sdXRlbmVzcywgd2UgaGF2ZSB0byBhc3NlcnQgdGhhdCBpdCdzIHN0aWxsIGFic29sdXRlIGhlcmUuXHJcbiAgICAgICAgcmV0dXJuIGlzRmlsZVBhdGgocGF0aCkgPyAocGF0aCBhcyBGaWxlUGF0aCkgOiBudWxsO1xyXG4gICAgfVxyXG4gICAgLy8gVHVybiBiYXNlIGludG8gYSBEaXJlY3RvcnlOYW1lIGluIGNhc2UgaXQgd2FzIG5vdFxyXG4gICAgYmFzZSA9IGdldEJhc2VEaXJlY3RvcnkoYmFzZSk7XHJcbiAgICBjb25zdCBwYXRoUGFydHMgPSBnZXRGaWxlUGFydHMocGF0aCk7XHJcbiAgICBpZiAoIXBhdGhQYXJ0cykgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBkaXJlY3RvcnkgPSByZXNvbHZlVmFsaWRhdGVkRGlyZWN0b3J5KHBhdGhQYXJ0cy5kaXJlY3RvcnksIGJhc2UpO1xyXG4gICAgLy8gSGF2ZSB0byBzcGVjaWZpY2FsbHkgY2hlY2sgbnVsbCBoZXJlIGluc3RlYWQgb2YgdHJ1dGhpbmVzcywgYmVjYXVzZSBlbXB0eSBzdHJpbmcgaXMgYSB2YWxpZCBEaXJlY3RvcnlQYXRoXHJcbiAgICByZXR1cm4gZGlyZWN0b3J5ID09PSBudWxsID8gbnVsbCA6IGNvbWJpbmVQYXRoKGRpcmVjdG9yeSwgcGF0aFBhcnRzLmZpbGUpO1xyXG59XHJcblxyXG4vKiogUmVtb3ZlIHRoZSBmaWxlIHBhcnQgZnJvbSBhbiBhYnNvbHV0ZSBwYXRoIChGaWxlUGF0aCBvciBEaXJlY3RvcnlQYXRoIC0gbm8gbW9kaWZpY2F0aW9uIGlzIGRvbmUgZm9yIGEgRGlyZWN0b3J5UGF0aCkgKi9cclxuZnVuY3Rpb24gZ2V0QmFzZURpcmVjdG9yeShwYXRoOiBGaWxlUGF0aCB8IERpcmVjdG9yeSk6IERpcmVjdG9yeSB7XHJcbiAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9bXi9dK1xcLlteL10rJC8sIFwiXCIpIGFzIERpcmVjdG9yeTtcclxufVxyXG5cclxuLyoqIENvbWJpbmUgYW4gYWJzb2x1dGUgRGlyZWN0b3J5UGF0aCBhbmQgRmlsZVBhdGggdG8gY3JlYXRlIGEgbmV3IEZpbGVQYXRoICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lUGF0aDxUIGV4dGVuZHMgRmlsZVBhdGg+KGRpcmVjdG9yeTogRGlyZWN0b3J5LCBmaWxlOiBUKTogVCB7XHJcbiAgICAvLyBQcmVzZXJ2ZXMgdGhlIHNwZWNpZmljIGZpbGUgdHlwZSBiZWNhdXNlIHRoZSBmaWxlcGFydCBpcyBwcmVzZXJ2ZWQuXHJcbiAgICByZXR1cm4gKGRpcmVjdG9yeSArIGZpbGUpIGFzIFQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEaXJlY3RvcnlGcm9tUGF0aChkaXJlY3Rvcnk6IERpcmVjdG9yeSwgcGF0aDogRmlsZVBhdGgpOiBGaWxlUGF0aCB8IG51bGwge1xyXG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoZGlyZWN0b3J5KSkgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gcGF0aC5zdWJzdHJpbmcoZGlyZWN0b3J5Lmxlbmd0aCkgYXMgRmlsZVBhdGg7XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxFQUlJO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsT0FDRztBQWdCUCxNQUFNLHNCQUFzQixXQUFXLGlCQUFpQixPQUFPLGlCQUFpQjtBQUdoRixNQUFNLHFCQUFxQixJQUFJLE9BQU8sdUJBQXVCLG1CQUFtQjtBQUt6RSxTQUFTLFdBQVcsTUFBcUM7QUFDNUQsU0FBTyxtQkFBbUIsS0FBSyxJQUFJO0FBQ3ZDO0FBRU8sU0FBUyxXQUE2QixPQUF3QjtBQUNqRSxNQUFJLFdBQVcsS0FBSyxLQUFLLGVBQWUsS0FBSztBQUFHLFdBQU87QUFDdkQsUUFBTSxJQUFJLE1BQU0sR0FBRyxLQUFLLG9DQUFvQztBQUNoRTtBQUVPLFNBQVMsZ0JBQXlDLE1BQXVCO0FBQzVFLFFBQU0sUUFBUSxLQUFLLFlBQVksR0FBRyxJQUFJO0FBQ3RDLFNBQU8sS0FBSyxVQUFVLEtBQUs7QUFDL0I7QUFHQSxTQUFTLGFBQWEsTUFBcUU7QUFDdkYsUUFBTSxTQUFTLG1CQUFtQixLQUFLLElBQUk7QUFDM0MsU0FBTyxTQUFTLE9BQU8sU0FBUztBQUNwQztBQUtPLFNBQVMsZ0JBQWdCLE1BQWMsT0FBTyxJQUE2QztBQUM5RixNQUFJLGVBQWUsSUFBSSxHQUFHO0FBQ3RCLFFBQUksS0FBSyxXQUFXLEdBQUc7QUFBRyxhQUFPLEtBQUssVUFBVSxDQUFDO0FBRWpELFdBQU8sV0FBVyxJQUFJLElBQUssT0FBb0I7QUFBQSxFQUNuRDtBQUVBLFNBQU8saUJBQWlCLElBQUk7QUFDNUIsUUFBTSxZQUFZLGFBQWEsSUFBSTtBQUNuQyxNQUFJLENBQUM7QUFBVyxXQUFPO0FBQ3ZCLFFBQU0sWUFBWSwwQkFBMEIsVUFBVSxXQUFXLElBQUk7QUFFckUsU0FBTyxjQUFjLE9BQU8sT0FBTyxZQUFZLFdBQVcsVUFBVSxJQUFJO0FBQzVFO0FBR0EsU0FBUyxpQkFBaUIsTUFBdUM7QUFDN0QsU0FBTyxLQUFLLFFBQVEsaUJBQWlCLEVBQUU7QUFDM0M7QUFHTyxTQUFTLFlBQWdDLFdBQXNCLE1BQVk7QUFFOUUsU0FBUSxZQUFZO0FBQ3hCO0FBRU8sU0FBUyx3QkFBd0IsV0FBc0IsTUFBaUM7QUFDM0YsTUFBSSxDQUFDLEtBQUssV0FBVyxTQUFTO0FBQUcsV0FBTztBQUN4QyxTQUFPLEtBQUssVUFBVSxVQUFVLE1BQU07QUFDMUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
