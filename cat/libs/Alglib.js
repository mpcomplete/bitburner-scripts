var ALGLIBModule = function() {
  var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
  if (typeof __filename !== "undefined")
    _scriptDir = _scriptDir || __filename;
  return function(ALGLIBModule2) {
    ALGLIBModule2 = ALGLIBModule2 || {};
    var Module = typeof ALGLIBModule2 !== "undefined" ? ALGLIBModule2 : {};
    var readyPromiseResolve, readyPromiseReject;
    Module["ready"] = new Promise(function(resolve, reject) {
      readyPromiseResolve = resolve;
      readyPromiseReject = reject;
    });
    var moduleOverrides = {};
    var key;
    for (key in Module) {
      if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
      }
    }
    var arguments_ = [];
    var thisProgram = "./this.program";
    var quit_ = function(status, toThrow) {
      throw toThrow;
    };
    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    var ENVIRONMENT_IS_SHELL = false;
    ENVIRONMENT_IS_WEB = typeof window === "object";
    ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
    ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    var scriptDirectory = "";
    function locateFile(path) {
      if (Module["locateFile"]) {
        return Module["locateFile"](path, scriptDirectory);
      }
      return scriptDirectory + path;
    }
    var read_, readAsync, readBinary, setWindowTitle;
    var nodeFS;
    var nodePath;
    if (ENVIRONMENT_IS_NODE) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = require("path").dirname(scriptDirectory) + "/";
      } else {
        scriptDirectory = __dirname + "/";
      }
      read_ = function shell_read(filename, binary) {
        var ret = tryParseAsDataURI(filename);
        if (ret) {
          return binary ? ret : ret.toString();
        }
        if (!nodeFS)
          nodeFS = require("fs");
        if (!nodePath)
          nodePath = require("path");
        filename = nodePath["normalize"](filename);
        return nodeFS["readFileSync"](filename, binary ? null : "utf8");
      };
      readBinary = function readBinary2(filename) {
        var ret = read_(filename, true);
        if (!ret.buffer) {
          ret = new Uint8Array(ret);
        }
        assert(ret.buffer);
        return ret;
      };
      if (process["argv"].length > 1) {
        thisProgram = process["argv"][1].replace(/\\/g, "/");
      }
      arguments_ = process["argv"].slice(2);
      process["on"]("uncaughtException", function(ex) {
        if (!(ex instanceof ExitStatus)) {
          throw ex;
        }
      });
      process["on"]("unhandledRejection", abort);
      quit_ = function(status) {
        process["exit"](status);
      };
      Module["inspect"] = function() {
        return "[Emscripten Module object]";
      };
    } else if (ENVIRONMENT_IS_SHELL) {
      if (typeof read != "undefined") {
        read_ = function shell_read(f) {
          var data = tryParseAsDataURI(f);
          if (data) {
            return intArrayToString(data);
          }
          return read(f);
        };
      }
      readBinary = function readBinary2(f) {
        var data;
        data = tryParseAsDataURI(f);
        if (data) {
          return data;
        }
        if (typeof readbuffer === "function") {
          return new Uint8Array(readbuffer(f));
        }
        data = read(f, "binary");
        assert(typeof data === "object");
        return data;
      };
      if (typeof scriptArgs != "undefined") {
        arguments_ = scriptArgs;
      } else if (typeof arguments != "undefined") {
        arguments_ = arguments;
      }
      if (typeof quit === "function") {
        quit_ = function(status) {
          quit(status);
        };
      }
      if (typeof print !== "undefined") {
        if (typeof console === "undefined")
          console = {};
        console.log = print;
        console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
      }
    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = self.location.href;
      } else if (typeof document !== "undefined" && document.currentScript) {
        scriptDirectory = document.currentScript.src;
      }
      if (_scriptDir) {
        scriptDirectory = _scriptDir;
      }
      if (scriptDirectory.indexOf("blob:") !== 0) {
        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
      } else {
        scriptDirectory = "";
      }
      {
        read_ = function(url) {
          try {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.send(null);
            return xhr.responseText;
          } catch (err2) {
            var data = tryParseAsDataURI(url);
            if (data) {
              return intArrayToString(data);
            }
            throw err2;
          }
        };
        if (ENVIRONMENT_IS_WORKER) {
          readBinary = function(url) {
            try {
              var xhr = new XMLHttpRequest();
              xhr.open("GET", url, false);
              xhr.responseType = "arraybuffer";
              xhr.send(null);
              return new Uint8Array(xhr.response);
            } catch (err2) {
              var data = tryParseAsDataURI(url);
              if (data) {
                return data;
              }
              throw err2;
            }
          };
        }
        readAsync = function(url, onload, onerror) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, true);
          xhr.responseType = "arraybuffer";
          xhr.onload = function() {
            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
              onload(xhr.response);
              return;
            }
            var data = tryParseAsDataURI(url);
            if (data) {
              onload(data.buffer);
              return;
            }
            onerror();
          };
          xhr.onerror = onerror;
          xhr.send(null);
        };
      }
      setWindowTitle = function(title) {
        document.title = title;
      };
    } else {
    }
    var out = Module["print"] || console.log.bind(console);
    var err = Module["printErr"] || console.warn.bind(console);
    for (key in moduleOverrides) {
      if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
      }
    }
    moduleOverrides = null;
    if (Module["arguments"])
      arguments_ = Module["arguments"];
    if (Module["thisProgram"])
      thisProgram = Module["thisProgram"];
    if (Module["quit"])
      quit_ = Module["quit"];
    var tempRet0 = 0;
    var setTempRet0 = function(value) {
      tempRet0 = value;
    };
    var getTempRet0 = function() {
      return tempRet0;
    };
    var wasmBinary;
    if (Module["wasmBinary"])
      wasmBinary = Module["wasmBinary"];
    var noExitRuntime;
    if (Module["noExitRuntime"])
      noExitRuntime = Module["noExitRuntime"];
    if (typeof WebAssembly !== "object") {
      abort("no native wasm support detected");
    }
    var wasmMemory;
    var ABORT = false;
    var EXITSTATUS;
    function assert(condition, text) {
      if (!condition) {
        abort("Assertion failed: " + text);
      }
    }
    var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
    function UTF8ArrayToString(heap, idx, maxBytesToRead) {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      while (heap[endPtr] && !(endPtr >= endIdx))
        ++endPtr;
      if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(heap.subarray(idx, endPtr));
      } else {
        var str = "";
        while (idx < endPtr) {
          var u0 = heap[idx++];
          if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
          }
          var u1 = heap[idx++] & 63;
          if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
          }
          var u2 = heap[idx++] & 63;
          if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2;
          } else {
            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
          }
          if (u0 < 65536) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
          }
        }
      }
      return str;
    }
    function UTF8ToString(ptr, maxBytesToRead) {
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
    }
    function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
      if (!(maxBytesToWrite > 0))
        return 0;
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) {
          var u1 = str.charCodeAt(++i);
          u = 65536 + ((u & 1023) << 10) | u1 & 1023;
        }
        if (u <= 127) {
          if (outIdx >= endIdx)
            break;
          heap[outIdx++] = u;
        } else if (u <= 2047) {
          if (outIdx + 1 >= endIdx)
            break;
          heap[outIdx++] = 192 | u >> 6;
          heap[outIdx++] = 128 | u & 63;
        } else if (u <= 65535) {
          if (outIdx + 2 >= endIdx)
            break;
          heap[outIdx++] = 224 | u >> 12;
          heap[outIdx++] = 128 | u >> 6 & 63;
          heap[outIdx++] = 128 | u & 63;
        } else {
          if (outIdx + 3 >= endIdx)
            break;
          heap[outIdx++] = 240 | u >> 18;
          heap[outIdx++] = 128 | u >> 12 & 63;
          heap[outIdx++] = 128 | u >> 6 & 63;
          heap[outIdx++] = 128 | u & 63;
        }
      }
      heap[outIdx] = 0;
      return outIdx - startIdx;
    }
    function stringToUTF8(str, outPtr, maxBytesToWrite) {
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    }
    function lengthBytesUTF8(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343)
          u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127)
          ++len;
        else if (u <= 2047)
          len += 2;
        else if (u <= 65535)
          len += 3;
        else
          len += 4;
      }
      return len;
    }
    var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
    function UTF16ToString(ptr, maxBytesToRead) {
      var endPtr = ptr;
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      while (!(idx >= maxIdx) && HEAPU16[idx])
        ++idx;
      endPtr = idx << 1;
      if (endPtr - ptr > 32 && UTF16Decoder) {
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
      } else {
        var str = "";
        for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
          var codeUnit = HEAP16[ptr + i * 2 >> 1];
          if (codeUnit == 0)
            break;
          str += String.fromCharCode(codeUnit);
        }
        return str;
      }
    }
    function stringToUTF16(str, outPtr, maxBytesToWrite) {
      if (maxBytesToWrite === void 0) {
        maxBytesToWrite = 2147483647;
      }
      if (maxBytesToWrite < 2)
        return 0;
      maxBytesToWrite -= 2;
      var startPtr = outPtr;
      var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        var codeUnit = str.charCodeAt(i);
        HEAP16[outPtr >> 1] = codeUnit;
        outPtr += 2;
      }
      HEAP16[outPtr >> 1] = 0;
      return outPtr - startPtr;
    }
    function lengthBytesUTF16(str) {
      return str.length * 2;
    }
    function UTF32ToString(ptr, maxBytesToRead) {
      var i = 0;
      var str = "";
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[ptr + i * 4 >> 2];
        if (utf32 == 0)
          break;
        ++i;
        if (utf32 >= 65536) {
          var ch = utf32 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    }
    function stringToUTF32(str, outPtr, maxBytesToWrite) {
      if (maxBytesToWrite === void 0) {
        maxBytesToWrite = 2147483647;
      }
      if (maxBytesToWrite < 4)
        return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
        }
        HEAP32[outPtr >> 2] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr)
          break;
      }
      HEAP32[outPtr >> 2] = 0;
      return outPtr - startPtr;
    }
    function lengthBytesUTF32(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343)
          ++i;
        len += 4;
      }
      return len;
    }
    var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
    function updateGlobalBufferAndViews(buf) {
      buffer = buf;
      Module["HEAP8"] = HEAP8 = new Int8Array(buf);
      Module["HEAP16"] = HEAP16 = new Int16Array(buf);
      Module["HEAP32"] = HEAP32 = new Int32Array(buf);
      Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
      Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
      Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
      Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
      Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
    }
    var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
    var wasmTable;
    var __ATPRERUN__ = [];
    var __ATINIT__ = [];
    var __ATMAIN__ = [];
    var __ATPOSTRUN__ = [];
    var runtimeInitialized = false;
    __ATINIT__.push({ func: function() {
      ___wasm_call_ctors();
    } });
    function preRun() {
      if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function")
          Module["preRun"] = [Module["preRun"]];
        while (Module["preRun"].length) {
          addOnPreRun(Module["preRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPRERUN__);
    }
    function initRuntime() {
      runtimeInitialized = true;
      callRuntimeCallbacks(__ATINIT__);
    }
    function preMain() {
      callRuntimeCallbacks(__ATMAIN__);
    }
    function postRun() {
      if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function")
          Module["postRun"] = [Module["postRun"]];
        while (Module["postRun"].length) {
          addOnPostRun(Module["postRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPOSTRUN__);
    }
    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }
    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null;
    function addRunDependency(id) {
      runDependencies++;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
    }
    function removeRunDependency(id) {
      runDependencies--;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
      if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }
    Module["preloadedImages"] = {};
    Module["preloadedAudios"] = {};
    function abort(what) {
      if (Module["onAbort"]) {
        Module["onAbort"](what);
      }
      what += "";
      err(what);
      ABORT = true;
      EXITSTATUS = 1;
      what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
      var e = new WebAssembly.RuntimeError(what);
      readyPromiseReject(e);
      throw e;
    }
    function hasPrefix(str, prefix) {
      return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
    }
    var dataURIPrefix = "data:application/octet-stream;base64,";
    function isDataURI(filename) {
      return hasPrefix(filename, dataURIPrefix);
    }
    var fileURIPrefix = "file://";
    function isFileURI(filename) {
      return hasPrefix(filename, fileURIPrefix);
    }
    var wasmBinaryFile = "data:application/octet-stream;base64,";
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = locateFile(wasmBinaryFile);
    }
    function getBinary(file) {
      try {
        if (file == wasmBinaryFile && wasmBinary) {
          return new Uint8Array(wasmBinary);
        }
        var binary = tryParseAsDataURI(file);
        if (binary) {
          return binary;
        }
        if (readBinary) {
          return readBinary(file);
        } else {
          throw "both async and sync fetching of the wasm failed";
        }
      } catch (err2) {
        abort(err2);
      }
    }
    function getBinaryPromise() {
      if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
        if (typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
          return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
            if (!response["ok"]) {
              throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
            }
            return response["arrayBuffer"]();
          }).catch(function() {
            return getBinary(wasmBinaryFile);
          });
        } else {
          if (readAsync) {
            return new Promise(function(resolve, reject) {
              readAsync(wasmBinaryFile, function(response) {
                resolve(new Uint8Array(response));
              }, reject);
            });
          }
        }
      }
      return Promise.resolve().then(function() {
        return getBinary(wasmBinaryFile);
      });
    }
    function createWasm() {
      var info = { "a": asmLibraryArg };
      function receiveInstance(instance, module2) {
        var exports3 = instance.exports;
        Module["asm"] = exports3;
        wasmMemory = Module["asm"]["H"];
        updateGlobalBufferAndViews(wasmMemory.buffer);
        wasmTable = Module["asm"]["J"];
        removeRunDependency("wasm-instantiate");
      }
      addRunDependency("wasm-instantiate");
      function receiveInstantiatedSource(output) {
        receiveInstance(output["instance"]);
      }
      function instantiateArrayBuffer(receiver) {
        return getBinaryPromise().then(function(binary) {
          return WebAssembly.instantiate(binary, info);
        }).then(receiver, function(reason) {
          err("failed to asynchronously prepare wasm: " + reason);
          abort(reason);
        });
      }
      function instantiateAsync() {
        if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
          return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
            var result = WebAssembly.instantiateStreaming(response, info);
            return result.then(receiveInstantiatedSource, function(reason) {
              err("wasm streaming compile failed: " + reason);
              err("falling back to ArrayBuffer instantiation");
              return instantiateArrayBuffer(receiveInstantiatedSource);
            });
          });
        } else {
          return instantiateArrayBuffer(receiveInstantiatedSource);
        }
      }
      if (Module["instantiateWasm"]) {
        try {
          var exports2 = Module["instantiateWasm"](info, receiveInstance);
          return exports2;
        } catch (e) {
          err("Module.instantiateWasm callback failed with error: " + e);
          return false;
        }
      }
      instantiateAsync().catch(readyPromiseReject);
      return {};
    }
    function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == "function") {
          callback(Module);
          continue;
        }
        var func = callback.func;
        if (typeof func === "number") {
          if (callback.arg === void 0) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === void 0 ? null : callback.arg);
        }
      }
    }
    var ExceptionInfoAttrs = { DESTRUCTOR_OFFSET: 0, REFCOUNT_OFFSET: 4, TYPE_OFFSET: 8, CAUGHT_OFFSET: 12, RETHROWN_OFFSET: 13, SIZE: 16 };
    function ___cxa_allocate_exception(size) {
      return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
    }
    function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
      this.set_type = function(type) {
        HEAP32[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >> 2] = type;
      };
      this.get_type = function() {
        return HEAP32[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >> 2];
      };
      this.set_destructor = function(destructor) {
        HEAP32[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >> 2] = destructor;
      };
      this.get_destructor = function() {
        return HEAP32[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >> 2];
      };
      this.set_refcount = function(refcount) {
        HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = refcount;
      };
      this.set_caught = function(caught) {
        caught = caught ? 1 : 0;
        HEAP8[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >> 0] = caught;
      };
      this.get_caught = function() {
        return HEAP8[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >> 0] != 0;
      };
      this.set_rethrown = function(rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >> 0] = rethrown;
      };
      this.get_rethrown = function() {
        return HEAP8[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >> 0] != 0;
      };
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      };
      this.add_ref = function() {
        var value = HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2];
        HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = value + 1;
      };
      this.release_ref = function() {
        var prev = HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2];
        HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = prev - 1;
        return prev === 1;
      };
    }
    var exceptionLast = 0;
    var uncaughtExceptionCount = 0;
    function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr;
    }
    function getShiftFromSize(size) {
      switch (size) {
        case 1:
          return 0;
        case 2:
          return 1;
        case 4:
          return 2;
        case 8:
          return 3;
        default:
          throw new TypeError("Unknown type size: " + size);
      }
    }
    function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
    var embind_charCodes = void 0;
    function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
        ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
    var awaitingDependencies = {};
    var registeredTypes = {};
    var typeDependencies = {};
    var char_0 = 48;
    var char_9 = 57;
    function makeLegalFunctionName(name) {
      if (void 0 === name) {
        return "_unknown";
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, "$");
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return "_" + name;
      } else {
        return name;
      }
    }
    function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      return new Function("body", "return function " + name + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body);
    }
    function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
        var stack = new Error(message).stack;
        if (stack !== void 0) {
          this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
        if (this.message === void 0) {
          return this.name;
        } else {
          return this.name + ": " + this.message;
        }
      };
      return errorClass;
    }
    var BindingError = void 0;
    function throwBindingError(message) {
      throw new BindingError(message);
    }
    var InternalError = void 0;
    function throwInternalError(message) {
      throw new InternalError(message);
    }
    function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
      });
      function onComplete(typeConverters2) {
        var myTypeConverters = getTypeConverters(typeConverters2);
        if (myTypeConverters.length !== myTypes.length) {
          throwInternalError("Mismatched type converter count");
        }
        for (var i = 0; i < myTypes.length; ++i) {
          registerType(myTypes[i], myTypeConverters[i]);
        }
      }
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(function() {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    }
    function registerType(rawType, registeredInstance, options) {
      options = options || {};
      if (!("argPackAdvance" in registeredInstance)) {
        throw new TypeError("registerType registeredInstance requires argPackAdvance");
      }
      var name = registeredInstance.name;
      if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return;
        } else {
          throwBindingError("Cannot register type '" + name + "' twice");
        }
      }
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
          cb();
        });
      }
    }
    function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, { name, "fromWireType": function(wt) {
        return !!wt;
      }, "toWireType": function(destructors, o) {
        return o ? trueValue : falseValue;
      }, "argPackAdvance": 8, "readValueFromPointer": function(pointer) {
        var heap;
        if (size === 1) {
          heap = HEAP8;
        } else if (size === 2) {
          heap = HEAP16;
        } else if (size === 4) {
          heap = HEAP32;
        } else {
          throw new TypeError("Unknown boolean type size: " + name);
        }
        return this["fromWireType"](heap[pointer >> shift]);
      }, destructorFunction: null });
    }
    function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
        return false;
      }
      if (!(other instanceof ClassHandle)) {
        return false;
      }
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }
      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }
      return leftClass === rightClass && left === right;
    }
    function shallowCopyInternalPointer(o) {
      return { count: o.count, deleteScheduled: o.deleteScheduled, preservePointerOnDelete: o.preservePointerOnDelete, ptr: o.ptr, ptrType: o.ptrType, smartPtr: o.smartPtr, smartPtrType: o.smartPtrType };
    }
    function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
    }
    var finalizationGroup = false;
    function detachFinalizer(handle) {
    }
    function runDestructor($$) {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
    function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
        runDestructor($$);
      }
    }
    function attachFinalizer(handle) {
      if ("undefined" === typeof FinalizationGroup) {
        attachFinalizer = function(handle2) {
          return handle2;
        };
        return handle;
      }
      finalizationGroup = new FinalizationGroup(function(iter) {
        for (var result = iter.next(); !result.done; result = iter.next()) {
          var $$ = result.value;
          if (!$$.ptr) {
            console.warn("object already deleted: " + $$.ptr);
          } else {
            releaseClassHandle($$);
          }
        }
      });
      attachFinalizer = function(handle2) {
        finalizationGroup.register(handle2, handle2.$$, handle2.$$);
        return handle2;
      };
      detachFinalizer = function(handle2) {
        finalizationGroup.unregister(handle2.$$);
      };
      return attachFinalizer(handle);
    }
    function ClassHandle_clone() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
      } else {
        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), { $$: { value: shallowCopyInternalPointer(this.$$) } }));
        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
      }
    }
    function ClassHandle_delete() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError("Object already scheduled for deletion");
      }
      detachFinalizer(this);
      releaseClassHandle(this.$$);
      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = void 0;
        this.$$.ptr = void 0;
      }
    }
    function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
    var delayFunction = void 0;
    var deletionQueue = [];
    function flushPendingDeletes() {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj["delete"]();
      }
    }
    function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError("Object already scheduled for deletion");
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
    function init_ClassHandle() {
      ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
      ClassHandle.prototype["clone"] = ClassHandle_clone;
      ClassHandle.prototype["delete"] = ClassHandle_delete;
      ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
      ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
    }
    function ClassHandle() {
    }
    var registeredPointers = {};
    function ensureOverloadTable(proto, methodName, humanName) {
      if (void 0 === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        proto[methodName] = function() {
          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
            throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
          }
          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
    function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
        if (void 0 === numArguments || void 0 !== Module[name].overloadTable && void 0 !== Module[name].overloadTable[numArguments]) {
          throwBindingError("Cannot register public name '" + name + "' twice");
        }
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
          throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        if (void 0 !== numArguments) {
          Module[name].numArguments = numArguments;
        }
      }
    }
    function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
    function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
    function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }
        return 0;
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
    function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }
        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr;
        } else {
          return 0;
        }
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      if (this.isSmartPointer) {
        if (void 0 === handle.$$.smartPtr) {
          throwBindingError("Passing raw pointer to smart pointer is illegal");
        }
        switch (this.sharingPolicy) {
          case 0:
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
            }
            break;
          case 1:
            ptr = handle.$$.smartPtr;
            break;
          case 2:
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle["clone"]();
              ptr = this.rawShare(ptr, __emval_register(function() {
                clonedHandle["delete"]();
              }));
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break;
          default:
            throwBindingError("Unsupporting sharing policy");
        }
      }
      return ptr;
    }
    function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }
        return 0;
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }
      if (handle.$$.ptrType.isConst) {
        throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
    function simpleReadValueFromPointer(pointer) {
      return this["fromWireType"](HEAPU32[pointer >> 2]);
    }
    function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
    function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
        this.rawDestructor(ptr);
      }
    }
    function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
        handle["delete"]();
      }
    }
    function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
        return ptr;
      }
      if (void 0 === desiredClass.baseClass) {
        return null;
      }
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null;
      }
      return desiredClass.downcast(rv);
    }
    function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
    function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
          rv.push(registeredInstances[k]);
        }
      }
      return rv;
    }
    function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
    }
    function init_embind() {
      Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
      Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
      Module["flushPendingDeletes"] = flushPendingDeletes;
      Module["setDelayFunction"] = setDelayFunction;
    }
    var registeredInstances = {};
    function getBasestPointer(class_, ptr) {
      if (ptr === void 0) {
        throwBindingError("ptr should not be undefined");
      }
      while (class_.baseClass) {
        ptr = class_.upcast(ptr);
        class_ = class_.baseClass;
      }
      return ptr;
    }
    function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
    function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
        throwInternalError("makeClassHandle requires ptr and ptrType");
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError("Both smartPtrType and smartPtr must be specified");
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, { $$: { value: record } }));
    }
    function RegisteredPointer_fromWireType(ptr) {
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (void 0 !== registeredInstance) {
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance["clone"]();
        } else {
          var rv = registeredInstance["clone"]();
          this.destructor(ptr);
          return rv;
        }
      }
      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this.pointeeType, ptr: rawPointer, smartPtrType: this, smartPtr: ptr });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this, ptr });
        }
      }
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }
      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp, smartPtrType: this, smartPtr: ptr });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp });
      }
    }
    function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype["argPackAdvance"] = 8;
      RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
      RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
    }
    function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
      if (!isSmartPointer && registeredClass.baseClass === void 0) {
        if (isConst) {
          this["toWireType"] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this["toWireType"] = genericPointerToWireType;
      }
    }
    function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError("Replacing nonexistant public symbol");
      }
      if (void 0 !== Module[name].overloadTable && void 0 !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    }
    function dynCallLegacy(sig, ptr, args) {
      var f = Module["dynCall_" + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
    function dynCall(sig, ptr, args) {
      if (sig.indexOf("j") != -1) {
        return dynCallLegacy(sig, ptr, args);
      }
      return wasmTable.get(ptr).apply(null, args);
    }
    function getDynCaller(sig, ptr) {
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
    function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
      function makeDynCaller() {
        if (signature.indexOf("j") != -1) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
        throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
    var UnboundTypeError = void 0;
    function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
    function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return;
        }
        if (registeredTypes[type]) {
          return;
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);
      throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
    }
    function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
      exposePublicSymbol(legalFunctionName, function() {
        throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
      });
      whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function(base) {
        base = base[0];
        var baseClass;
        var basePrototype;
        if (baseClassRawType) {
          baseClass = base.registeredClass;
          basePrototype = baseClass.instancePrototype;
        } else {
          basePrototype = ClassHandle.prototype;
        }
        var constructor = createNamedFunction(legalFunctionName, function() {
          if (Object.getPrototypeOf(this) !== instancePrototype) {
            throw new BindingError("Use 'new' to construct " + name);
          }
          if (void 0 === registeredClass.constructor_body) {
            throw new BindingError(name + " has no accessible constructor");
          }
          var body = registeredClass.constructor_body[arguments.length];
          if (void 0 === body) {
            throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
          }
          return body.apply(this, arguments);
        });
        var instancePrototype = Object.create(basePrototype, { constructor: { value: constructor } });
        constructor.prototype = instancePrototype;
        var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
        var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
        var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
        var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
        registeredPointers[rawType] = { pointerType: pointerConverter, constPointerType: constPointerConverter };
        replacePublicSymbol(legalFunctionName, constructor);
        return [referenceConverter, pointerConverter, constPointerConverter];
      });
    }
    function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
    function runDestructors(destructors) {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    }
    function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = "constructor " + classType.name;
        if (void 0 === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }
        if (void 0 !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
          throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
        };
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
            if (arguments.length !== argCount - 1) {
              throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
            }
            destructors.length = 0;
            args.length = argCount;
            for (var i = 1; i < argCount; ++i) {
              args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
            }
            var ptr = invoker.apply(null, args);
            runDestructors(destructors);
            return argTypes[0]["fromWireType"](ptr);
          };
          return [];
        });
        return [];
      });
    }
    function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
      }
      var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {
      });
      dummy.prototype = constructor.prototype;
      var obj = new dummy();
      var r = constructor.apply(obj, argumentList);
      return r instanceof Object ? r : obj;
    }
    function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      var argCount = argTypes.length;
      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
      var isClassMethodFunc = argTypes[1] !== null && classType !== null;
      var needsDestructorStack = false;
      for (var i = 1; i < argTypes.length; ++i) {
        if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
          needsDestructorStack = true;
          break;
        }
      }
      var returns = argTypes[0].name !== "void";
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
      }
      var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\nif (arguments.length !== " + (argCount - 2) + ") {\nthrowBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n}\n";
      if (needsDestructorStack) {
        invokerFnBody += "var destructors = [];\n";
      }
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
      if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
      }
      for (var i = 0; i < argCount - 2; ++i) {
        invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
        args1.push("argType" + i);
        args2.push(argTypes[i + 2]);
      }
      if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
      invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
      if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
      } else {
        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
          var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
            args1.push(paramName + "_dtor");
            args2.push(argTypes[i].destructorFunction);
          }
        }
      }
      if (returns) {
        invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
      args1.push(invokerFnBody);
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
    function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + "." + methodName;
        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }
        function unboundTypesHandler() {
          throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
        }
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (void 0 === method || void 0 === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
          if (void 0 === proto[methodName].overloadTable) {
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }
          return [];
        });
        return [];
      });
    }
    var emval_free_list = [];
    var emval_handle_array = [{}, { value: void 0 }, { value: null }, { value: true }, { value: false }];
    function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
        emval_handle_array[handle] = void 0;
        emval_free_list.push(handle);
      }
    }
    function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== void 0) {
          ++count;
        }
      }
      return count;
    }
    function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== void 0) {
          return emval_handle_array[i];
        }
      }
      return null;
    }
    function init_emval() {
      Module["count_emval_handles"] = count_emval_handles;
      Module["get_first_emval"] = get_first_emval;
    }
    function __emval_register(value) {
      switch (value) {
        case void 0: {
          return 1;
        }
        case null: {
          return 2;
        }
        case true: {
          return 3;
        }
        case false: {
          return 4;
        }
        default: {
          var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
          emval_handle_array[handle] = { refcount: 1, value };
          return handle;
        }
      }
    }
    function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, { name, "fromWireType": function(handle) {
        var rv = emval_handle_array[handle].value;
        __emval_decref(handle);
        return rv;
      }, "toWireType": function(destructors, value) {
        return __emval_register(value);
      }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: null });
    }
    function _embind_repr(v) {
      if (v === null) {
        return "null";
      }
      var t = typeof v;
      if (t === "object" || t === "array" || t === "function") {
        return v.toString();
      } else {
        return "" + v;
      }
    }
    function floatReadValueFromPointer(name, shift) {
      switch (shift) {
        case 2:
          return function(pointer) {
            return this["fromWireType"](HEAPF32[pointer >> 2]);
          };
        case 3:
          return function(pointer) {
            return this["fromWireType"](HEAPF64[pointer >> 3]);
          };
        default:
          throw new TypeError("Unknown float type: " + name);
      }
    }
    function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, { name, "fromWireType": function(value) {
        return value;
      }, "toWireType": function(destructors, value) {
        if (typeof value !== "number" && typeof value !== "boolean") {
          throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
        }
        return value;
      }, "argPackAdvance": 8, "readValueFromPointer": floatReadValueFromPointer(name, shift), destructorFunction: null });
    }
    function integerReadValueFromPointer(name, shift, signed) {
      switch (shift) {
        case 0:
          return signed ? function readS8FromPointer(pointer) {
            return HEAP8[pointer];
          } : function readU8FromPointer(pointer) {
            return HEAPU8[pointer];
          };
        case 1:
          return signed ? function readS16FromPointer(pointer) {
            return HEAP16[pointer >> 1];
          } : function readU16FromPointer(pointer) {
            return HEAPU16[pointer >> 1];
          };
        case 2:
          return signed ? function readS32FromPointer(pointer) {
            return HEAP32[pointer >> 2];
          } : function readU32FromPointer(pointer) {
            return HEAPU32[pointer >> 2];
          };
        default:
          throw new TypeError("Unknown integer type: " + name);
      }
    }
    function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) {
        maxRange = 4294967295;
      }
      var shift = getShiftFromSize(size);
      var fromWireType = function(value) {
        return value;
      };
      if (minRange === 0) {
        var bitshift = 32 - 8 * size;
        fromWireType = function(value) {
          return value << bitshift >>> bitshift;
        };
      }
      var isUnsignedType = name.indexOf("unsigned") != -1;
      registerType(primitiveType, { name, "fromWireType": fromWireType, "toWireType": function(destructors, value) {
        if (typeof value !== "number" && typeof value !== "boolean") {
          throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
        }
        if (value < minRange || value > maxRange) {
          throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
        }
        return isUnsignedType ? value >>> 0 : value | 0;
      }, "argPackAdvance": 8, "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0), destructorFunction: null });
    }
    function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
      var TA = typeMapping[dataTypeIndex];
      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle];
        var data = heap[handle + 1];
        return new TA(buffer, data, size);
      }
      name = readLatin1String(name);
      registerType(rawType, { name, "fromWireType": decodeMemoryView, "argPackAdvance": 8, "readValueFromPointer": decodeMemoryView }, { ignoreDuplicateRegistrations: true });
    }
    function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8 = name === "std::string";
      registerType(rawType, { name, "fromWireType": function(value) {
        var length = HEAPU32[value >> 2];
        var str;
        if (stdStringIsUTF8) {
          var decodeStartPtr = value + 4;
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i;
            if (i == length || HEAPU8[currentBytePtr] == 0) {
              var maxRead = currentBytePtr - decodeStartPtr;
              var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
              if (str === void 0) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + 1;
            }
          }
        } else {
          var a = new Array(length);
          for (var i = 0; i < length; ++i) {
            a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
          }
          str = a.join("");
        }
        _free(value);
        return str;
      }, "toWireType": function(destructors, value) {
        if (value instanceof ArrayBuffer) {
          value = new Uint8Array(value);
        }
        var getLength;
        var valueIsOfTypeString = typeof value === "string";
        if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
          throwBindingError("Cannot pass non-string to std::string");
        }
        if (stdStringIsUTF8 && valueIsOfTypeString) {
          getLength = function() {
            return lengthBytesUTF8(value);
          };
        } else {
          getLength = function() {
            return value.length;
          };
        }
        var length = getLength();
        var ptr = _malloc(4 + length + 1);
        HEAPU32[ptr >> 2] = length;
        if (stdStringIsUTF8 && valueIsOfTypeString) {
          stringToUTF8(value, ptr + 4, length + 1);
        } else {
          if (valueIsOfTypeString) {
            for (var i = 0; i < length; ++i) {
              var charCode = value.charCodeAt(i);
              if (charCode > 255) {
                _free(ptr);
                throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
              }
              HEAPU8[ptr + 4 + i] = charCode;
            }
          } else {
            for (var i = 0; i < length; ++i) {
              HEAPU8[ptr + 4 + i] = value[i];
            }
          }
        }
        if (destructors !== null) {
          destructors.push(_free, ptr);
        }
        return ptr;
      }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function(ptr) {
        _free(ptr);
      } });
    }
    function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        getHeap = function() {
          return HEAPU16;
        };
        shift = 1;
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        getHeap = function() {
          return HEAPU32;
        };
        shift = 2;
      }
      registerType(rawType, { name, "fromWireType": function(value) {
        var length = HEAPU32[value >> 2];
        var HEAP = getHeap();
        var str;
        var decodeStartPtr = value + 4;
        for (var i = 0; i <= length; ++i) {
          var currentBytePtr = value + 4 + i * charSize;
          if (i == length || HEAP[currentBytePtr >> shift] == 0) {
            var maxReadBytes = currentBytePtr - decodeStartPtr;
            var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
            if (str === void 0) {
              str = stringSegment;
            } else {
              str += String.fromCharCode(0);
              str += stringSegment;
            }
            decodeStartPtr = currentBytePtr + charSize;
          }
        }
        _free(value);
        return str;
      }, "toWireType": function(destructors, value) {
        if (!(typeof value === "string")) {
          throwBindingError("Cannot pass non-string to C++ string type " + name);
        }
        var length = lengthBytesUTF(value);
        var ptr = _malloc(4 + length + charSize);
        HEAPU32[ptr >> 2] = length >> shift;
        encodeString(value, ptr + 4, length + charSize);
        if (destructors !== null) {
          destructors.push(_free, ptr);
        }
        return ptr;
      }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function(ptr) {
        _free(ptr);
      } });
    }
    function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, { isVoid: true, name, "argPackAdvance": 0, "fromWireType": function() {
        return void 0;
      }, "toWireType": function(destructors, o) {
        return void 0;
      } });
    }
    function requireHandle(handle) {
      if (!handle) {
        throwBindingError("Cannot use deleted val. handle = " + handle);
      }
      return emval_handle_array[handle].value;
    }
    function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (void 0 === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
    function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, "emval::as");
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType["toWireType"](destructors, handle);
    }
    function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], "parameter " + i);
      }
      return a;
    }
    function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
        var type = types[i];
        args[i] = type["readValueFromPointer"](argv);
        argv += type["argPackAdvance"];
      }
      var rv = handle.apply(void 0, args);
      return __emval_register(rv);
    }
    function __emval_incref(handle) {
      if (handle > 4) {
        emval_handle_array[handle].refcount += 1;
      }
    }
    function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }
    function _abort() {
      abort();
    }
    function _longjmp(env, value) {
      _setThrew(env, value || 1);
      throw "longjmp";
    }
    function _emscripten_longjmp(a0, a1) {
      return _longjmp(a0, a1);
    }
    function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }
    function abortOnCannotGrowMemory(requestedSize) {
      abort("OOM");
    }
    function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }
    function _getTempRet0() {
      return getTempRet0() | 0;
    }
    function _setTempRet0($i) {
      setTempRet0($i | 0);
    }
    embind_init_charCodes();
    BindingError = Module["BindingError"] = extendError(Error, "BindingError");
    InternalError = Module["InternalError"] = extendError(Error, "InternalError");
    init_ClassHandle();
    init_RegisteredPointer();
    init_embind();
    UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
    init_emval();
    var ASSERTIONS = false;
    function intArrayToString(array) {
      var ret = [];
      for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 255) {
          if (ASSERTIONS) {
            assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
          }
          chr &= 255;
        }
        ret.push(String.fromCharCode(chr));
      }
      return ret.join("");
    }
    var decodeBase64 = typeof atob === "function" ? atob : function(input) {
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      do {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 !== 64) {
          output = output + String.fromCharCode(chr2);
        }
        if (enc4 !== 64) {
          output = output + String.fromCharCode(chr3);
        }
      } while (i < input.length);
      return output;
    };
    function intArrayFromBase64(s) {
      if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
        var buf;
        try {
          buf = Buffer.from(s, "base64");
        } catch (_) {
          buf = new Buffer(s, "base64");
        }
        return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
      }
      try {
        var decoded = decodeBase64(s);
        var bytes = new Uint8Array(decoded.length);
        for (var i = 0; i < decoded.length; ++i) {
          bytes[i] = decoded.charCodeAt(i);
        }
        return bytes;
      } catch (_) {
        throw new Error("Converting base64 string to bytes failed.");
      }
    }
    function tryParseAsDataURI(filename) {
      if (!isDataURI(filename)) {
        return;
      }
      return intArrayFromBase64(filename.slice(dataURIPrefix.length));
    }
    var asmLibraryArg = { "g": ___cxa_allocate_exception, "f": ___cxa_throw, "B": __embind_register_bool, "G": __embind_register_class, "F": __embind_register_class_constructor, "k": __embind_register_class_function, "A": __embind_register_emval, "t": __embind_register_float, "l": __embind_register_integer, "j": __embind_register_memory_view, "u": __embind_register_std_string, "r": __embind_register_std_wstring, "C": __embind_register_void, "p": __emval_as, "q": __emval_call, "h": __emval_decref, "n": __emval_incref, "o": __emval_run_destructors, "m": _abort, "c": _emscripten_longjmp, "y": _emscripten_memcpy_big, "z": _emscripten_resize_heap, "a": _getTempRet0, "e": invoke_iii, "D": invoke_iiii, "v": invoke_v, "i": invoke_vi, "w": invoke_viidii, "d": invoke_viii, "s": invoke_viiii, "E": invoke_viiiii, "x": invoke_vij, "b": _setTempRet0 };
    var asm = createWasm();
    var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
      return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["I"]).apply(null, arguments);
    };
    var _malloc = Module["_malloc"] = function() {
      return (_malloc = Module["_malloc"] = Module["asm"]["K"]).apply(null, arguments);
    };
    var _free = Module["_free"] = function() {
      return (_free = Module["_free"] = Module["asm"]["L"]).apply(null, arguments);
    };
    var ___getTypeName = Module["___getTypeName"] = function() {
      return (___getTypeName = Module["___getTypeName"] = Module["asm"]["M"]).apply(null, arguments);
    };
    var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
      return (___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = Module["asm"]["N"]).apply(null, arguments);
    };
    var stackSave = Module["stackSave"] = function() {
      return (stackSave = Module["stackSave"] = Module["asm"]["O"]).apply(null, arguments);
    };
    var stackRestore = Module["stackRestore"] = function() {
      return (stackRestore = Module["stackRestore"] = Module["asm"]["P"]).apply(null, arguments);
    };
    var _setThrew = Module["_setThrew"] = function() {
      return (_setThrew = Module["_setThrew"] = Module["asm"]["Q"]).apply(null, arguments);
    };
    var dynCall_vij = Module["dynCall_vij"] = function() {
      return (dynCall_vij = Module["dynCall_vij"] = Module["asm"]["R"]).apply(null, arguments);
    };
    function invoke_iii(index, a1, a2) {
      var sp = stackSave();
      try {
        return wasmTable.get(index)(a1, a2);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_vi(index, a1) {
      var sp = stackSave();
      try {
        wasmTable.get(index)(a1);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viii(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        wasmTable.get(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiii(index, a1, a2, a3, a4) {
      var sp = stackSave();
      try {
        wasmTable.get(index)(a1, a2, a3, a4);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiiii(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        wasmTable.get(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiii(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        return wasmTable.get(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viidii(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        wasmTable.get(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_v(index) {
      var sp = stackSave();
      try {
        wasmTable.get(index)();
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_vij(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        dynCall_vij(index, a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp")
          throw e;
        _setThrew(1, 0);
      }
    }
    var calledRun;
    function ExitStatus(status) {
      this.name = "ExitStatus";
      this.message = "Program terminated with exit(" + status + ")";
      this.status = status;
    }
    dependenciesFulfilled = function runCaller() {
      if (!calledRun)
        run();
      if (!calledRun)
        dependenciesFulfilled = runCaller;
    };
    function run(args) {
      args = args || arguments_;
      if (runDependencies > 0) {
        return;
      }
      preRun();
      if (runDependencies > 0) {
        return;
      }
      function doRun() {
        if (calledRun)
          return;
        calledRun = true;
        Module["calledRun"] = true;
        if (ABORT)
          return;
        initRuntime();
        preMain();
        readyPromiseResolve(Module);
        if (Module["onRuntimeInitialized"])
          Module["onRuntimeInitialized"]();
        postRun();
      }
      if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout(function() {
          setTimeout(function() {
            Module["setStatus"]("");
          }, 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
    }
    Module["run"] = run;
    if (Module["preInit"]) {
      if (typeof Module["preInit"] == "function")
        Module["preInit"] = [Module["preInit"]];
      while (Module["preInit"].length > 0) {
        Module["preInit"].pop()();
      }
    }
    noExitRuntime = true;
    run();
    return ALGLIBModule2.ready;
  };
}();
if (typeof exports === "object" && typeof module === "object")
  module.exports = ALGLIBModule;
else if (typeof define === "function" && define["amd"])
  define([], function() {
    return ALGLIBModule;
  });
else if (typeof exports === "object")
  exports["ALGLIBModule"] = ALGLIBModule;
class Alglib {
  constructor() {
    this.loaded = false;
    this.fxn = [];
    this.equality_constraint = [];
    this.inequality_constraint = [];
    this.callback = [];
    this.stat = [];
    this.jacobian = [];
    this.countEvals = 0;
    this.varLength = 0;
    this.maxLength = 1e3;
    this.data = new Float64Array(this.maxLength);
    this.promise = new Promise(function(resolve, reject) {
      ALGLIBModule().then(function(Module) {
        this.instance = new Module.ALGLIBjs();
        let nDataBytes = this.data.length * this.data.BYTES_PER_ELEMENT;
        let dataPtr = Module._malloc(nDataBytes);
        this.dataHeap = new Float64Array(Module.HEAPF64.buffer, dataPtr, nDataBytes);
        this.dataHeap.set(new Float64Array(this.data.buffer));
        this.loaded = true;
        resolve();
      }.bind(this));
    }.bind(this));
  }
  // Method
  add_function(fn) {
    this.fxn.push(fn);
  }
  // Method
  add_greater_than_or_equal_to_constraint(fn) {
    let f = function(x) {
      return -fn(x);
    };
    this.equality_constraint.push(f);
  }
  // Method
  add_less_than_or_equal_to_constraint(fn) {
    this.equality_constraint.push(fn);
  }
  // Method
  add_equality_constraint(fn) {
    this.equality_constraint.push(fn);
  }
  // Method
  add_inequality_constraint(fn) {
    this.inequality_constraint.push(fn);
  }
  add_jacobian(fn) {
    this.jacobian.push(fn);
  }
  // Method
  add_callback(fn) {
    this.callback.push(fn);
  }
  reset() {
    this.instance.reset();
    this.fxn = [];
    this.equality_constraint = [];
    this.inequality_constraint = [];
    this.callback = [];
    this.jacobian = [];
  }
  //Method
  load_fxns() {
    for (let i = 0; i < this.fxn.length; i++) {
      let newfunc = function f() {
        let x = new Float64Array(this.dataHeap.buffer, this.dataHeap.byteOffset, this.varLength);
        if (this.stat.length < 1e4) {
          let str = "";
          for (let j = 0; j < x.length; j++) {
            str += x[j].toExponential(5) + "	";
          }
          this.stat.push(str);
        }
        this.countEvals++;
        return this.fxn[i](x);
      };
      this.instance.add_function(newfunc.bind(this));
    }
    for (let i = 0; i < this.jacobian.length; i++) {
      let newfunc = function f(j) {
        let x = new Float64Array(this.dataHeap.buffer, this.dataHeap.byteOffset, this.varLength);
        this.countEvals++;
        return this.jacobian[i](x, j);
      };
      this.instance.add_jacobian(newfunc.bind(this));
    }
    for (let i = 0; i < this.equality_constraint.length; i++) {
      let newfunc = function f() {
        let x = new Float64Array(this.dataHeap.buffer, this.dataHeap.byteOffset, this.varLength);
        this.countEvals++;
        return this.equality_constraint[i](x);
      };
      this.instance.add_equality_constraint(newfunc.bind(this));
    }
    for (let i = 0; i < this.inequality_constraint.length; i++) {
      let newfunc = function f() {
        let x = new Float64Array(this.dataHeap.buffer, this.dataHeap.byteOffset, this.varLength);
        this.countEvals++;
        return this.inequality_constraint[i](x);
      };
      this.instance.add_inequality_constraint(newfunc.bind(this));
    }
    for (let i = 0; i < this.callback.length; i++) {
      let newfunc = function f(evaluate_jacobians, new_evaluation_point) {
        let x = new Float64Array(this.dataHeap.buffer, this.dataHeap.byteOffset, this.varLength);
        this.countEvals++;
        return this.callback[i](x, evaluate_jacobians, new_evaluation_point);
      };
      this.instance.add_callback(newfunc.bind(this));
    }
  }
  solve(mode, xi, xs = [], max_iterations = 5e4, penalty = 50, radius = 0.1, diffstep = 1e-6, stop_threshold = 1e-5) {
    if (this.loaded == true) {
      const t0 = performance.now();
      if (this.jacobian.length > 0) {
        let jacobian_rows = 1 + this.equality_constraint.length + this.inequality_constraint.length;
        if (jacobian_rows != this.jacobian.length) {
          throw "Error: not enough jacobian functions defined. Define one for the optimization function and one for each constraint. Need " + jacobian_rows;
        }
      }
      this.countEvals = 0;
      this.stat = [];
      let str = "";
      for (let j = 0; j < xi.length; j++) {
        str += "    x" + j + "		";
      }
      this.stat.push(str);
      this.mode = mode;
      this.minmax = 0;
      if (mode == "min") {
        this.minmax = 1;
      } else if (mode == "max") {
        this.minmax = 2;
      }
      if (this.varLength <= this.maxLength) {
        this.varLength = xi.length;
      } else {
        throw "Max number of vars exceeded";
      }
      this.load_fxns();
      for (let i = 0; i < this.varLength; i++) {
        if (Number.isFinite(xs[i])) {
          this.dataHeap[i] = xs[i];
        } else {
          this.dataHeap[i] = 1;
        }
      }
      this.instance.set_xs(this.dataHeap.byteOffset, this.varLength);
      for (let i = 0; i < this.varLength; i++) {
        this.dataHeap[i] = xi[i];
      }
      this.instance.setup_x(this.dataHeap.byteOffset, this.varLength);
      this.instance.solve(this.minmax, max_iterations, penalty, radius, diffstep, stop_threshold);
      let x = new Float64Array(this.dataHeap.buffer, this.dataHeap.byteOffset, this.varLength);
      let normalArray = [].slice.call(x);
      this.results = normalArray;
      this.termType = this.instance.get_status();
      const t1 = performance.now();
      this.timing = "Call to optimizer took " + (t1 - t0) + " milliseconds.";
      return true;
    } else {
      console.log("Warning the Alglib.js wasm has not been loaded yet.");
      return false;
    }
  }
  get_results() {
    return this.results;
  }
  get_status() {
    var termTypeText = "";
    if (this.termType == 2) {
      termTypeText = "Found local max/min. Sampling radius decreased below the threshold value";
    } else if (this.termType == 7) {
      termTypeText = "Stopping conditions are too stringent. Further improvement is impossible. X contains best point found so far.";
    } else if (this.termType == 8) {
      termTypeText = "User requested termination";
    } else if (this.termType == -8) {
      termTypeText = "Internal integrity control detected infinite or NAN values in function/gradient. Abnormal termination signalled.";
    } else if (this.termType == -3) {
      termTypeText = "Box constraints are inconsistent";
    } else if (this.termType == -1) {
      termTypeText = "Inconsistent parameters were passed";
    } else {
      termTypeText = "Unknown return type";
    }
    return termTypeText;
  }
  get_report() {
    let x = this.get_results();
    var reportText = "The solver attempted find the " + this.mode + " of f(x) subject to " + this.equality_constraint.length + " equality constraints and " + this.inequality_constraint.length + ' inequality constraints.		\nTermination condition: "' + this.get_status() + '"		\nThe final value of the optimization function was f(x) = ' + this.fxn[0](x) + "		\nThe final variable values were: [" + this.get_results() + "]		\nNumber of function evaluations: " + this.countEvals + "		\n" + this.timing + "		\n\nIteration Report:		\n" + this.stat.join("\n") + "		\n";
    return reportText;
  }
  remove() {
    this.loaded == false;
    this.instance.delete();
  }
}
export {
  Alglib
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2xpYnMvQWxnbGliLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJcclxudmFyIEFMR0xJQk1vZHVsZSA9IChmdW5jdGlvbigpIHtcclxuICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdW5kZWZpbmVkO1xyXG4gIGlmICh0eXBlb2YgX19maWxlbmFtZSAhPT0gJ3VuZGVmaW5lZCcpIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XHJcbiAgcmV0dXJuIChcclxuZnVuY3Rpb24oQUxHTElCTW9kdWxlKSB7XHJcbiAgQUxHTElCTW9kdWxlID0gQUxHTElCTW9kdWxlIHx8IHt9O1xyXG5cclxudmFyIE1vZHVsZT10eXBlb2YgQUxHTElCTW9kdWxlIT09XCJ1bmRlZmluZWRcIj9BTEdMSUJNb2R1bGU6e307dmFyIHJlYWR5UHJvbWlzZVJlc29sdmUscmVhZHlQcm9taXNlUmVqZWN0O01vZHVsZVtcInJlYWR5XCJdPW5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtyZWFkeVByb21pc2VSZXNvbHZlPXJlc29sdmU7cmVhZHlQcm9taXNlUmVqZWN0PXJlamVjdH0pO3ZhciBtb2R1bGVPdmVycmlkZXM9e307dmFyIGtleTtmb3Ioa2V5IGluIE1vZHVsZSl7aWYoTW9kdWxlLmhhc093blByb3BlcnR5KGtleSkpe21vZHVsZU92ZXJyaWRlc1trZXldPU1vZHVsZVtrZXldfX12YXIgYXJndW1lbnRzXz1bXTt2YXIgdGhpc1Byb2dyYW09XCIuL3RoaXMucHJvZ3JhbVwiO3ZhciBxdWl0Xz1mdW5jdGlvbihzdGF0dXMsdG9UaHJvdyl7dGhyb3cgdG9UaHJvd307dmFyIEVOVklST05NRU5UX0lTX1dFQj1mYWxzZTt2YXIgRU5WSVJPTk1FTlRfSVNfV09SS0VSPWZhbHNlO3ZhciBFTlZJUk9OTUVOVF9JU19OT0RFPWZhbHNlO3ZhciBFTlZJUk9OTUVOVF9JU19TSEVMTD1mYWxzZTtFTlZJUk9OTUVOVF9JU19XRUI9dHlwZW9mIHdpbmRvdz09PVwib2JqZWN0XCI7RU5WSVJPTk1FTlRfSVNfV09SS0VSPXR5cGVvZiBpbXBvcnRTY3JpcHRzPT09XCJmdW5jdGlvblwiO0VOVklST05NRU5UX0lTX05PREU9dHlwZW9mIHByb2Nlc3M9PT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucz09PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGU9PT1cInN0cmluZ1wiO0VOVklST05NRU5UX0lTX1NIRUxMPSFFTlZJUk9OTUVOVF9JU19XRUImJiFFTlZJUk9OTUVOVF9JU19OT0RFJiYhRU5WSVJPTk1FTlRfSVNfV09SS0VSO3ZhciBzY3JpcHREaXJlY3Rvcnk9XCJcIjtmdW5jdGlvbiBsb2NhdGVGaWxlKHBhdGgpe2lmKE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0pe3JldHVybiBNb2R1bGVbXCJsb2NhdGVGaWxlXCJdKHBhdGgsc2NyaXB0RGlyZWN0b3J5KX1yZXR1cm4gc2NyaXB0RGlyZWN0b3J5K3BhdGh9dmFyIHJlYWRfLHJlYWRBc3luYyxyZWFkQmluYXJ5LHNldFdpbmRvd1RpdGxlO3ZhciBub2RlRlM7dmFyIG5vZGVQYXRoO2lmKEVOVklST05NRU5UX0lTX05PREUpe2lmKEVOVklST05NRU5UX0lTX1dPUktFUil7c2NyaXB0RGlyZWN0b3J5PXJlcXVpcmUoXCJwYXRoXCIpLmRpcm5hbWUoc2NyaXB0RGlyZWN0b3J5KStcIi9cIn1lbHNle3NjcmlwdERpcmVjdG9yeT1fX2Rpcm5hbWUrXCIvXCJ9cmVhZF89ZnVuY3Rpb24gc2hlbGxfcmVhZChmaWxlbmFtZSxiaW5hcnkpe3ZhciByZXQ9dHJ5UGFyc2VBc0RhdGFVUkkoZmlsZW5hbWUpO2lmKHJldCl7cmV0dXJuIGJpbmFyeT9yZXQ6cmV0LnRvU3RyaW5nKCl9aWYoIW5vZGVGUylub2RlRlM9cmVxdWlyZShcImZzXCIpO2lmKCFub2RlUGF0aClub2RlUGF0aD1yZXF1aXJlKFwicGF0aFwiKTtmaWxlbmFtZT1ub2RlUGF0aFtcIm5vcm1hbGl6ZVwiXShmaWxlbmFtZSk7cmV0dXJuIG5vZGVGU1tcInJlYWRGaWxlU3luY1wiXShmaWxlbmFtZSxiaW5hcnk/bnVsbDpcInV0ZjhcIil9O3JlYWRCaW5hcnk9ZnVuY3Rpb24gcmVhZEJpbmFyeShmaWxlbmFtZSl7dmFyIHJldD1yZWFkXyhmaWxlbmFtZSx0cnVlKTtpZighcmV0LmJ1ZmZlcil7cmV0PW5ldyBVaW50OEFycmF5KHJldCl9YXNzZXJ0KHJldC5idWZmZXIpO3JldHVybiByZXR9O2lmKHByb2Nlc3NbXCJhcmd2XCJdLmxlbmd0aD4xKXt0aGlzUHJvZ3JhbT1wcm9jZXNzW1wiYXJndlwiXVsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpfWFyZ3VtZW50c189cHJvY2Vzc1tcImFyZ3ZcIl0uc2xpY2UoMik7cHJvY2Vzc1tcIm9uXCJdKFwidW5jYXVnaHRFeGNlcHRpb25cIixmdW5jdGlvbihleCl7aWYoIShleCBpbnN0YW5jZW9mIEV4aXRTdGF0dXMpKXt0aHJvdyBleH19KTtwcm9jZXNzW1wib25cIl0oXCJ1bmhhbmRsZWRSZWplY3Rpb25cIixhYm9ydCk7cXVpdF89ZnVuY3Rpb24oc3RhdHVzKXtwcm9jZXNzW1wiZXhpdFwiXShzdGF0dXMpfTtNb2R1bGVbXCJpbnNwZWN0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuXCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwifX1lbHNlIGlmKEVOVklST05NRU5UX0lTX1NIRUxMKXtpZih0eXBlb2YgcmVhZCE9XCJ1bmRlZmluZWRcIil7cmVhZF89ZnVuY3Rpb24gc2hlbGxfcmVhZChmKXt2YXIgZGF0YT10cnlQYXJzZUFzRGF0YVVSSShmKTtpZihkYXRhKXtyZXR1cm4gaW50QXJyYXlUb1N0cmluZyhkYXRhKX1yZXR1cm4gcmVhZChmKX19cmVhZEJpbmFyeT1mdW5jdGlvbiByZWFkQmluYXJ5KGYpe3ZhciBkYXRhO2RhdGE9dHJ5UGFyc2VBc0RhdGFVUkkoZik7aWYoZGF0YSl7cmV0dXJuIGRhdGF9aWYodHlwZW9mIHJlYWRidWZmZXI9PT1cImZ1bmN0aW9uXCIpe3JldHVybiBuZXcgVWludDhBcnJheShyZWFkYnVmZmVyKGYpKX1kYXRhPXJlYWQoZixcImJpbmFyeVwiKTthc3NlcnQodHlwZW9mIGRhdGE9PT1cIm9iamVjdFwiKTtyZXR1cm4gZGF0YX07aWYodHlwZW9mIHNjcmlwdEFyZ3MhPVwidW5kZWZpbmVkXCIpe2FyZ3VtZW50c189c2NyaXB0QXJnc31lbHNlIGlmKHR5cGVvZiBhcmd1bWVudHMhPVwidW5kZWZpbmVkXCIpe2FyZ3VtZW50c189YXJndW1lbnRzfWlmKHR5cGVvZiBxdWl0PT09XCJmdW5jdGlvblwiKXtxdWl0Xz1mdW5jdGlvbihzdGF0dXMpe3F1aXQoc3RhdHVzKX19aWYodHlwZW9mIHByaW50IT09XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGNvbnNvbGU9PT1cInVuZGVmaW5lZFwiKWNvbnNvbGU9e307Y29uc29sZS5sb2c9cHJpbnQ7Y29uc29sZS53YXJuPWNvbnNvbGUuZXJyb3I9dHlwZW9mIHByaW50RXJyIT09XCJ1bmRlZmluZWRcIj9wcmludEVycjpwcmludH19ZWxzZSBpZihFTlZJUk9OTUVOVF9JU19XRUJ8fEVOVklST05NRU5UX0lTX1dPUktFUil7aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtzY3JpcHREaXJlY3Rvcnk9c2VsZi5sb2NhdGlvbi5ocmVmfWVsc2UgaWYodHlwZW9mIGRvY3VtZW50IT09XCJ1bmRlZmluZWRcIiYmZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7c2NyaXB0RGlyZWN0b3J5PWRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjfWlmKF9zY3JpcHREaXIpe3NjcmlwdERpcmVjdG9yeT1fc2NyaXB0RGlyfWlmKHNjcmlwdERpcmVjdG9yeS5pbmRleE9mKFwiYmxvYjpcIikhPT0wKXtzY3JpcHREaXJlY3Rvcnk9c2NyaXB0RGlyZWN0b3J5LnN1YnN0cigwLHNjcmlwdERpcmVjdG9yeS5sYXN0SW5kZXhPZihcIi9cIikrMSl9ZWxzZXtzY3JpcHREaXJlY3Rvcnk9XCJcIn17cmVhZF89ZnVuY3Rpb24odXJsKXt0cnl7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO3hoci5zZW5kKG51bGwpO3JldHVybiB4aHIucmVzcG9uc2VUZXh0fWNhdGNoKGVycil7dmFyIGRhdGE9dHJ5UGFyc2VBc0RhdGFVUkkodXJsKTtpZihkYXRhKXtyZXR1cm4gaW50QXJyYXlUb1N0cmluZyhkYXRhKX10aHJvdyBlcnJ9fTtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe3JlYWRCaW5hcnk9ZnVuY3Rpb24odXJsKXt0cnl7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO3hoci5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO3hoci5zZW5kKG51bGwpO3JldHVybiBuZXcgVWludDhBcnJheSh4aHIucmVzcG9uc2UpfWNhdGNoKGVycil7dmFyIGRhdGE9dHJ5UGFyc2VBc0RhdGFVUkkodXJsKTtpZihkYXRhKXtyZXR1cm4gZGF0YX10aHJvdyBlcnJ9fX1yZWFkQXN5bmM9ZnVuY3Rpb24odXJsLG9ubG9hZCxvbmVycm9yKXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCx0cnVlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIub25sb2FkPWZ1bmN0aW9uKCl7aWYoeGhyLnN0YXR1cz09MjAwfHx4aHIuc3RhdHVzPT0wJiZ4aHIucmVzcG9uc2Upe29ubG9hZCh4aHIucmVzcG9uc2UpO3JldHVybn12YXIgZGF0YT10cnlQYXJzZUFzRGF0YVVSSSh1cmwpO2lmKGRhdGEpe29ubG9hZChkYXRhLmJ1ZmZlcik7cmV0dXJufW9uZXJyb3IoKX07eGhyLm9uZXJyb3I9b25lcnJvcjt4aHIuc2VuZChudWxsKX19c2V0V2luZG93VGl0bGU9ZnVuY3Rpb24odGl0bGUpe2RvY3VtZW50LnRpdGxlPXRpdGxlfX1lbHNle312YXIgb3V0PU1vZHVsZVtcInByaW50XCJdfHxjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO3ZhciBlcnI9TW9kdWxlW1wicHJpbnRFcnJcIl18fGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpO2ZvcihrZXkgaW4gbW9kdWxlT3ZlcnJpZGVzKXtpZihtb2R1bGVPdmVycmlkZXMuaGFzT3duUHJvcGVydHkoa2V5KSl7TW9kdWxlW2tleV09bW9kdWxlT3ZlcnJpZGVzW2tleV19fW1vZHVsZU92ZXJyaWRlcz1udWxsO2lmKE1vZHVsZVtcImFyZ3VtZW50c1wiXSlhcmd1bWVudHNfPU1vZHVsZVtcImFyZ3VtZW50c1wiXTtpZihNb2R1bGVbXCJ0aGlzUHJvZ3JhbVwiXSl0aGlzUHJvZ3JhbT1Nb2R1bGVbXCJ0aGlzUHJvZ3JhbVwiXTtpZihNb2R1bGVbXCJxdWl0XCJdKXF1aXRfPU1vZHVsZVtcInF1aXRcIl07dmFyIHRlbXBSZXQwPTA7dmFyIHNldFRlbXBSZXQwPWZ1bmN0aW9uKHZhbHVlKXt0ZW1wUmV0MD12YWx1ZX07dmFyIGdldFRlbXBSZXQwPWZ1bmN0aW9uKCl7cmV0dXJuIHRlbXBSZXQwfTt2YXIgd2FzbUJpbmFyeTtpZihNb2R1bGVbXCJ3YXNtQmluYXJ5XCJdKXdhc21CaW5hcnk9TW9kdWxlW1wid2FzbUJpbmFyeVwiXTt2YXIgbm9FeGl0UnVudGltZTtpZihNb2R1bGVbXCJub0V4aXRSdW50aW1lXCJdKW5vRXhpdFJ1bnRpbWU9TW9kdWxlW1wibm9FeGl0UnVudGltZVwiXTtpZih0eXBlb2YgV2ViQXNzZW1ibHkhPT1cIm9iamVjdFwiKXthYm9ydChcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIil9dmFyIHdhc21NZW1vcnk7dmFyIEFCT1JUPWZhbHNlO3ZhciBFWElUU1RBVFVTO2Z1bmN0aW9uIGFzc2VydChjb25kaXRpb24sdGV4dCl7aWYoIWNvbmRpdGlvbil7YWJvcnQoXCJBc3NlcnRpb24gZmFpbGVkOiBcIit0ZXh0KX19dmFyIFVURjhEZWNvZGVyPXR5cGVvZiBUZXh0RGVjb2RlciE9PVwidW5kZWZpbmVkXCI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp1bmRlZmluZWQ7ZnVuY3Rpb24gVVRGOEFycmF5VG9TdHJpbmcoaGVhcCxpZHgsbWF4Qnl0ZXNUb1JlYWQpe3ZhciBlbmRJZHg9aWR4K21heEJ5dGVzVG9SZWFkO3ZhciBlbmRQdHI9aWR4O3doaWxlKGhlYXBbZW5kUHRyXSYmIShlbmRQdHI+PWVuZElkeCkpKytlbmRQdHI7aWYoZW5kUHRyLWlkeD4xNiYmaGVhcC5zdWJhcnJheSYmVVRGOERlY29kZXIpe3JldHVybiBVVEY4RGVjb2Rlci5kZWNvZGUoaGVhcC5zdWJhcnJheShpZHgsZW5kUHRyKSl9ZWxzZXt2YXIgc3RyPVwiXCI7d2hpbGUoaWR4PGVuZFB0cil7dmFyIHUwPWhlYXBbaWR4KytdO2lmKCEodTAmMTI4KSl7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKTtjb250aW51ZX12YXIgdTE9aGVhcFtpZHgrK10mNjM7aWYoKHUwJjIyNCk9PTE5Mil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCh1MCYzMSk8PDZ8dTEpO2NvbnRpbnVlfXZhciB1Mj1oZWFwW2lkeCsrXSY2MztpZigodTAmMjQwKT09MjI0KXt1MD0odTAmMTUpPDwxMnx1MTw8Nnx1Mn1lbHNle3UwPSh1MCY3KTw8MTh8dTE8PDEyfHUyPDw2fGhlYXBbaWR4KytdJjYzfWlmKHUwPDY1NTM2KXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUodTApfWVsc2V7dmFyIGNoPXUwLTY1NTM2O3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NnxjaD4+MTAsNTYzMjB8Y2gmMTAyMyl9fX1yZXR1cm4gc3RyfWZ1bmN0aW9uIFVURjhUb1N0cmluZyhwdHIsbWF4Qnl0ZXNUb1JlYWQpe3JldHVybiBwdHI/VVRGOEFycmF5VG9TdHJpbmcoSEVBUFU4LHB0cixtYXhCeXRlc1RvUmVhZCk6XCJcIn1mdW5jdGlvbiBzdHJpbmdUb1VURjhBcnJheShzdHIsaGVhcCxvdXRJZHgsbWF4Qnl0ZXNUb1dyaXRlKXtpZighKG1heEJ5dGVzVG9Xcml0ZT4wKSlyZXR1cm4gMDt2YXIgc3RhcnRJZHg9b3V0SWR4O3ZhciBlbmRJZHg9b3V0SWR4K21heEJ5dGVzVG9Xcml0ZS0xO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciB1PXN0ci5jaGFyQ29kZUF0KGkpO2lmKHU+PTU1Mjk2JiZ1PD01NzM0Myl7dmFyIHUxPXN0ci5jaGFyQ29kZUF0KCsraSk7dT02NTUzNisoKHUmMTAyMyk8PDEwKXx1MSYxMDIzfWlmKHU8PTEyNyl7aWYob3V0SWR4Pj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109dX1lbHNlIGlmKHU8PTIwNDcpe2lmKG91dElkeCsxPj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109MTkyfHU+PjY7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZSBpZih1PD02NTUzNSl7aWYob3V0SWR4KzI+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT0yMjR8dT4+MTI7aGVhcFtvdXRJZHgrK109MTI4fHU+PjYmNjM7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZXtpZihvdXRJZHgrMz49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTI0MHx1Pj4xODtoZWFwW291dElkeCsrXT0xMjh8dT4+MTImNjM7aGVhcFtvdXRJZHgrK109MTI4fHU+PjYmNjM7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9fWhlYXBbb3V0SWR4XT0wO3JldHVybiBvdXRJZHgtc3RhcnRJZHh9ZnVuY3Rpb24gc3RyaW5nVG9VVEY4KHN0cixvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKXtyZXR1cm4gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLEhFQVBVOCxvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKX1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjgoc3RyKXt2YXIgbGVuPTA7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIHU9c3RyLmNoYXJDb2RlQXQoaSk7aWYodT49NTUyOTYmJnU8PTU3MzQzKXU9NjU1MzYrKCh1JjEwMjMpPDwxMCl8c3RyLmNoYXJDb2RlQXQoKytpKSYxMDIzO2lmKHU8PTEyNykrK2xlbjtlbHNlIGlmKHU8PTIwNDcpbGVuKz0yO2Vsc2UgaWYodTw9NjU1MzUpbGVuKz0zO2Vsc2UgbGVuKz00fXJldHVybiBsZW59dmFyIFVURjE2RGVjb2Rlcj10eXBlb2YgVGV4dERlY29kZXIhPT1cInVuZGVmaW5lZFwiP25ldyBUZXh0RGVjb2RlcihcInV0Zi0xNmxlXCIpOnVuZGVmaW5lZDtmdW5jdGlvbiBVVEYxNlRvU3RyaW5nKHB0cixtYXhCeXRlc1RvUmVhZCl7dmFyIGVuZFB0cj1wdHI7dmFyIGlkeD1lbmRQdHI+PjE7dmFyIG1heElkeD1pZHgrbWF4Qnl0ZXNUb1JlYWQvMjt3aGlsZSghKGlkeD49bWF4SWR4KSYmSEVBUFUxNltpZHhdKSsraWR4O2VuZFB0cj1pZHg8PDE7aWYoZW5kUHRyLXB0cj4zMiYmVVRGMTZEZWNvZGVyKXtyZXR1cm4gVVRGMTZEZWNvZGVyLmRlY29kZShIRUFQVTguc3ViYXJyYXkocHRyLGVuZFB0cikpfWVsc2V7dmFyIHN0cj1cIlwiO2Zvcih2YXIgaT0wOyEoaT49bWF4Qnl0ZXNUb1JlYWQvMik7KytpKXt2YXIgY29kZVVuaXQ9SEVBUDE2W3B0citpKjI+PjFdO2lmKGNvZGVVbml0PT0wKWJyZWFrO3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZShjb2RlVW5pdCl9cmV0dXJuIHN0cn19ZnVuY3Rpb24gc3RyaW5nVG9VVEYxNihzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl7aWYobWF4Qnl0ZXNUb1dyaXRlPT09dW5kZWZpbmVkKXttYXhCeXRlc1RvV3JpdGU9MjE0NzQ4MzY0N31pZihtYXhCeXRlc1RvV3JpdGU8MilyZXR1cm4gMDttYXhCeXRlc1RvV3JpdGUtPTI7dmFyIHN0YXJ0UHRyPW91dFB0cjt2YXIgbnVtQ2hhcnNUb1dyaXRlPW1heEJ5dGVzVG9Xcml0ZTxzdHIubGVuZ3RoKjI/bWF4Qnl0ZXNUb1dyaXRlLzI6c3RyLmxlbmd0aDtmb3IodmFyIGk9MDtpPG51bUNoYXJzVG9Xcml0ZTsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtIRUFQMTZbb3V0UHRyPj4xXT1jb2RlVW5pdDtvdXRQdHIrPTJ9SEVBUDE2W291dFB0cj4+MV09MDtyZXR1cm4gb3V0UHRyLXN0YXJ0UHRyfWZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGMTYoc3RyKXtyZXR1cm4gc3RyLmxlbmd0aCoyfWZ1bmN0aW9uIFVURjMyVG9TdHJpbmcocHRyLG1heEJ5dGVzVG9SZWFkKXt2YXIgaT0wO3ZhciBzdHI9XCJcIjt3aGlsZSghKGk+PW1heEJ5dGVzVG9SZWFkLzQpKXt2YXIgdXRmMzI9SEVBUDMyW3B0citpKjQ+PjJdO2lmKHV0ZjMyPT0wKWJyZWFrOysraTtpZih1dGYzMj49NjU1MzYpe3ZhciBjaD11dGYzMi02NTUzNjtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Y2g+PjEwLDU2MzIwfGNoJjEwMjMpfWVsc2V7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHV0ZjMyKX19cmV0dXJuIHN0cn1mdW5jdGlvbiBzdHJpbmdUb1VURjMyKHN0cixvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKXtpZihtYXhCeXRlc1RvV3JpdGU9PT11bmRlZmluZWQpe21heEJ5dGVzVG9Xcml0ZT0yMTQ3NDgzNjQ3fWlmKG1heEJ5dGVzVG9Xcml0ZTw0KXJldHVybiAwO3ZhciBzdGFydFB0cj1vdXRQdHI7dmFyIGVuZFB0cj1zdGFydFB0cittYXhCeXRlc1RvV3JpdGUtNDtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXt2YXIgY29kZVVuaXQ9c3RyLmNoYXJDb2RlQXQoaSk7aWYoY29kZVVuaXQ+PTU1Mjk2JiZjb2RlVW5pdDw9NTczNDMpe3ZhciB0cmFpbFN1cnJvZ2F0ZT1zdHIuY2hhckNvZGVBdCgrK2kpO2NvZGVVbml0PTY1NTM2KygoY29kZVVuaXQmMTAyMyk8PDEwKXx0cmFpbFN1cnJvZ2F0ZSYxMDIzfUhFQVAzMltvdXRQdHI+PjJdPWNvZGVVbml0O291dFB0cis9NDtpZihvdXRQdHIrND5lbmRQdHIpYnJlYWt9SEVBUDMyW291dFB0cj4+Ml09MDtyZXR1cm4gb3V0UHRyLXN0YXJ0UHRyfWZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGMzIoc3RyKXt2YXIgbGVuPTA7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGNvZGVVbml0PXN0ci5jaGFyQ29kZUF0KGkpO2lmKGNvZGVVbml0Pj01NTI5NiYmY29kZVVuaXQ8PTU3MzQzKSsraTtsZW4rPTR9cmV0dXJuIGxlbn12YXIgYnVmZmVyLEhFQVA4LEhFQVBVOCxIRUFQMTYsSEVBUFUxNixIRUFQMzIsSEVBUFUzMixIRUFQRjMyLEhFQVBGNjQ7ZnVuY3Rpb24gdXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3MoYnVmKXtidWZmZXI9YnVmO01vZHVsZVtcIkhFQVA4XCJdPUhFQVA4PW5ldyBJbnQ4QXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQMTZcIl09SEVBUDE2PW5ldyBJbnQxNkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUDMyXCJdPUhFQVAzMj1uZXcgSW50MzJBcnJheShidWYpO01vZHVsZVtcIkhFQVBVOFwiXT1IRUFQVTg9bmV3IFVpbnQ4QXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQVTE2XCJdPUhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUFUzMlwiXT1IRUFQVTMyPW5ldyBVaW50MzJBcnJheShidWYpO01vZHVsZVtcIkhFQVBGMzJcIl09SEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUEY2NFwiXT1IRUFQRjY0PW5ldyBGbG9hdDY0QXJyYXkoYnVmKX12YXIgSU5JVElBTF9NRU1PUlk9TW9kdWxlW1wiSU5JVElBTF9NRU1PUllcIl18fDE2Nzc3MjE2O3ZhciB3YXNtVGFibGU7dmFyIF9fQVRQUkVSVU5fXz1bXTt2YXIgX19BVElOSVRfXz1bXTt2YXIgX19BVE1BSU5fXz1bXTt2YXIgX19BVFBPU1RSVU5fXz1bXTt2YXIgcnVudGltZUluaXRpYWxpemVkPWZhbHNlO19fQVRJTklUX18ucHVzaCh7ZnVuYzpmdW5jdGlvbigpe19fX3dhc21fY2FsbF9jdG9ycygpfX0pO2Z1bmN0aW9uIHByZVJ1bigpe2lmKE1vZHVsZVtcInByZVJ1blwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInByZVJ1blwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInByZVJ1blwiXT1bTW9kdWxlW1wicHJlUnVuXCJdXTt3aGlsZShNb2R1bGVbXCJwcmVSdW5cIl0ubGVuZ3RoKXthZGRPblByZVJ1bihNb2R1bGVbXCJwcmVSdW5cIl0uc2hpZnQoKSl9fWNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQUkVSVU5fXyl9ZnVuY3Rpb24gaW5pdFJ1bnRpbWUoKXtydW50aW1lSW5pdGlhbGl6ZWQ9dHJ1ZTtjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKX1mdW5jdGlvbiBwcmVNYWluKCl7Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVE1BSU5fXyl9ZnVuY3Rpb24gcG9zdFJ1bigpe2lmKE1vZHVsZVtcInBvc3RSdW5cIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwb3N0UnVuXCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicG9zdFJ1blwiXT1bTW9kdWxlW1wicG9zdFJ1blwiXV07d2hpbGUoTW9kdWxlW1wicG9zdFJ1blwiXS5sZW5ndGgpe2FkZE9uUG9zdFJ1bihNb2R1bGVbXCJwb3N0UnVuXCJdLnNoaWZ0KCkpfX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUE9TVFJVTl9fKX1mdW5jdGlvbiBhZGRPblByZVJ1bihjYil7X19BVFBSRVJVTl9fLnVuc2hpZnQoY2IpfWZ1bmN0aW9uIGFkZE9uUG9zdFJ1bihjYil7X19BVFBPU1RSVU5fXy51bnNoaWZ0KGNiKX12YXIgcnVuRGVwZW5kZW5jaWVzPTA7dmFyIHJ1bkRlcGVuZGVuY3lXYXRjaGVyPW51bGw7dmFyIGRlcGVuZGVuY2llc0Z1bGZpbGxlZD1udWxsO2Z1bmN0aW9uIGFkZFJ1bkRlcGVuZGVuY3koaWQpe3J1bkRlcGVuZGVuY2llcysrO2lmKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pe01vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0ocnVuRGVwZW5kZW5jaWVzKX19ZnVuY3Rpb24gcmVtb3ZlUnVuRGVwZW5kZW5jeShpZCl7cnVuRGVwZW5kZW5jaWVzLS07aWYoTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXSl7TW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXShydW5EZXBlbmRlbmNpZXMpfWlmKHJ1bkRlcGVuZGVuY2llcz09MCl7aWYocnVuRGVwZW5kZW5jeVdhdGNoZXIhPT1udWxsKXtjbGVhckludGVydmFsKHJ1bkRlcGVuZGVuY3lXYXRjaGVyKTtydW5EZXBlbmRlbmN5V2F0Y2hlcj1udWxsfWlmKGRlcGVuZGVuY2llc0Z1bGZpbGxlZCl7dmFyIGNhbGxiYWNrPWRlcGVuZGVuY2llc0Z1bGZpbGxlZDtkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtjYWxsYmFjaygpfX19TW9kdWxlW1wicHJlbG9hZGVkSW1hZ2VzXCJdPXt9O01vZHVsZVtcInByZWxvYWRlZEF1ZGlvc1wiXT17fTtmdW5jdGlvbiBhYm9ydCh3aGF0KXtpZihNb2R1bGVbXCJvbkFib3J0XCJdKXtNb2R1bGVbXCJvbkFib3J0XCJdKHdoYXQpfXdoYXQrPVwiXCI7ZXJyKHdoYXQpO0FCT1JUPXRydWU7RVhJVFNUQVRVUz0xO3doYXQ9XCJhYm9ydChcIit3aGF0K1wiKS4gQnVpbGQgd2l0aCAtcyBBU1NFUlRJT05TPTEgZm9yIG1vcmUgaW5mby5cIjt2YXIgZT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKHdoYXQpO3JlYWR5UHJvbWlzZVJlamVjdChlKTt0aHJvdyBlfWZ1bmN0aW9uIGhhc1ByZWZpeChzdHIscHJlZml4KXtyZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoP3N0ci5zdGFydHNXaXRoKHByZWZpeCk6c3RyLmluZGV4T2YocHJlZml4KT09PTB9dmFyIGRhdGFVUklQcmVmaXg9XCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCI7ZnVuY3Rpb24gaXNEYXRhVVJJKGZpbGVuYW1lKXtyZXR1cm4gaGFzUHJlZml4KGZpbGVuYW1lLGRhdGFVUklQcmVmaXgpfXZhciBmaWxlVVJJUHJlZml4PVwiZmlsZTovL1wiO2Z1bmN0aW9uIGlzRmlsZVVSSShmaWxlbmFtZSl7cmV0dXJuIGhhc1ByZWZpeChmaWxlbmFtZSxmaWxlVVJJUHJlZml4KX12YXIgd2FzbUJpbmFyeUZpbGU9XCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsQUdGemJRRUFBQUFCbXdRNllBRi9BR0FCZndGL1lBTi9mMzhBWUFKL2Z3QmdCSDkvZjM4QVlBQUFZQVYvZjM5L2Z3QmdBbjkvQVg5Z0EzOS9md0YvWUFaL2YzOS9mMzhBWUFSL2YzOS9BWDlnRDM5L2YzeC9mMzkvZjM5OGYzOS9md0JnQUFGL1lBZC9mMzkvZjM5L0FHQUVmMzkvZmdCZ0JIOS9mM3dBWUJGL2YzOThmMzkvZjM5L2YzOThmMzkvZndCZ0EzOS9mZ0JnQW45K0FHQUNmSHdCZjJBQUFYeGdDWDkvZjM5L2YzOS9md0JnREg5L2YzOS9mMzkvZjM5L2Z3QmdCWDkvZkg5L0FHQUVmMzUrZndCZ0NYOS9mMzkvZjM5L2Z3Ri9ZQXQvZjM5L2YzOS9mMzkvZndGL1lBZC9mMzk4Zkh4OEFYOWdCbjk4ZjM5L2Z3Ri9ZQUorZndGL1lBTjhmSHdCZkdBSWYzOS9mMzkvZjM4QVlBMS9mMzkvZjM5L2YzOS9mMzkvQUdBSWYzOS9mMzkvZkh3QVlBaC9mMzkvZjN4L2Z3QmdCbjkvZjM5OGZBQmdCbjkvZjN4L2Z3QmdEWDkvZkg5L2YzOThmMzkvZjM4QVlBVi9mM3gvZmdCZ0JIOThmMzRBWUFSL2ZIeCtBR0FGZkh4L2YzOEFZQVovZjM5L2YzOEJmMkFJZjM5L2YzOThmMzhCZjJBSGYzOS9mM3gvZndGL1lBaC9mMzkvZkh4OGZBRi9ZQkIvZjM5OGYzOS9mMzkvZjM5OGYzOS9BWDlnRFg5L2YzeC9mMzkvZjM5OGYzOEJmMkFNZjM5OGYzOS9mM3gvZjM5L0FYOWdDbjkvZkg5L2YzeC9mMzhCZjJBRGZuOS9BWDlnQW54L0FYOWdBMzkrZndGK1lBSi9md0Y4WUFOL2YzOEJmR0FGZjM5L2YzOEJmR0FDZm40QmZHQUNmSDhCZkFMSEFTRUJZUUZoQUF3QllRRmlBQUFCWVFGakFBTUJZUUZrQUFRQllRRmxBQWdCWVFGbUFBSUJZUUZuQUFFQllRRm9BQUFCWVFGcEFBTUJZUUZxQUFJQllRRnJBQjhCWVFGc0FBWUJZUUZ0QUFVQllRRnVBQUFCWVFGdkFBQUJZUUZ3QURZQllRRnhBQW9CWVFGeUFBSUJZUUZ6QUFZQllRRjBBQUlCWVFGMUFBTUJZUUYyQUFBQllRRjNBQ1FCWVFGNEFBUUJZUUY1QUFnQllRRjZBQUVCWVFGQkFBTUJZUUZDQUFZQllRRkRBQU1CWVFGRUFBb0JZUUZGQUFrQllRRkdBQWtCWVFGSEFDQURqUUtMQWdnQ0FBUUNBQVFJQVFJQ054QUNBUVlsQUFnUENnUVdGZzhBQnhBR0lRQVBBQUlTQVFFQUNCMEJBd01xS1FBR0NBRUJBUWNFQWdFSkJBQUNBUW9CQWdZRkFBSURBQUFDQXdjRUFnSUJPUWNCQUFBQUFBQUFCUlVYQUFFQkRSVTFIZ29hR2k0c01Sa1pMeU1EQXdNQ0FBRVVGQlFFQkFJRU14TVRFd0lFRWd3REFBY0FBQUFFQVFNQkFRY0VBd0VCQndZQUF3RUVBQXdDQVFJSEJ3a0pDUVlHQmdjSUJ3UUVCQWdJQkFBQUFBRUREUUlHQVFNNEdCZ0RIQjB5QXdjQkJ3RUhCd0VGQlFFRkJRVUZMUVVGQlFVRkJRVUZCUVViQVFJSkJBNERFUVVSQndjb0FoRW5EZ0FYSmc0QkFBQURBUUFCQWdBQ0FBa0NBd0FHQWdNTklnQUxDd3NMQXhBZUt6QUNCUVFFQVhBQWR3VUdBUUdBQW9BQ0Jna0Jmd0ZCNE5EQUFnc0hNZ3NCU0FJQUFVa0FZUUZLQVFBQlN3QXBBVXdBSmdGTkFQZ0JBVTRBZHdGUEFMY0JBVkFBdGdFQlVRRFZBUUZTQUxVQkNjTUJBUUJCQVF0MjN3R3lBYWNCbndHY0FaUUJqZ0dMQWFvQ3BRS2RBcGtDandLSUF2MEI5d0hzQWVjQjNnSFRBY3NCWEVrL3RBR3pBVTQvc1FHd0FhOEJTVCt1QWEwQlRqK3NBYXNCcWdHb0FhWUJRVlNRQVVKV1JHVmxVV0ppT2thZ0FhSUJsUUtrQWFVQm5nRlRSaUpRZVlrQ0tsV1lBWmtCbXdHRUFwb0JnZ0wvQVVsVEkvc0JrZ0tSQW55T0FudDZldVFCMmdIWkFUL1VBVWsvendITkFWUE1BVWsvVGs3S0FUL0pBYjBCd0FISUFUKytBY0VCeHdFL3Z3SENBY1lCUDhRQkN1bUhCNHNDUVFFQ2Z3SkFJQUpGRFFBRFFDQUJJQU5CQTNScUtBSUFJZ1JGRFFFZ0FDQUVSZ1JBSUFFZ0EwRURkR29vQWdRUEN5QURRUUZxSWdNZ0FrY05BQXNMUVFBTEVRQWdBRVVFUUNBQ1FRTWdBUkJDQUFzTE9nQWdBRUVBTmdJQUlBQW9BaFFFUUNBQUtBSVVJQUFvQWhBUkFBQUxJQUJCQURZQ0ZDQUFRUUE2QUFnZ0FFSUFOd0lZSUFCQkt6WUNFQXVEQVFFQmZ3SkFJQUpGRFFBZ0FDa0RHQ0FBS1FNUUlBQXBBd2dnQUNrREFJU0VoRkJGRFFBZ0FFRUFOZ0ljSUFCQkFEWUNBQ0FBUVF4cUlBRkJBV3NpQkVFRFRRUi9JQVJCQW5SQjRCcHFLQUlBQlVFQUMwRUFiQ0FDSUFNUW5RRWdBQ0FCTmdJRUlBQkJBRFlDQUNBQVFRQTZBQWdnQUNBQUtBSVVOZ0ljRHdzUURBQUxGUUFnQVNBQUtBSUFTZ1JBSUFBZ0FTQUNFQ29MQzRJTkFRZC9Ba0FnQUVVTkFDQUFRUWhySWdNZ0FFRUVheWdDQUNJQlFYaHhJZ0JxSVFVQ1FDQUJRUUZ4RFFBZ0FVRURjVVVOQVNBRElBTW9BZ0FpQW1zaUEwSDR6QUFvQWdBaUJFa05BU0FBSUFKcUlRQWdBMEg4ekFBb0FnQkhCRUFnQWtIL0FVMEVRQ0FES0FJSUlnUWdBa0VEZGlJQ1FRTjBRWkROQUdwSEdpQUVJQU1vQWd3aUFVWUVRRUhvekFCQjZNd0FLQUlBUVg0Z0FuZHhOZ0lBREFNTElBUWdBVFlDRENBQklBUTJBZ2dNQWdzZ0F5Z0NHQ0VHQWtBZ0F5QURLQUlNSWdGSEJFQWdBeWdDQ0NJQ0lBUlBCRUFnQWlnQ0RCb0xJQUlnQVRZQ0RDQUJJQUkyQWdnTUFRc0NRQ0FEUVJScUlnSW9BZ0FpQkEwQUlBTkJFR29pQWlnQ0FDSUVEUUJCQUNFQkRBRUxBMEFnQWlFSElBUWlBVUVVYWlJQ0tBSUFJZ1FOQUNBQlFSQnFJUUlnQVNnQ0VDSUVEUUFMSUFkQkFEWUNBQXNnQmtVTkFRSkFJQU1nQXlnQ0hDSUNRUUowUVpqUEFHb2lCQ2dDQUVZRVFDQUVJQUUyQWdBZ0FRMEJRZXpNQUVIc3pBQW9BZ0JCZmlBQ2QzRTJBZ0FNQXdzZ0JrRVFRUlFnQmlnQ0VDQURSaHRxSUFFMkFnQWdBVVVOQWdzZ0FTQUdOZ0lZSUFNb0FoQWlBZ1JBSUFFZ0FqWUNFQ0FDSUFFMkFoZ0xJQU1vQWhRaUFrVU5BU0FCSUFJMkFoUWdBaUFCTmdJWURBRUxJQVVvQWdRaUFVRURjVUVEUncwQVFmRE1BQ0FBTmdJQUlBVWdBVUYrY1RZQ0JDQURJQUJCQVhJMkFnUWdBQ0FEYWlBQU5nSUFEd3NnQXlBRlR3MEFJQVVvQWdRaUFVRUJjVVVOQUFKQUlBRkJBbkZGQkVBZ0JVR0F6UUFvQWdCR0JFQkJnTTBBSUFNMkFnQkI5TXdBUWZUTUFDZ0NBQ0FBYWlJQU5nSUFJQU1nQUVFQmNqWUNCQ0FEUWZ6TUFDZ0NBRWNOQTBId3pBQkJBRFlDQUVIOHpBQkJBRFlDQUE4TElBVkIvTXdBS0FJQVJnUkFRZnpNQUNBRE5nSUFRZkRNQUVId3pBQW9BZ0FnQUdvaUFEWUNBQ0FESUFCQkFYSTJBZ1FnQUNBRGFpQUFOZ0lBRHdzZ0FVRjRjU0FBYWlFQUFrQWdBVUgvQVUwRVFDQUZLQUlNSVFJZ0JTZ0NDQ0lFSUFGQkEzWWlBVUVEZEVHUXpRQnFJZ2RIQkVCQitNd0FLQUlBR2dzZ0FpQUVSZ1JBUWVqTUFFSG96QUFvQWdCQmZpQUJkM0UyQWdBTUFnc2dBaUFIUndSQVFmak1BQ2dDQUJvTElBUWdBallDRENBQ0lBUTJBZ2dNQVFzZ0JTZ0NHQ0VHQWtBZ0JTQUZLQUlNSWdGSEJFQWdCU2dDQ0NJQ1Fmak1BQ2dDQUU4RVFDQUNLQUlNR2dzZ0FpQUJOZ0lNSUFFZ0FqWUNDQXdCQ3dKQUlBVkJGR29pQWlnQ0FDSUVEUUFnQlVFUWFpSUNLQUlBSWdRTkFFRUFJUUVNQVFzRFFDQUNJUWNnQkNJQlFSUnFJZ0lvQWdBaUJBMEFJQUZCRUdvaEFpQUJLQUlRSWdRTkFBc2dCMEVBTmdJQUN5QUdSUTBBQWtBZ0JTQUZLQUljSWdKQkFuUkJtTThBYWlJRUtBSUFSZ1JBSUFRZ0FUWUNBQ0FCRFFGQjdNd0FRZXpNQUNnQ0FFRitJQUozY1RZQ0FBd0NDeUFHUVJCQkZDQUdLQUlRSUFWR0cyb2dBVFlDQUNBQlJRMEJDeUFCSUFZMkFoZ2dCU2dDRUNJQ0JFQWdBU0FDTmdJUUlBSWdBVFlDR0FzZ0JTZ0NGQ0lDUlEwQUlBRWdBallDRkNBQ0lBRTJBaGdMSUFNZ0FFRUJjallDQkNBQUlBTnFJQUEyQWdBZ0EwSDh6QUFvQWdCSERRRkI4TXdBSUFBMkFnQVBDeUFGSUFGQmZuRTJBZ1FnQXlBQVFRRnlOZ0lFSUFBZ0Eyb2dBRFlDQUFzZ0FFSC9BVTBFUUNBQVFRTjJJZ0ZCQTNSQmtNMEFhaUVBQW45QjZNd0FLQUlBSWdKQkFTQUJkQ0lCY1VVRVFFSG96QUFnQVNBQ2NqWUNBQ0FBREFFTElBQW9BZ2dMSVFJZ0FDQUROZ0lJSUFJZ0F6WUNEQ0FESUFBMkFnd2dBeUFDTmdJSUR3dEJIeUVDSUFOQ0FEY0NFQ0FBUWYvLy93ZE5CRUFnQUVFSWRpSUJJQUZCZ1A0L2FrRVFka0VJY1NJQmRDSUNJQUpCZ09BZmFrRVFka0VFY1NJQ2RDSUVJQVJCZ0lBUGFrRVFka0VDY1NJRWRFRVBkaUFCSUFKeUlBUnlheUlCUVFGMElBQWdBVUVWYW5aQkFYRnlRUnhxSVFJTElBTWdBallDSENBQ1FRSjBRWmpQQUdvaEFRSkFBa0FDUUVIc3pBQW9BZ0FpQkVFQklBSjBJZ2R4UlFSQVFlek1BQ0FFSUFkeU5nSUFJQUVnQXpZQ0FDQURJQUUyQWhnTUFRc2dBRUVBUVJrZ0FrRUJkbXNnQWtFZlJodDBJUUlnQVNnQ0FDRUJBMEFnQVNJRUtBSUVRWGh4SUFCR0RRSWdBa0VkZGlFQklBSkJBWFFoQWlBRUlBRkJCSEZxSWdkQkVHb29BZ0FpQVEwQUN5QUhJQU0yQWhBZ0F5QUVOZ0lZQ3lBRElBTTJBZ3dnQXlBRE5nSUlEQUVMSUFRb0FnZ2lBQ0FETmdJTUlBUWdBellDQ0NBRFFRQTJBaGdnQXlBRU5nSU1JQU1nQURZQ0NBdEJpTTBBUVlqTkFDZ0NBRUVCYXlJQVFYOGdBQnMyQWdBTEM1UUJBUUYvQWtBZ0FVRUJSd1JBSUFOQkFVZ05BUU5BSUFBZ0Fpc0RBRGtEQUNBQ1FRaHFJUUlnQUNBQlFRTjBhaUVBSUFSQkFXb2lCQ0FEUncwQUN3d0JDeUFEUVFKdElRRWdBMEVDVGdSQUEwQWdBQ0FDS3dNQU9RTUFJQUFnQWlzRENEa0RDQ0FDUVJCcUlRSWdBRUVRYWlFQUlBUkJBV29pQkNBQlJ3MEFDd3NnQTBFQmNVVU5BQ0FBSUFJckF3QTVBd0FMQzJVQUlBSkZCRUFnQUNnQ0JDQUJLQUlFUmc4TElBQWdBVVlFUUVFQkR3c0NmeU1BUVJCcklnSWdBRFlDQ0NBQ0lBSW9BZ2dvQWdRMkFnd2dBaWdDREFzQ2Z5TUFRUkJySWdBZ0FUWUNDQ0FBSUFBb0FnZ29BZ1EyQWd3Z0FDZ0NEQXNRNGdGRkM5QXVBUXgvSXdCQkVHc2lEQ1FBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUJCOUFGTkJFQkI2TXdBS0FJQUlnVkJFQ0FBUVF0cVFYaHhJQUJCQzBrYklnaEJBM1lpQW5ZaUFVRURjUVJBSUFGQmYzTkJBWEVnQW1vaUEwRURkQ0lCUVpqTkFHb29BZ0FpQkVFSWFpRUFBa0FnQkNnQ0NDSUNJQUZCa00wQWFpSUJSZ1JBUWVqTUFDQUZRWDRnQTNkeE5nSUFEQUVMUWZqTUFDZ0NBQm9nQWlBQk5nSU1JQUVnQWpZQ0NBc2dCQ0FEUVFOMElnRkJBM0kyQWdRZ0FTQUVhaUlCSUFFb0FnUkJBWEkyQWdRTURRc2dDRUh3ekFBb0FnQWlDazBOQVNBQkJFQUNRRUVDSUFKMElnQkJBQ0FBYTNJZ0FTQUNkSEVpQUVFQUlBQnJjVUVCYXlJQUlBQkJESFpCRUhFaUFuWWlBVUVGZGtFSWNTSUFJQUp5SUFFZ0FIWWlBVUVDZGtFRWNTSUFjaUFCSUFCMklnRkJBWFpCQW5FaUFISWdBU0FBZGlJQlFRRjJRUUZ4SWdCeUlBRWdBSFpxSWdOQkEzUWlBRUdZelFCcUtBSUFJZ1FvQWdnaUFTQUFRWkROQUdvaUFFWUVRRUhvekFBZ0JVRitJQU4zY1NJRk5nSUFEQUVMUWZqTUFDZ0NBQm9nQVNBQU5nSU1JQUFnQVRZQ0NBc2dCRUVJYWlFQUlBUWdDRUVEY2pZQ0JDQUVJQWhxSWdJZ0EwRURkQ0lCSUFocklnTkJBWEkyQWdRZ0FTQUVhaUFETmdJQUlBb0VRQ0FLUVFOMklnRkJBM1JCa00wQWFpRUhRZnpNQUNnQ0FDRUVBbjhnQlVFQklBRjBJZ0Z4UlFSQVFlak1BQ0FCSUFWeU5nSUFJQWNNQVFzZ0J5Z0NDQXNoQVNBSElBUTJBZ2dnQVNBRU5nSU1JQVFnQnpZQ0RDQUVJQUUyQWdnTFFmek1BQ0FDTmdJQVFmRE1BQ0FETmdJQURBMExRZXpNQUNnQ0FDSUdSUTBCSUFaQkFDQUdhM0ZCQVdzaUFDQUFRUXgyUVJCeElnSjJJZ0ZCQlhaQkNIRWlBQ0FDY2lBQklBQjJJZ0ZCQW5aQkJIRWlBSElnQVNBQWRpSUJRUUYyUVFKeElnQnlJQUVnQUhZaUFVRUJka0VCY1NJQWNpQUJJQUIyYWtFQ2RFR1l6d0JxS0FJQUlnRW9BZ1JCZUhFZ0NHc2hCQ0FCSVFJRFFBSkFJQUlvQWhBaUFFVUVRQ0FDS0FJVUlnQkZEUUVMSUFBb0FnUkJlSEVnQ0dzaUFpQUVJQUlnQkVraUFoc2hCQ0FBSUFFZ0Foc2hBU0FBSVFJTUFRc0xJQUVnQ0dvaUNTQUJUUTBDSUFFb0FoZ2hDeUFCSUFFb0Fnd2lBMGNFUUNBQktBSUlJZ0JCK013QUtBSUFUd1JBSUFBb0Fnd2FDeUFBSUFNMkFnd2dBeUFBTmdJSURBd0xJQUZCRkdvaUFpZ0NBQ0lBUlFSQUlBRW9BaEFpQUVVTkJDQUJRUkJxSVFJTEEwQWdBaUVISUFBaUEwRVVhaUlDS0FJQUlnQU5BQ0FEUVJCcUlRSWdBeWdDRUNJQURRQUxJQWRCQURZQ0FBd0xDMEYvSVFnZ0FFRy9mMHNOQUNBQVFRdHFJZ0JCZUhFaENFSHN6QUFvQWdBaUNVVU5BRUVmSVFWQkFDQUlheUVFQWtBQ1FBSkFBbjhnQ0VILy8vOEhUUVJBSUFCQkNIWWlBQ0FBUVlEK1AycEJFSFpCQ0hFaUFuUWlBQ0FBUVlEZ0gycEJFSFpCQkhFaUFYUWlBQ0FBUVlDQUQycEJFSFpCQW5FaUFIUkJEM1lnQVNBQ2NpQUFjbXNpQUVFQmRDQUlJQUJCRldwMlFRRnhja0VjYWlFRkN5QUZRUUowUVpqUEFHb29BZ0FpQWtVTEJFQkJBQ0VBREFFTFFRQWhBQ0FJUVFCQkdTQUZRUUYyYXlBRlFSOUdHM1FoQVFOQUFrQWdBaWdDQkVGNGNTQUlheUlISUFSUERRQWdBaUVESUFjaUJBMEFRUUFoQkNBQ0lRQU1Bd3NnQUNBQ0tBSVVJZ2NnQnlBQ0lBRkJIWFpCQkhGcUtBSVFJZ0pHR3lBQUlBY2JJUUFnQVVFQmRDRUJJQUlOQUFzTElBQWdBM0pGQkVCQkFpQUZkQ0lBUVFBZ0FHdHlJQWx4SWdCRkRRTWdBRUVBSUFCcmNVRUJheUlBSUFCQkRIWkJFSEVpQW5ZaUFVRUZka0VJY1NJQUlBSnlJQUVnQUhZaUFVRUNka0VFY1NJQWNpQUJJQUIySWdGQkFYWkJBbkVpQUhJZ0FTQUFkaUlCUVFGMlFRRnhJZ0J5SUFFZ0FIWnFRUUowUVpqUEFHb29BZ0FoQUFzZ0FFVU5BUXNEUUNBQUtBSUVRWGh4SUFocklnRWdCRWtoQWlBQklBUWdBaHNoQkNBQUlBTWdBaHNoQXlBQUtBSVFJZ0VFZnlBQkJTQUFLQUlVQ3lJQURRQUxDeUFEUlEwQUlBUkI4TXdBS0FJQUlBaHJUdzBBSUFNZ0NHb2lCaUFEVFEwQklBTW9BaGdoQlNBRElBTW9BZ3dpQVVjRVFDQURLQUlJSWdCQitNd0FLQUlBVHdSQUlBQW9BZ3dhQ3lBQUlBRTJBZ3dnQVNBQU5nSUlEQW9MSUFOQkZHb2lBaWdDQUNJQVJRUkFJQU1vQWhBaUFFVU5CQ0FEUVJCcUlRSUxBMEFnQWlFSElBQWlBVUVVYWlJQ0tBSUFJZ0FOQUNBQlFSQnFJUUlnQVNnQ0VDSUFEUUFMSUFkQkFEWUNBQXdKQ3lBSVFmRE1BQ2dDQUNJQ1RRUkFRZnpNQUNnQ0FDRURBa0FnQWlBSWF5SUJRUkJQQkVCQjhNd0FJQUUyQWdCQi9Nd0FJQU1nQ0dvaUFEWUNBQ0FBSUFGQkFYSTJBZ1FnQWlBRGFpQUJOZ0lBSUFNZ0NFRURjallDQkF3QkMwSDh6QUJCQURZQ0FFSHd6QUJCQURZQ0FDQURJQUpCQTNJMkFnUWdBaUFEYWlJQUlBQW9BZ1JCQVhJMkFnUUxJQU5CQ0dvaEFBd0xDeUFJUWZUTUFDZ0NBQ0lHU1FSQVFmVE1BQ0FHSUFocklnRTJBZ0JCZ00wQVFZRE5BQ2dDQUNJQ0lBaHFJZ0EyQWdBZ0FDQUJRUUZ5TmdJRUlBSWdDRUVEY2pZQ0JDQUNRUWhxSVFBTUN3dEJBQ0VBSUFoQkwyb2lDUUovUWNEUUFDZ0NBQVJBUWNqUUFDZ0NBQXdCQzBITTBBQkNmemNDQUVIRTBBQkNnS0NBZ0lDQUJEY0NBRUhBMEFBZ0RFRU1ha0Z3Y1VIWXF0V3FCWE0yQWdCQjFOQUFRUUEyQWdCQnBOQUFRUUEyQWdCQmdDQUxJZ0ZxSWdWQkFDQUJheUlIY1NJQ0lBaE5EUXBCb05BQUtBSUFJZ1FFUUVHWTBBQW9BZ0FpQXlBQ2FpSUJJQU5ORFFzZ0FTQUVTdzBMQzBHazBBQXRBQUJCQkhFTkJRSkFBa0JCZ00wQUtBSUFJZ01FUUVHbzBBQWhBQU5BSUFNZ0FDZ0NBQ0lCVHdSQUlBRWdBQ2dDQkdvZ0Ewc05Bd3NnQUNnQ0NDSUFEUUFMQzBFQUVFVWlBVUYvUmcwR0lBSWhCVUhFMEFBb0FnQWlBMEVCYXlJQUlBRnhCRUFnQWlBQmF5QUFJQUZxUVFBZ0EydHhhaUVGQ3lBRklBaE5EUVlnQlVIKy8vLy9CMHNOQmtHZzBBQW9BZ0FpQkFSQVFaalFBQ2dDQUNJRElBVnFJZ0FnQTAwTkJ5QUFJQVJMRFFjTElBVVFSU0lBSUFGSERRRU1DQXNnQlNBR2F5QUhjU0lGUWY3Ly8vOEhTdzBGSUFVUVJTSUJJQUFvQWdBZ0FDZ0NCR3BHRFFRZ0FTRUFDd0pBSUFoQk1Hb2dCVTBOQUNBQVFYOUdEUUJCeU5BQUtBSUFJZ0VnQ1NBRmEycEJBQ0FCYTNFaUFVSCsvLy8vQjBzRVFDQUFJUUVNQ0FzZ0FSQkZRWDlIQkVBZ0FTQUZhaUVGSUFBaEFRd0lDMEVBSUFWckVFVWFEQVVMSUFBaUFVRi9SdzBHREFRTEFBdEJBQ0VEREFjTFFRQWhBUXdGQ3lBQlFYOUhEUUlMUWFUUUFFR2swQUFvQWdCQkJISTJBZ0FMSUFKQi92Ly8vd2RMRFFFZ0FoQkZJZ0ZCQUJCRklnQlBEUUVnQVVGL1JnMEJJQUJCZjBZTkFTQUFJQUZySWdVZ0NFRW9hazBOQVF0Qm1OQUFRWmpRQUNnQ0FDQUZhaUlBTmdJQVFaelFBQ2dDQUNBQVNRUkFRWnpRQUNBQU5nSUFDd0pBQWtBQ1FFR0F6UUFvQWdBaUJ3UkFRYWpRQUNFQUEwQWdBU0FBS0FJQUlnTWdBQ2dDQkNJQ2FrWU5BaUFBS0FJSUlnQU5BQXNNQWd0QitNd0FLQUlBSWdCQkFDQUFJQUZORzBVRVFFSDR6QUFnQVRZQ0FBdEJBQ0VBUWF6UUFDQUZOZ0lBUWFqUUFDQUJOZ0lBUVlqTkFFRi9OZ0lBUVl6TkFFSEEwQUFvQWdBMkFnQkJ0TkFBUVFBMkFnQURRQ0FBUVFOMElnTkJtTTBBYWlBRFFaRE5BR29pQWpZQ0FDQURRWnpOQUdvZ0FqWUNBQ0FBUVFGcUlnQkJJRWNOQUF0QjlNd0FJQVZCS0dzaUEwRjRJQUZyUVFkeFFRQWdBVUVJYWtFSGNSc2lBR3NpQWpZQ0FFR0F6UUFnQUNBQmFpSUFOZ0lBSUFBZ0FrRUJjallDQkNBQklBTnFRU2cyQWdSQmhNMEFRZERRQUNnQ0FEWUNBQXdDQ3lBQklBZE5EUUFnQXlBSFN3MEFJQUFvQWd4QkNIRU5BQ0FBSUFJZ0JXbzJBZ1JCZ00wQUlBZEJlQ0FIYTBFSGNVRUFJQWRCQ0dwQkIzRWJJZ0JxSWdJMkFnQkI5TXdBUWZUTUFDZ0NBQ0FGYWlJQklBQnJJZ0EyQWdBZ0FpQUFRUUZ5TmdJRUlBRWdCMnBCS0RZQ0JFR0V6UUJCME5BQUtBSUFOZ0lBREFFTFFmak1BQ2dDQUNJRElBRkxCRUJCK013QUlBRTJBZ0FnQVNFREN5QUJJQVZxSVFKQnFOQUFJUUFDUUFKQUFrQUNRQUpBQWtBRFFDQUNJQUFvQWdCSEJFQWdBQ2dDQ0NJQURRRU1BZ3NMSUFBdEFBeEJDSEZGRFFFTFFhalFBQ0VBQTBBZ0J5QUFLQUlBSWdKUEJFQWdBaUFBS0FJRWFpSUVJQWRMRFFNTElBQW9BZ2doQUF3QUN3QUxJQUFnQVRZQ0FDQUFJQUFvQWdRZ0JXbzJBZ1FnQVVGNElBRnJRUWR4UVFBZ0FVRUlha0VIY1J0cUlna2dDRUVEY2pZQ0JDQUNRWGdnQW10QkIzRkJBQ0FDUVFocVFRZHhHMm9pQlNBSmF5QUlheUVDSUFnZ0NXb2hCaUFGSUFkR0JFQkJnTTBBSUFZMkFnQkI5TXdBUWZUTUFDZ0NBQ0FDYWlJQU5nSUFJQVlnQUVFQmNqWUNCQXdEQ3lBRlFmek1BQ2dDQUVZRVFFSDh6QUFnQmpZQ0FFSHd6QUJCOE13QUtBSUFJQUpxSWdBMkFnQWdCaUFBUVFGeU5nSUVJQUFnQm1vZ0FEWUNBQXdEQ3lBRktBSUVJZ0JCQTNGQkFVWUVRQ0FBUVhoeElRY0NRQ0FBUWY4QlRRUkFJQVVvQWdnaUF5QUFRUU4ySWdCQkEzUkJrTTBBYWtjYUlBTWdCU2dDRENJQlJnUkFRZWpNQUVIb3pBQW9BZ0JCZmlBQWQzRTJBZ0FNQWdzZ0F5QUJOZ0lNSUFFZ0F6WUNDQXdCQ3lBRktBSVlJUWdDUUNBRklBVW9BZ3dpQVVjRVFDQUZLQUlJSWdBZ0EwOEVRQ0FBS0FJTUdnc2dBQ0FCTmdJTUlBRWdBRFlDQ0F3QkN3SkFJQVZCRkdvaUFDZ0NBQ0lFRFFBZ0JVRVFhaUlBS0FJQUlnUU5BRUVBSVFFTUFRc0RRQ0FBSVFNZ0JDSUJRUlJxSWdBb0FnQWlCQTBBSUFGQkVHb2hBQ0FCS0FJUUlnUU5BQXNnQTBFQU5nSUFDeUFJUlEwQUFrQWdCU0FGS0FJY0lnTkJBblJCbU04QWFpSUFLQUlBUmdSQUlBQWdBVFlDQUNBQkRRRkI3TXdBUWV6TUFDZ0NBRUYrSUFOM2NUWUNBQXdDQ3lBSVFSQkJGQ0FJS0FJUUlBVkdHMm9nQVRZQ0FDQUJSUTBCQ3lBQklBZzJBaGdnQlNnQ0VDSUFCRUFnQVNBQU5nSVFJQUFnQVRZQ0dBc2dCU2dDRkNJQVJRMEFJQUVnQURZQ0ZDQUFJQUUyQWhnTElBVWdCMm9oQlNBQ0lBZHFJUUlMSUFVZ0JTZ0NCRUYrY1RZQ0JDQUdJQUpCQVhJMkFnUWdBaUFHYWlBQ05nSUFJQUpCL3dGTkJFQWdBa0VEZGlJQVFRTjBRWkROQUdvaEFnSi9RZWpNQUNnQ0FDSUJRUUVnQUhRaUFIRkZCRUJCNk13QUlBQWdBWEkyQWdBZ0Fnd0JDeUFDS0FJSUN5RUFJQUlnQmpZQ0NDQUFJQVkyQWd3Z0JpQUNOZ0lNSUFZZ0FEWUNDQXdEQzBFZklRQWdBa0gvLy84SFRRUkFJQUpCQ0hZaUFDQUFRWUQrUDJwQkVIWkJDSEVpQTNRaUFDQUFRWURnSDJwQkVIWkJCSEVpQVhRaUFDQUFRWUNBRDJwQkVIWkJBbkVpQUhSQkQzWWdBU0FEY2lBQWNtc2lBRUVCZENBQ0lBQkJGV3AyUVFGeGNrRWNhaUVBQ3lBR0lBQTJBaHdnQmtJQU53SVFJQUJCQW5SQm1NOEFhaUVFQWtCQjdNd0FLQUlBSWdOQkFTQUFkQ0lCY1VVRVFFSHN6QUFnQVNBRGNqWUNBQ0FFSUFZMkFnQWdCaUFFTmdJWURBRUxJQUpCQUVFWklBQkJBWFpySUFCQkgwWWJkQ0VBSUFRb0FnQWhBUU5BSUFFaUF5Z0NCRUY0Y1NBQ1JnMERJQUJCSFhZaEFTQUFRUUYwSVFBZ0F5QUJRUVJ4YWlJRUtBSVFJZ0VOQUFzZ0JDQUdOZ0lRSUFZZ0F6WUNHQXNnQmlBR05nSU1JQVlnQmpZQ0NBd0NDMEgwekFBZ0JVRW9heUlEUVhnZ0FXdEJCM0ZCQUNBQlFRaHFRUWR4R3lJQWF5SUNOZ0lBUVlETkFDQUFJQUZxSWdBMkFnQWdBQ0FDUVFGeU5nSUVJQUVnQTJwQktEWUNCRUdFelFCQjBOQUFLQUlBTmdJQUlBY2dCRUVuSUFSclFRZHhRUUFnQkVFbmEwRUhjUnRxUVM5cklnQWdBQ0FIUVJCcVNSc2lBa0ViTmdJRUlBSkJzTkFBS1FJQU53SVFJQUpCcU5BQUtRSUFOd0lJUWJEUUFDQUNRUWhxTmdJQVFhelFBQ0FGTmdJQVFhalFBQ0FCTmdJQVFiVFFBRUVBTmdJQUlBSkJHR29oQUFOQUlBQkJCellDQkNBQVFRaHFJUUVnQUVFRWFpRUFJQUVnQkVrTkFBc2dBaUFIUmcwRElBSWdBaWdDQkVGK2NUWUNCQ0FISUFJZ0Iyc2lCRUVCY2pZQ0JDQUNJQVEyQWdBZ0JFSC9BVTBFUUNBRVFRTjJJZ0JCQTNSQmtNMEFhaUVDQW45QjZNd0FLQUlBSWdGQkFTQUFkQ0lBY1VVRVFFSG96QUFnQUNBQmNqWUNBQ0FDREFFTElBSW9BZ2dMSVFBZ0FpQUhOZ0lJSUFBZ0J6WUNEQ0FISUFJMkFnd2dCeUFBTmdJSURBUUxRUjhoQUNBSFFnQTNBaEFnQkVILy8vOEhUUVJBSUFSQkNIWWlBQ0FBUVlEK1AycEJFSFpCQ0hFaUFuUWlBQ0FBUVlEZ0gycEJFSFpCQkhFaUFYUWlBQ0FBUVlDQUQycEJFSFpCQW5FaUFIUkJEM1lnQVNBQ2NpQUFjbXNpQUVFQmRDQUVJQUJCRldwMlFRRnhja0VjYWlFQUN5QUhJQUEyQWh3Z0FFRUNkRUdZendCcUlRTUNRRUhzekFBb0FnQWlBa0VCSUFCMElnRnhSUVJBUWV6TUFDQUJJQUp5TmdJQUlBTWdCellDQUNBSElBTTJBaGdNQVFzZ0JFRUFRUmtnQUVFQmRtc2dBRUVmUmh0MElRQWdBeWdDQUNFQkEwQWdBU0lDS0FJRVFYaHhJQVJHRFFRZ0FFRWRkaUVCSUFCQkFYUWhBQ0FDSUFGQkJIRnFJZ01vQWhBaUFRMEFDeUFESUFjMkFoQWdCeUFDTmdJWUN5QUhJQWMyQWd3Z0J5QUhOZ0lJREFNTElBTW9BZ2dpQUNBR05nSU1JQU1nQmpZQ0NDQUdRUUEyQWhnZ0JpQUROZ0lNSUFZZ0FEWUNDQXNnQ1VFSWFpRUFEQVVMSUFJb0FnZ2lBQ0FITmdJTUlBSWdCellDQ0NBSFFRQTJBaGdnQnlBQ05nSU1JQWNnQURZQ0NBdEI5TXdBS0FJQUlnQWdDRTBOQUVIMHpBQWdBQ0FJYXlJQk5nSUFRWUROQUVHQXpRQW9BZ0FpQWlBSWFpSUFOZ0lBSUFBZ0FVRUJjallDQkNBQ0lBaEJBM0kyQWdRZ0FrRUlhaUVBREFNTFFZVE1BRUV3TmdJQVFRQWhBQXdDQ3dKQUlBVkZEUUFDUUNBREtBSWNJZ0pCQW5SQm1NOEFhaUlBS0FJQUlBTkdCRUFnQUNBQk5nSUFJQUVOQVVIc3pBQWdDVUYrSUFKM2NTSUpOZ0lBREFJTElBVkJFRUVVSUFVb0FoQWdBMFliYWlBQk5nSUFJQUZGRFFFTElBRWdCVFlDR0NBREtBSVFJZ0FFUUNBQklBQTJBaEFnQUNBQk5nSVlDeUFES0FJVUlnQkZEUUFnQVNBQU5nSVVJQUFnQVRZQ0dBc0NRQ0FFUVE5TkJFQWdBeUFFSUFocUlnQkJBM0kyQWdRZ0FDQURhaUlBSUFBb0FnUkJBWEkyQWdRTUFRc2dBeUFJUVFOeU5nSUVJQVlnQkVFQmNqWUNCQ0FFSUFacUlBUTJBZ0FnQkVIL0FVMEVRQ0FFUVFOMklnQkJBM1JCa00wQWFpRUNBbjlCNk13QUtBSUFJZ0ZCQVNBQWRDSUFjVVVFUUVIb3pBQWdBQ0FCY2pZQ0FDQUNEQUVMSUFJb0FnZ0xJUUFnQWlBR05nSUlJQUFnQmpZQ0RDQUdJQUkyQWd3Z0JpQUFOZ0lJREFFTFFSOGhBQ0FFUWYvLy93ZE5CRUFnQkVFSWRpSUFJQUJCZ1A0L2FrRVFka0VJY1NJQ2RDSUFJQUJCZ09BZmFrRVFka0VFY1NJQmRDSUFJQUJCZ0lBUGFrRVFka0VDY1NJQWRFRVBkaUFCSUFKeUlBQnlheUlBUVFGMElBUWdBRUVWYW5aQkFYRnlRUnhxSVFBTElBWWdBRFlDSENBR1FnQTNBaEFnQUVFQ2RFR1l6d0JxSVFJQ1FBSkFJQWxCQVNBQWRDSUJjVVVFUUVIc3pBQWdBU0FKY2pZQ0FDQUNJQVkyQWdBZ0JpQUNOZ0lZREFFTElBUkJBRUVaSUFCQkFYWnJJQUJCSDBZYmRDRUFJQUlvQWdBaENBTkFJQWdpQVNnQ0JFRjRjU0FFUmcwQ0lBQkJIWFloQWlBQVFRRjBJUUFnQVNBQ1FRUnhhaUlDS0FJUUlnZ05BQXNnQWlBR05nSVFJQVlnQVRZQ0dBc2dCaUFHTmdJTUlBWWdCallDQ0F3QkN5QUJLQUlJSWdBZ0JqWUNEQ0FCSUFZMkFnZ2dCa0VBTmdJWUlBWWdBVFlDRENBR0lBQTJBZ2dMSUFOQkNHb2hBQXdCQ3dKQUlBdEZEUUFDUUNBQktBSWNJZ0pCQW5SQm1NOEFhaUlBS0FJQUlBRkdCRUFnQUNBRE5nSUFJQU1OQVVIc3pBQWdCa0YrSUFKM2NUWUNBQXdDQ3lBTFFSQkJGQ0FMS0FJUUlBRkdHMm9nQXpZQ0FDQURSUTBCQ3lBRElBczJBaGdnQVNnQ0VDSUFCRUFnQXlBQU5nSVFJQUFnQXpZQ0dBc2dBU2dDRkNJQVJRMEFJQU1nQURZQ0ZDQUFJQU0yQWhnTEFrQWdCRUVQVFFSQUlBRWdCQ0FJYWlJQVFRTnlOZ0lFSUFBZ0FXb2lBQ0FBS0FJRVFRRnlOZ0lFREFFTElBRWdDRUVEY2pZQ0JDQUpJQVJCQVhJMkFnUWdCQ0FKYWlBRU5nSUFJQW9FUUNBS1FRTjJJZ0JCQTNSQmtNMEFhaUVEUWZ6TUFDZ0NBQ0VDQW45QkFTQUFkQ0lBSUFWeFJRUkFRZWpNQUNBQUlBVnlOZ0lBSUFNTUFRc2dBeWdDQ0FzaEFDQURJQUkyQWdnZ0FDQUNOZ0lNSUFJZ0F6WUNEQ0FDSUFBMkFnZ0xRZnpNQUNBSk5nSUFRZkRNQUNBRU5nSUFDeUFCUVFocUlRQUxJQXhCRUdva0FDQUFDM1lCQW44Q1FDQUNCRUFnQVVGL1RBMEJJQUVnQUNnQ0FFY0VRQ0FBUVFBMkFod2dBRUVBTmdJQUlBQkJER29nQUNnQ0JFRUJheUlFUVFOTkJIOGdCRUVDZEVIZ0dtb29BZ0FGUVFBTElBRnNJQUlRVmlBQUlBRTJBZ0FnQUNBQUtBSVVOZ0ljQ3c4TEVBd0FDeUFDUVFOQnR4WVFRZ0FMRndBZ0FDMEFBRUVnY1VVRVFDQUJJQUlnQUJDNEFRc0xud0lDQTM4QmZBSkFJQUZCQVVaQkFDQURRUUZHRzBVRVFDQUVRUUZJRFFFRFFDQUlJQUFyQXdBZ0Fpc0RBS0tnSVFnZ0FDQUJRUU4wYWlFQUlBSWdBMEVEZEdvaEFpQUZRUUZxSWdVZ0JFY05BQXNNQVFzZ0JDQUVRUVJ0SWdOQkFuUWlCMnNoQmdKQUlBUkJCRWdFUUNBQUlRUU1BUXNnQUNBRFFRVjBhaUVFUVFBaEFTQUNJUVVEUUNBSUlBQXJBd0FnQlNzREFLSWdBQ3NEQ0NBRkt3TUlvcUFnQUNzREVDQUZLd01Rb3FBZ0FDc0RHQ0FGS3dNWW9xQ2dJUWdnQlVFZ2FpRUZJQUJCSUdvaEFDQUJRUUZxSWdFZ0EwY05BQXNnQWlBSFFRTjBhaUVDQzBFQUlRQWdCa0VBVEEwQUEwQWdDQ0FFS3dNQUlBSXJBd0Npb0NFSUlBUkJDR29oQkNBQ1FRaHFJUUlnQUVFQmFpSUFJQVpIRFFBTEN5QUlDNThJQVFKL0l3QkJFR3NpRVNRQVFjQUFRU0FnQWlBQklBQWdBQ0FCU0JzaUVpQUNJQkpLRzBIQUFFb2JJaEpCQUVwQm9TRWdFQkFpQWtBZ0FrSEFBRW9OQUNBQVFjQUFTZzBBSUFGQndBQktEUUFMQWtBQ1FDQUNRU0JLRFFBZ0FFRWdTZzBBSUFGQklFb05BQ0FBSUFFZ0FpQURJQVFnQlNBR0lBY2dDQ0FKSUFvZ0N5QU1JQTBnRGlBUElCQVFwZ0lNQVFzQ1FDQUFJQUZJRFFBZ0FDQUNTQTBBSUFBZ0VpQVJRUXhxSUJGQkNHb2dFQkE5SUJFb0Fnd2hBQ0FSS0FJSUlSSWdCMFVFUUNBU0lBRWdBaUFESUFRZ0FDQUZhaUFHUVFBZ0NDQUpJQW9nQ3lBTUlBMGdBQ0FPYWlBUElCQVFMU0FSS0FJTUlBRWdBaUFESUFRZ0JTQUdRUUFnQ0NBSklBb2dDeUFNSUEwZ0RpQVBJQkFRTFF3Q0N5QVNJQUVnQWlBRElBUWdCU0FBSUFacUlBY2dDQ0FKSUFvZ0N5QU1JQTBnQUNBT2FpQVBJQkFRTFNBUktBSU1JQUVnQWlBRElBUWdCU0FHSUFjZ0NDQUpJQW9nQ3lBTUlBMGdEaUFQSUJBUUxRd0JDd0pBSUFBZ0FVb05BQ0FCSUFKSURRQWdBU0FTSUJGQkRHb2dFVUVJYWlBUUVEMGdFU2dDRENFQklCRW9BZ2doRWlBTFJRUkFJQUFnRWlBQ0lBTWdCQ0FGSUFZZ0J5QUlJQWtnQVNBS2FrRUFJQXdnRFNBT0lBRWdEMm9nRUJBdElBQWdFU2dDRENBQ0lBTWdCQ0FGSUFZZ0J5QUlJQWtnQ2tFQUlBd2dEU0FPSUE4Z0VCQXREQUlMSUFBZ0VpQUNJQU1nQkNBRklBWWdCeUFJSUFFZ0NXb2dDaUFMSUF3Z0RTQU9JQUVnRDJvZ0VCQXRJQUFnRVNnQ0RDQUNJQU1nQkNBRklBWWdCeUFJSUFrZ0NpQUxJQXdnRFNBT0lBOGdFQkF0REFFTElBSWdFaUFSUVF4cUlCRkJDR29nRUJBOUlBY2dDM0pGQkVBZ0FDQUJJQkVvQWd3Z0F5QUVJQVVnQmtFQUlBZ2dDU0FLUVFBZ0RDQU5JQTRnRHlBUUVDMGdBQ0FCSUJFb0FnZ2dBeUFFSUFVZ0VTZ0NEQ0lDSUFacVFRQWdDQ0FDSUFscUlBcEJBRVFBQUFBQUFBRHdQeUFOSUE0Z0R5QVFFQzBMQWtBZ0J3MEFJQXRGRFFBZ0FDQUJJQkVvQWd3Z0F5QUVJQVVnQmtFQUlBZ2dDU0FLSUFzZ0RDQU5JQTRnRHlBUUVDMGdBQ0FCSUJFb0FnZ2dBeUFFSUFVZ0VTZ0NEQ0lBSUFacVFRQWdDQ0FKSUFBZ0Ntb2dDMFFBQUFBQUFBRHdQeUFOSUE0Z0R5QVFFQzBNQVFzZ0IwRUFSeUVDQWtBZ0IwVU5BQ0FMRFFBZ0FDQUJJQkVvQWd3Z0F5QUVJQVVnQmlBSElBZ2dDU0FLUVFBZ0RDQU5JQTRnRHlBUUVDMGdBQ0FCSUJFb0FnZ2dBeUFFSUJFb0Fnd2lBaUFGYWlBR0lBY2dDQ0FDSUFscUlBcEJBRVFBQUFBQUFBRHdQeUFOSUE0Z0R5QVFFQzFCQVNFQ0N5QUxSUTBBSUFKRkRRQWdBQ0FCSUJFb0Fnd2dBeUFFSUFVZ0JpQUhJQWdnQ1NBS0lBc2dEQ0FOSUE0Z0R5QVFFQzBnQUNBQklCRW9BZ2dnQXlBRUlCRW9BZ3dpQUNBRmFpQUdJQWNnQ0NBSklBQWdDbW9nQzBRQUFBQUFBQUR3UHlBTklBNGdEeUFRRUMwTElCRkJFR29rQUF2cUFRRUNmeU1BUVJCcklnTWtBQUpBSUFGRkRRQWdBQ2tESUNBQUtRTVlJQUFwQXhBZ0FDa0RDQ0FBS1FNQWhJU0VoRkJGRFFBZ0FFRUFOZ0lrSUFCQkFEb0FFQ0FBUWdBM0FnQWdBRUVETmdJTUlBQkJBRFlDQ0NBQUtRTWNJQUFwQXhTRVVFVU5BQ0FBUVJScUlRUWdBRUVBTmdJY0lBQkJBRFlDSUNBRElBQW9BaHcyQWd3Z0F5QURLQUlNTmdJSUlBTWdBeWdDQ0RZQ0RDQURRUUEyQWd3Z0F5QURLQUlNTmdJSUlBTWdBeWdDQ0RZQ0RBSkFJQUlFUUNBQUlBRW9BaUEyQWhRZ0FTQUVOZ0lnREFFTElBQkJBRFlDRkFzZ0FFRXJOZ0lZSUFOQkVHb2tBQThMRUF3QUN6TUJBWDhnQUVFQklBQWJJUUFDUUFOQUlBQVFLU0lCRFFGQjVNd0FLQUlBSWdFRVFDQUJFUVVBREFFTEN4QU1BQXNnQVF0dkFRRi9Jd0JCZ0FKcklnVWtBQUpBSUFJZ0Ewd05BQ0FFUVlEQUJIRU5BQ0FGSUFGQi93RnhJQUlnQTJzaUFrR0FBaUFDUVlBQ1NTSUJHeEF6R2lBQlJRUkFBMEFnQUNBRlFZQUNFQ3NnQWtHQUFtc2lBa0gvQVVzTkFBc0xJQUFnQlNBQ0VDc0xJQVZCZ0FKcUpBQUwraFFDQm44Q2ZDTUFRUkJySWcwa0FFSEFBRUVnSUFFZ0FDQUFJQUZJRzBIQUFFb2JJZzlCQUVwQnpCNGdEQkFpSUFCQmdBRk9CRUFqQUVFUWF5SU9JQUczSUFDM0loT2lJQk9pSWhNZ0U2QkVBQUFBQUFBQTREK2lPUU1JSUE1RUFBQUFBTkFTWTBFNUF3QWdEaXNEQ0NBT0t3TUFaaG9MQWtBQ1FBSkFBa0FnQVNBQUlBQWdBVWdiUVNCTUJFQkJBQ0FCQW44akFFRVFheUlNSUFJNUF3Z2dERVFBQUFBQUFBQUFBRGtEQUNBTUt3TUlJQXdyQXdCaEN4dEZCRUFqQUVFUWF5SU1JQWM1QXdnZ0RFUUFBQUFBQUFEd1B6a0RBQ0FNS3dNSUlBd3JBd0JoRFFVTElBQWdBU0FDSUFNZ0JDQUZJQVlnQnlBSUlBa2dDaUFMRUtrQ0RRUWdCa1VOQVNBQVFRRnJJUThnQUVFQlNBMERJQXNOQWtFQUlRNUJBU0VHQTBBQ1FBSi9Jd0JCRUdzaURDQUhPUU1JSUF4RUFBQUFBQUFBQUFBNUF3QWdEQ3NEQ0NBTUt3TUFZUXNFUUNBSklBNXFJUkJCQUNFTUEwQWdDQ2dDSkNBUVFRSjBhaWdDQUNBS0lBeHFRUU4wYWtJQU53TUFJQXhCQVdvaURDQUdSdzBBQ3d3QkN5QUlLQUlrSUFrZ0RtcEJBblJxS0FJQUlBcEJBM1JxUVFFZ0NpQU9haUFLYTBFQmFpQUhFRFFMSUFaQkFXb2hCaUFPUVFGcUlnNGdBRWNOQUFzTUF3c2dBQ0FCVEFSQUlBRWdEeUFOUVF4cUlBMUJDR29nREJBOUlBMG9BZ3doQVNBR1JRUkFJQUFnQVNBQ0lBTWdCQ0FGUVFBZ0J5QUlJQWtnQ2lBTElBd1FNU0FBSUEwb0FnZ2dBaUFESUFRZ0RTZ0NEQ0FGYWtFQVJBQUFBQUFBQVBBL0lBZ2dDU0FLSUFzZ0RCQXhEQVVMSUFBZ0FTQUNJQU1nQkNBRklBWWdCeUFJSUFrZ0NpQUxJQXdRTVNBQUlBMG9BZ2dnQWlBRElBMG9BZ3dnQkdvZ0JTQUdSQUFBQUFBQUFQQS9JQWdnQ1NBS0lBc2dEQkF4REFRTElBQWdEeUFOUVF4cUlBMUJDR29nREJBOUlBWkJBRWNoRGdKQUlBWU5BQ0FMUlEwQUlBMG9BZ3dnQVNBQ0lBTWdCQ0FGUVFBZ0J5QUlJQWtnQ2tFQklBd1FNU0FOS0FJSUlBRWdBaUFESUEwb0Fnd2lBQ0FFYWlBRlFRQWdCeUFJSUFBZ0NXb2dBQ0FLYWtFQklBd1FNU0FOS0FJTUlnQWdEU2dDQ0NBQklBSWdBeUFFSUFWQkFDQURJQUFnQkdvZ0JVRUJJQWNnQ0NBSklBQWdDbW9nREJBOEN5QUxJQTV5UlFSQUlBMG9BZ3dnQVNBQ0lBTWdCQ0FGUVFBZ0J5QUlJQWtnQ2tFQUlBd1FNU0FOS0FJSUlBRWdBaUFESUEwb0Fnd2lBQ0FFYWlBRlFRQWdCeUFJSUFBZ0NXb2dBQ0FLYWtFQUlBd1FNU0FOS0FJSUlBMG9BZ3dpQUNBQklBSWdBeUFBSUFScUlBVkJBQ0FESUFRZ0JVRUJJQWNnQ0NBQUlBbHFJQW9nREJBOEN5QUdSU0FMUVFGemNrVUVRQ0FOS0FJTUlBRWdBaUFESUFRZ0JTQUdJQWNnQ0NBSklBcEJBU0FNRURFZ0RTZ0NDQ0FCSUFJZ0F5QUVJQTBvQWd3aUFDQUZhaUFHSUFjZ0NDQUFJQWxxSUFBZ0NtcEJBU0FNRURFZ0RTZ0NEQ0lBSUEwb0FnZ2dBU0FDSUFNZ0JDQUZRUUVnQXlBRUlBQWdCV3BCQUNBSElBZ2dDU0FBSUFwcUlBd1FQQXNnQmtVTkF5QUxEUU1nRFNnQ0RDQUJJQUlnQXlBRUlBVWdCaUFISUFnZ0NTQUtRUUFnREJBeElBMG9BZ2dnQVNBQ0lBTWdCQ0FOS0FJTUlnQWdCV29nQmlBSElBZ2dBQ0FKYWlBQUlBcHFRUUFnREJBeElBMG9BZ2dnRFNnQ0RDSUFJQUVnQWlBRElBUWdBQ0FGYWtFQklBTWdCQ0FGUVFBZ0J5QUlJQUFnQ1dvZ0NpQU1FRHdNQXdzZ0FFRUJTQTBDSUFKRUFBQUFBQUFBQUFDaUlSUWdBU0FGYWtFQmF5RU9RUUFoQmlBTEJFQWdBRUVCYXlFUElBRkJBRW9oRVNBRlFRTjBJUkFEUUFKQUlBQWdCa3dOQUNBR0lBbHFJUUVnQmlFTUlCRUVRQ0FFSUFacUlSSURRRVFBQUFBQUFBQUFBQ0VUQW44akFFRVFheUlMSUFJNUF3Z2dDMFFBQUFBQUFBQUFBRGtEQUNBTEt3TUlJQXNyQXdCaUN3UkFJQU1vQWlRaUN5QVNRUUowYWlnQ0FDQVFha0VCSUFzZ0JDQU1ha0VDZEdvb0FnQWdFR3BCQVNBT0lBVnJRUUZxRUN3aEV3c0NRQUovSXdCQkVHc2lDeUFIT1FNSUlBdEVBQUFBQUFBQUFBQTVBd0FnQ3lzRENDQUxLd01BWWdzRVFDQUlLQUlrSUFGQkFuUnFLQUlBSUFvZ0RHcEJBM1JxSWdzZ0V5QUNvaUFMS3dNQUlBZWlvRGtEQUF3QkN5QUlLQUlrSUFGQkFuUnFLQUlBSUFvZ0RHcEJBM1JxSUJNZ0FxSTVBd0FMSUF3Z0QwY2hDeUFNUVFGcUlRd2dDdzBBQ3d3QkN3TkFJd0JCRUdzaUN5QUNPUU1JSUF0RUFBQUFBQUFBQUFBNUF3QWdDeXNEQ0NBTEt3TUFZaG9qQUVFUWF5SUxJQWM1QXdnZ0MwUUFBQUFBQUFBQUFEa0RBQ0FJS0FJa0lBRkJBblJxS0FJQUlBb2dER3BCQTNScUloSWdDeXNEQ0NBTEt3TUFZUVI4SUJRRklCUWdFaXNEQUNBSG9xQUxPUU1BSUF3Z0QwWWhDeUFNUVFGcUlRd2dDMFVOQUFzTElBWkJBV29pQmlBQVJ3MEFDd3dEQ3lBQlFRRklJUkFnQlVFRGRDRVBBMEFnQmlBSmFpRUJRUUFoREFKQUlCQkZCRUFnQkNBR2FpRVJBMEJFQUFBQUFBQUFBQUFoRXdKL0l3QkJFR3NpQ3lBQ09RTUlJQXRFQUFBQUFBQUFBQUE1QXdBZ0N5c0RDQ0FMS3dNQVlnc0VRQ0FES0FJa0lnc2dFVUVDZEdvb0FnQWdEMnBCQVNBTElBUWdER3BCQW5ScUtBSUFJQTlxUVFFZ0RpQUZhMEVCYWhBc0lSTUxBa0FDZnlNQVFSQnJJZ3NnQnprRENDQUxSQUFBQUFBQUFBQUFPUU1BSUFzckF3Z2dDeXNEQUdJTEJFQWdDQ2dDSkNBQlFRSjBhaWdDQUNBS0lBeHFRUU4wYWlJTElCTWdBcUlnQ3lzREFDQUhvcUE1QXdBTUFRc2dDQ2dDSkNBQlFRSjBhaWdDQUNBS0lBeHFRUU4wYWlBVElBS2lPUU1BQ3lBR0lBeEdJUXNnREVFQmFpRU1JQXRGRFFBTERBRUxBMEFqQUVFUWF5SUxJQUk1QXdnZ0MwUUFBQUFBQUFBQUFEa0RBQ0FMS3dNSUlBc3JBd0JpR2lNQVFSQnJJZ3NnQnprRENDQUxSQUFBQUFBQUFBQUFPUU1BSUFnb0FpUWdBVUVDZEdvb0FnQWdDaUFNYWtFRGRHb2lFU0FMS3dNSUlBc3JBd0JoQkh3Z0ZBVWdGQ0FSS3dNQUlBZWlvQXM1QXdBZ0JpQU1SeUVMSUF4QkFXb2hEQ0FMRFFBTEN5QUdRUUZxSWdZZ0FFY05BQXNNQWdzZ0NpQVBhaUVPUVFBaEJnTkFBa0FDZnlNQVFSQnJJZ3dnQnprRENDQU1SQUFBQUFBQUFBQUFPUU1BSUF3ckF3Z2dEQ3NEQUdJTEJFQWdDQ2dDSkNBR0lBbHFRUUowYWlnQ0FDQUdJQXBxSWd4QkEzUnFRUUVnRGlBTWEwRUJhaUFIRURRTUFRc2dCaUFQSUFZZ0Qwb2JJUkFnQmlBSmFpRVJJQVloREFOQUlBZ29BaVFnRVVFQ2RHb29BZ0FnQ2lBTWFrRURkR3BDQURjREFDQU1JQkJISVJJZ0RFRUJhaUVNSUJJTkFBc0xJQVpCQVdvaUJpQUFSdzBBQ3dzakFFRVFheUlHSUFJNUF3Z2dCa1FBQUFBQUFBQUFBRGtEQUNBR0t3TUlJQVlyQXdCaUlRWWdBVUVCU0EwQUlBWkZEUUFnQUVFQlNBMEFRUUFoQmlBTEJFQWdDaUFQYWlFTEEwQWdCQ0FHYWlFT1FRQWhEQU5BSUFNb0FpUWdEa0VDZEdvb0FnQWdCU0FNYWtFRGRHb2lEeXNEQUNFSElBZ29BaVFnQ1NBTWFrRUNkR29vQWdBZ0NpQU1haUlRUVFOMGFpQVBJQXNnRUd0QkFXb2dCeUFDb2hCQUlBeEJBV29pRENBQVJ3MEFDeUFHUVFGcUlnWWdBVWNOQUFzTUFRc0RRQ0FFSUFacUlRdEJBQ0VNQTBBZ0F5Z0NKQ0FMUVFKMGFpZ0NBQ0lPSUFVZ0RHcEJBM1JxS3dNQUlRY2dDQ2dDSkNBSklBeHFRUUowYWlnQ0FDQUtRUU4wYWlBT0lBVkJBM1JxSUFvZ0RHb2dDbXRCQVdvZ0J5QUNvaEJBSUF4QkFXb2lEQ0FBUncwQUN5QUdRUUZxSWdZZ0FVY05BQXNMSUExQkVHb2tBQXRCQUNBQVFRQTJBZ2dnQUVJQU53SUFJQUFvQWh3RVFDQUFLQUljSUFBb0FoZ1JBQUFMSUFCQkFEWUNIQ0FBUVFBNkFCQWdBRUlBTndJZ0lBQkJLellDR0F2ekFnSUNmd0YrQWtBZ0FrVU5BQ0FBSUFKcUlnTkJBV3NnQVRvQUFDQUFJQUU2QUFBZ0FrRURTUTBBSUFOQkFtc2dBVG9BQUNBQUlBRTZBQUVnQTBFRGF5QUJPZ0FBSUFBZ0FUb0FBaUFDUVFkSkRRQWdBMEVFYXlBQk9nQUFJQUFnQVRvQUF5QUNRUWxKRFFBZ0FFRUFJQUJyUVFOeElnUnFJZ01nQVVIL0FYRkJnWUtFQ0d3aUFUWUNBQ0FESUFJZ0JHdEJmSEVpQkdvaUFrRUVheUFCTmdJQUlBUkJDVWtOQUNBRElBRTJBZ2dnQXlBQk5nSUVJQUpCQ0dzZ0FUWUNBQ0FDUVF4cklBRTJBZ0FnQkVFWlNRMEFJQU1nQVRZQ0dDQURJQUUyQWhRZ0F5QUJOZ0lRSUFNZ0FUWUNEQ0FDUVJCcklBRTJBZ0FnQWtFVWF5QUJOZ0lBSUFKQkdHc2dBVFlDQUNBQ1FSeHJJQUUyQWdBZ0JDQURRUVJ4UVJoeUlnUnJJZ0pCSUVrTkFDQUJyU0lGUWlDR0lBV0VJUVVnQXlBRWFpRUJBMEFnQVNBRk53TVlJQUVnQlRjREVDQUJJQVUzQXdnZ0FTQUZOd01BSUFGQklHb2hBU0FDUVNCcklnSkJIMHNOQUFzTElBQUxiQUVCZndKQUlBRkJBVWNFUUNBQ1FRQk1EUUVnQVVFRGRDRUJBMEFnQUNBQUt3TUFJQU9pT1FNQUlBQWdBV29oQUNBRVFRRnFJZ1FnQWtjTkFBc01BUXNnQWtFQVRBMEFBMEFnQUNBQUt3TUFJQU9pT1FNQUlBQkJDR29oQUNBRVFRRnFJZ1FnQWtjTkFBc0xDNHNCQVFOL1Fkak1BRUhZekFBb0FnQkJBV29pQlRZQ0FDQUFJQVUyQWdBQ1FDQURCRUFEUUNBQ0lBUkJBM1JxSWdZb0FnQkZEUUlnQkVFQmFpSUVJQU5IRFFBTEN5QUFJQUVnQWlBRFFRUjBRUWh5RUx3QklBTkJBWFFpQUJBMUlRRWdBQkFCSUFFUEN5QUdJQVUyQWdBZ0FpQUVRUU4wYWlJQUlBRTJBZ1FnQUVFQU5nSUlJQU1RQVNBQ0N6SUFBa0FnQVVFQlNBMEFJQUpCQVVnTkFDQUJJQUFvQWdCTUJFQWdBQ2dDQkNBQ1RnMEJDeUFBSUFFZ0FpQURFRlVMQzgwVUFnTi9BWHdqQUVFUWF5SU5KQUJCd0FCQklDQUJJQUFnQUNBQlNCdEJ3QUJLR3lJTVFRQktRYUVlSUFzUUlnSkFJQUZCZ0FGT0JFQWpBRUVRYXlJT0lBRzNJQUMzSWcraUlBK2lPUU1JSUE1RUFBQUFBTkFTWTBFNUF3QWdEaXNEQ0NBT0t3TUFaaG9nQVNBTUlBMUJER29nRFVFSWFpQUxFRDBnQUNBTktBSUlJQUlnQXlBRUlBVWdCaUFISUFnZ0NTQU5LQUlNSUFwcUlBc1FOeUFBSUEwb0Fnd2dBaUFESUFRZ0JTQUdJQWNnQ0NBSklBb2dDeEEzREFFTEFrQUNRQUpBSUFFZ0FDQUFJQUZJRzBFZ1RBUkFJQUJGRFFRZ0FVVU5CQ0FBSUFFZ0FpQURJQVFnQlNBR0lBY2dDQ0FKSUFvUWdnRU5CQ0FGUlEwQkFrQUNRQUpBSUFjT0FnRUFCd3NnQUVFQlNBMEdJQUVnQ21wQkFXc2hCMEVBSVFVZ0JrVU5BU0FLUVFOMElRWURRQ0FGSUFscVFRSjBJZ3dnQ0NnQ0pHb29BZ0FnQm1wQkFTQUhJQXByUVFGcVJBQUFBQUFBQVBBL0VEUWdBQ0FGUVFGcUlnRktCRUFnQXlBRmFpRUZJQUVoQ3dOQUlBZ29BaVFpRGlBSklBdHFRUUowYWlnQ0FDQUdhaUFNSUE1cUtBSUFJQVpxSUFjZ0NtdEJBV29nQWlnQ0pDQUZRUUowYWlnQ0FDQUVJQXRxUVFOMGFpc0RBQkE1SUF0QkFXb2lDeUFBUncwQUN3c2dBU0lGSUFCSERRQUxEQVlMSUFCQkFVZ05CU0FBUVFGcklRQWdBU0FLYWtFQmF5RUJJQVpGRFFRZ0FDRUZBMEFnQUNBRlNnUkFJQVVnQ1dvaEJpQURJQVZxSVFjZ0JTRUxBMEFnQWlnQ0pDQUhRUUowYWlnQ0FDQUxRUUZxSWdzZ0JHcEJBM1JxS3dNQUlROGdDa0VEZENJTUlBZ29BaVFpRGlBR1FRSjBhaWdDQUdvZ0RpQUpJQXRxUVFKMGFpZ0NBQ0FNYWlBQklBcHJRUUZxSUE4UU9TQUFJQXRIRFFBTEN5QUZRUUJLSVFZZ0JVRUJheUVGSUFZTkFBc01CUXNNQWdzZ0FDQUJUQVJBSUFFZ0RDQU5RUXhxSUExQkNHb2dDeEE5SUFBZ0RTZ0NEQ0FDSUFNZ0JDQUZJQVlnQnlBSUlBa2dDaUFMRURjZ0FDQU5LQUlJSUFJZ0F5QUVJQVVnQmlBSElBZ2dDU0FOS0FJTUlBcHFJQXNRTnd3RUN5QUFJQXdnRFVFTWFpQU5RUWhxSUFzUVBRSkFBa0FnQncwQUlBVkZEUUJCQUNFQUlBMG9BZ2dnQVNBQ0lBMG9BZ3dpRENBRGFpQUVJQXhxUVFFZ0JrRUFJQWdnQ1NBTWFpQUtJQXNRTnlBTktBSU1JZ3dnQVNBTktBSUlSQUFBQUFBQUFQQy9JQUlnQXlBRUlBeHFRUUFnQ0NBSklBeHFJQXBCQUVRQUFBQUFBQUR3UHlBSUlBa2dDaUFMRUR3Z0RTZ0NEQ0FCSUFJZ0F5QUVRUUVnQmtFQUlBZ2dDU0FLSUFzUU53d0JDeUFIUVFCSElRQWdCMFVOQUNBRlJRMEFRUUVoQUNBTktBSU1JQUVnQWlBRElBUkJBU0FHSUFjZ0NDQUpJQW9nQ3hBM0lBMG9BZ2dnQVNBTktBSU1JZ3hFQUFBQUFBQUE4TDhnQWlBRElBUWdER29nQnlBSUlBa2dDa0VBUkFBQUFBQUFBUEEvSUFnZ0NTQU1haUFLSUFzUVBDQU5LQUlJSUFFZ0FpQU5LQUlNSWd3Z0Eyb2dCQ0FNYWtFQklBWWdCeUFJSUFrZ0RHb2dDaUFMRURjTElBVkJBWE1oREFKQUlBY05BQ0FNUlEwQUlBMG9BZ3dnQVNBQ0lBTWdCQ0FGSUFaQkFDQUlJQWtnQ2lBTEVEY2dEU2dDQ0NBQklBMG9BZ3dpRGtRQUFBQUFBQUR3dnlBQ0lBTWdEbW9nQkVFQUlBZ2dDU0FLUVFCRUFBQUFBQUFBOEQ4Z0NDQUpJQTVxSUFvZ0N4QThJQTBvQWdnZ0FTQUNJQTBvQWd3aURpQURhaUFFSUE1cUlBVWdCa0VBSUFnZ0NTQU9haUFLSUFzUU53c2dBQ0FNY1VVTkF5QU5LQUlJSUFFZ0FpQU5LQUlNSWdBZ0Eyb2dBQ0FFYWlBRklBWWdCeUFJSUFBZ0NXb2dDaUFMRURjZ0RTZ0NEQ0lBSUFFZ0RTZ0NDRVFBQUFBQUFBRHd2eUFDSUFBZ0Eyb2dCQ0FISUFnZ0FDQUphaUFLUVFCRUFBQUFBQUFBOEQ4Z0NDQUpJQW9nQ3hBOElBMG9BZ3dnQVNBQ0lBTWdCQ0FGSUFZZ0J5QUlJQWtnQ2lBTEVEY01Bd3NDUUFKQUFrQUNRQ0FIRGdJQkFBWUxJQUJCQVVnTkJTQUFRUUZySVFzZ0FTQUtha0VCYXlFRklBWkZEUUVnQ2tFRGRDRUdBMEFnQ3lJQklBbHFRUUowSWdjZ0NDZ0NKR29vQWdBZ0JtcEJBU0FGSUFwclFRRnFSQUFBQUFBQUFQQS9FRFFnQUVFQlNnUkFJQUVnQTJvaERDQUFRUUpySVFzRFFDQUlLQUlrSWdBZ0NTQUxha0VDZEdvb0FnQWdCbW9nQUNBSGFpZ0NBQ0FHYWlBRklBcHJRUUZxSUFJb0FpUWdERUVDZEdvb0FnQWdCQ0FMYWtFRGRHb3JBd0FRT1NBTFFRQktJUUFnQzBFQmF5RUxJQUFOQUFzTElBRkJBV3NoQ3lBQklnQkJBRW9OQUFzTUJRc2dBRUVCU0EwRUlBRWdDbXBCQVdzaEIwRUFJUUVnQmtVTkFTQUtRUU4wSVFVRFFDQUpJUVlnQVFSQUlBRWdDV29oQmlBQklBTnFJUXhCQUNFTEEwQWdDQ2dDSkNJT0lBWkJBblJxS0FJQUlBVnFJQTRnQ1NBTGFrRUNkR29vQWdBZ0JXb2dCeUFLYTBFQmFpQUNLQUlrSUF4QkFuUnFLQUlBSUFRZ0MycEJBM1JxS3dNQUVEa2dDMEVCYWlJTElBRkhEUUFMQ3lBSUtBSWtJQVpCQW5ScUtBSUFJQVZxUVFFZ0J5QUthMEVCYWtRQUFBQUFBQUR3UHhBMElBRkJBV29pQVNBQVJ3MEFDd3dFQ3dOQUlBQWhBU0FLUVFOMElnWWdDU0FMYWtFQ2RDSUhJQWdvQWlScUtBSUFha0VCSUFVZ0NtdEJBV3BFQUFBQUFBQUE4RDhnQ3lJQUlBTnFRUUowSWd3Z0FpZ0NKR29vQWdBZ0JDQUxha0VEZEdvckF3Q2pFRFFnQVVFQ1RnUkFJQUZCQW1zaEN3TkFJQWdvQWlRaUFTQUpJQXRxUVFKMGFpZ0NBQ0FHYWlBQklBZHFLQUlBSUFacUlBVWdDbXRCQVdvZ0FpZ0NKQ0FNYWlnQ0FDQUVJQXRxUVFOMGFpc0RBQkE1SUF0QkFFb2hBU0FMUVFGcklRc2dBUTBBQ3dzZ0FFRUJheUVMSUFCQkFVNE5BQXNNQXdzRFFDQURJUVlnQ1NFRklBRUVRQ0FCSUFscUlRVWdBU0FEYWlFR1FRQWhDd05BSUFwQkEzUWlEQ0FJS0FJa0lnNGdCVUVDZEdvb0FnQnFJQTRnQ1NBTGFrRUNkR29vQWdBZ0RHb2dCeUFLYTBFQmFpQUNLQUlrSUFaQkFuUnFLQUlBSUFRZ0MycEJBM1JxS3dNQUVEa2dDMEVCYWlJTElBRkhEUUFMQ3lBSUtBSWtJQVZCQW5ScUtBSUFJQXBCQTNScVFRRWdCeUFLYTBFQmFrUUFBQUFBQUFEd1B5QUNLQUlrSUFaQkFuUnFLQUlBSUFFZ0JHcEJBM1JxS3dNQW94QTBJQUZCQVdvaUFTQUFSdzBBQ3d3Q0N3TkFJQXBCQTNRaUFTQUZJQWxxUVFKMElnWWdDQ2dDSkdvb0FnQnFRUUVnQnlBS2EwRUJha1FBQUFBQUFBRHdQeUFESUFWcVFRSjBJZ3dnQWlnQ0pHb29BZ0FnQkNBRmFrRURkR29yQXdDakVEUWdCVUVCYWlJRklRc2dBQ0FGU2dSQUEwQWdDQ2dDSkNJT0lBa2dDMnBCQW5ScUtBSUFJQUZxSUFZZ0Rtb29BZ0FnQVdvZ0J5QUthMEVCYWlBQ0tBSWtJQXhxS0FJQUlBUWdDMnBCQTNScUt3TUFFRGtnQzBFQmFpSUxJQUJIRFFBTEN5QUFJQVZIRFFBTERBRUxJQUFoQlFOQUlBVWdDV29oQmlBRElBVnFJUWNnQUNBRklndEtCRUFEUUNBQ0tBSWtJQWRCQW5ScUtBSUFJQXRCQVdvaUN5QUVha0VEZEdvckF3QWhEeUFLUVFOMElnd2dDQ2dDSkNJT0lBWkJBblJxS0FJQWFpQU9JQWtnQzJwQkFuUnFLQUlBSUF4cUlBRWdDbXRCQVdvZ0R4QTVJQUFnQzBjTkFBc0xJQWdvQWlRZ0JrRUNkR29vQWdBZ0NrRURkR3BCQVNBQklBcHJRUUZxUkFBQUFBQUFBUEEvSUFJb0FpUWdCMEVDZEdvb0FnQWdCQ0FGYWtFRGRHb3JBd0NqRURRZ0JVRUFTaUVHSUFWQkFXc2hCU0FHRFFBTEN5QU5RUkJxSkFBTHFoTUNDSDhCZkNNQVFSQnJJZ3drQUVIQUFFRWdJQUVnQUNBQUlBRklHMEhBQUVvYklnMUJBRXBCK0IwZ0N4QWlBa0FnQUVHQUFVNEVRQ01BUVJCcklnMGdBTGNnQWJjaUZLSWdGS0k1QXdnZ0RVUUFBQUFBMEJKalFUa0RBQ0FOS3dNSUlBMHJBd0JtR2lBQVFjQUFJQXhCREdvZ0RFRUlhaUFMRUQwZ0RDZ0NEQ0FCSUFJZ0F5QUVJQVVnQmlBSElBZ2dDU0FLSUFzUU9DQU1LQUlJSUFFZ0FpQURJQVFnQlNBR0lBY2dDQ0FNS0FJTUlBbHFJQW9nQ3hBNERBRUxJQUVnQUNBQUlBRklHMEVnVEFSQUlBQWdBV3hGRFFFZ0FDQUJJQUlnQXlBRUlBVWdCaUFISUFnZ0NTQUtFSU1CRFFFZ0JRUkFBa0FDUUNBSERnSUJBQVFMSUFCQkFVZ05BeUFCUVFGSURRTWdCRUVCYWlFT0lBRkJBV3NpQnlBS2FpRVBBMEFnQ1NBUWFpRU5JQWNpQ3lFQkFrQWdCa1VFUUFOQUFud2dCeUFMVEFSQUlBb2dDMm9oQVNBRElBdHFJUVZFQUFBQUFBQUFBQUFNQVFzZ0NDZ0NKQ0FOUVFKMGFpZ0NBQ0FLSUF0cUlnRkJBV29pRVVFRGRHcEJBU0FDS0FJa0lBTWdDMm9pQlVFQ2RHb29BZ0FnQ3lBT2FrRURkR3BCQVNBUElCRnJRUUZxRUN3TElSUWdDQ2dDSkNBTlFRSjBhaWdDQUNBQlFRTjBhaUlCSUFFckF3QWdGS0VnQWlnQ0pDQUZRUUowYWlnQ0FDQUVJQXRxUVFOMGFpc0RBS001QXdBZ0MwRUFTaUVCSUF0QkFXc2hDeUFCRFFBTUFnc0FDd05BQW53Z0FTQUhUZ1JBSUFFZ0Ntb2hDMFFBQUFBQUFBQUFBQXdCQ3lBSUtBSWtJQTFCQW5ScUtBSUFJQUVnQ21vaUMwRUJhaUlGUVFOMGFrRUJJQUlvQWlRZ0FTQURha0VDZEdvb0FnQWdBU0FPYWtFRGRHcEJBU0FQSUFWclFRRnFFQ3dMSVJRZ0NDZ0NKQ0FOUVFKMGFpZ0NBQ0FMUVFOMGFpSUZJQVVyQXdBZ0ZLRTVBd0FnQVVFQVNpRUZJQUZCQVdzaEFTQUZEUUFMQ3lBUVFRRnFJaEFnQUVjTkFBc01Bd3NnQUVFQlNBMENJQUZCQVVnTkFpQUVRUUZxSVFjZ0FVRUJheUlOSUFwcUlRNUJBQ0VGQTBBZ0JTQUphaUVRUVFBaEN3SkFJQVpGQkVBRFFDQUtJQXRxSWc5QkEzUWlFU0FRUVFKMEloSWdDQ2dDSkdvb0FnQnFJaE1nRXlzREFDQURJQXRxUVFKMEloTWdBaWdDSkdvb0FnQWdCQ0FMYWtFRGRHb3JBd0NqT1FNQUlBc2dEVWdFUUNBUklBZ29BaVFnRW1vb0FnQWlFbW9yQXdBaEZDQVNJQTlCQVdvaUQwRURkR29nQWlnQ0pDQVRhaWdDQUNBSElBdHFRUU4wYWlBT0lBOXJRUUZxSUJRUU9Rc2dDMEVCYWlJTElBRkhEUUFNQWdzQUN3TkFJQXNnRFVnRVFDQUlLQUlrSUJCQkFuUnFLQUlBSWc4Z0NpQUxhaUlSUVFOMGFpc0RBQ0VVSUE4Z0VVRUJhaUlSUVFOMGFpQUNLQUlrSUFNZ0MycEJBblJxS0FJQUlBY2dDMnBCQTNScUlBNGdFV3RCQVdvZ0ZCQTVDeUFMUVFGcUlnc2dBVWNOQUFzTElBVkJBV29pQlNBQVJ3MEFDd3dDQ3dKQUFrQWdCdzRDQVFBREN5QUFRUUZJRFFJZ0FVRUJTQTBDSUFwQkFXc2hCUU5BSUFrZ0VHb2hCd0pBSUFaRkJFQWdDa0VEZENJTklBZEJBblFpQnlBSUtBSWthaWdDQUdvaUN5QUxLd01BSUFSQkEzUWlEaUFDS0FJa0lBTkJBblJxS0FJQWFpc0RBS001QXdCQkFTRUxJQUZCQVVZTkFRTkFJQWdvQWlRZ0Iyb29BZ0FnRFdwQkFTQURJQXRxUVFKMElnOGdBaWdDSkdvb0FnQWdEbXBCQVNBRklBdHFJQXByUVFGcUVDd2hGQ0FJS0FJa0lBZHFLQUlBSUFvZ0MycEJBM1JxSWhFZ0VTc0RBQ0FVb1NBQ0tBSWtJQTlxS0FJQUlBUWdDMnBCQTNScUt3TUFvemtEQUNBTFFRRnFJZ3NnQVVjTkFBc01BUXRCQVNFTElBRkJBVVlOQUFOQUlBZEJBblFpRFNBSUtBSWthaWdDQUNBS1FRTjBha0VCSUFJb0FpUWdBeUFMYWtFQ2RHb29BZ0FnQkVFRGRHcEJBU0FGSUF0cUlBcHJRUUZxRUN3aEZDQUlLQUlrSUExcUtBSUFJQW9nQzJwQkEzUnFJZzBnRFNzREFDQVVvVGtEQUNBTFFRRnFJZ3NnQVVjTkFBc0xJQkJCQVdvaUVDQUFSdzBBQ3d3Q0N5QUFRUUZJRFFFZ0FVRUJTQTBCSUFGQkFXc2hEZ05BSUFrZ0VHb2hEeUFPSWcwaEJTQUJJZ2NoQ3dKQUlBWkZCRUFEUUNBTklnVWdDbW9pQzBFRGRDSU5JQTlCQW5RaUVTQUlLQUlrYWlnQ0FHb2lFaUFTS3dNQUlBTWdCV3BCQW5RaUVpQUNLQUlrYWlnQ0FDQUVJQVZxUVFOMGFpc0RBS001QXdBZ0IwRUNUZ1JBSUFnb0FpUWdFV29vQWdBaUJ5QU5haXNEQUNFVUlBY2dDa0VEZEdvZ0FpZ0NKQ0FTYWlnQ0FDQUVRUU4wYWlBTElBcHJJQlFRT1FzZ0JVRUJheUVOSUFVaUIwRUFTZzBBREFJTEFBc0RRQ0FGSVFjZ0MwRUNUZ1JBSUFnb0FpUWdEMEVDZEdvb0FnQWlCU0FISUFwcUlndEJBM1JxS3dNQUlSUWdCU0FLUVFOMGFpQUNLQUlrSUFNZ0IycEJBblJxS0FJQUlBUkJBM1JxSUFzZ0Ntc2dGQkE1Q3lBSFFRRnJJUVVnQnlJTFFRQktEUUFMQ3lBUVFRRnFJaEFnQUVjTkFBc01BUXNnQUNBQlRnUkFJQUFnRFNBTVFReHFJQXhCQ0dvZ0N4QTlJQXdvQWd3Z0FTQUNJQU1nQkNBRklBWWdCeUFJSUFrZ0NpQUxFRGdnRENnQ0NDQUJJQUlnQXlBRUlBVWdCaUFISUFnZ0RDZ0NEQ0FKYWlBS0lBc1FPQXdCQ3lBQklBMGdERUVNYWlBTVFRaHFJQXNRUFFKQUFrQWdCdzBBSUFWRkRRQkJBQ0VOSUFBZ0RDZ0NEQ0FDSUFNZ0JFRUJJQVpCQUNBSUlBa2dDaUFMRURnZ0FDQU1LQUlJSUF3b0Fnd2lBVVFBQUFBQUFBRHd2eUFJSUFrZ0NrRUFJQUlnQXlBQklBUnFRUUJFQUFBQUFBQUE4RDhnQ0NBSklBRWdDbW9nQ3hBOElBQWdEQ2dDQ0NBQ0lBd29BZ3dpQVNBRGFpQUJJQVJxUVFFZ0JrRUFJQWdnQ1NBQklBcHFJQXNRT0F3QkN5QUhRUUJISVEwZ0IwVU5BQ0FGUlEwQVFRRWhEU0FBSUF3b0FnZ2dBaUFNS0FJTUlnRWdBMm9nQVNBRWFrRUJJQVlnQnlBSUlBa2dBU0FLYWlBTEVEZ2dBQ0FNS0FJTUlnRWdEQ2dDQ0VRQUFBQUFBQUR3dnlBSUlBa2dBU0FLYWtFQUlBSWdBeUFCSUFScUlBZEVBQUFBQUFBQThEOGdDQ0FKSUFvZ0N4QThJQUFnRENnQ0RDQUNJQU1nQkVFQklBWWdCeUFJSUFrZ0NpQUxFRGdMSUFWQkFYTWhBUUpBSUFjTkFDQUJSUTBBSUFBZ0RDZ0NDQ0FDSUF3b0Fnd2lEaUFEYWlBRUlBNXFJQVVnQmtFQUlBZ2dDU0FLSUE1cUlBc1FPQ0FBSUF3b0Fnd2lEaUFNS0FJSVJBQUFBQUFBQVBDL0lBZ2dDU0FLSUE1cVFRQWdBaUFESUE1cUlBUkJBRVFBQUFBQUFBRHdQeUFJSUFrZ0NpQUxFRHdnQUNBTUtBSU1JQUlnQXlBRUlBVWdCa0VBSUFnZ0NTQUtJQXNRT0FzZ0FTQU5jVUVCUncwQUlBQWdEQ2dDRENBQ0lBTWdCQ0FGSUFZZ0J5QUlJQWtnQ2lBTEVEZ2dBQ0FNS0FJSUlBd29BZ3dpQVVRQUFBQUFBQUR3dnlBSUlBa2dDa0VBSUFJZ0FTQURhaUFFSUFkRUFBQUFBQUFBOEQ4Z0NDQUpJQUVnQ21vZ0N4QThJQUFnRENnQ0NDQUNJQXdvQWd3aUFDQURhaUFBSUFScUlBVWdCaUFISUFnZ0NTQUFJQXBxSUFzUU9Bc2dERUVRYWlRQUMzUUJBbjhDUUNBQ1FRSnRJUVFnQWtFQ1RnUkFBMEFnQUNBQUt3TUFJQUVyQXdBZ0E2S2hPUU1BSUFBZ0FDc0RDQ0FCS3dNSUlBT2lvVGtEQ0NBQlFSQnFJUUVnQUVFUWFpRUFJQVZCQVdvaUJTQUVSdzBBQ3dzZ0FrRUJjVVVOQUNBQUlBQXJBd0FnQVNzREFDQURvcUU1QXdBTEMzNEJBWDhnQUNBQVFTUnFJZ0UyQWlRZ0FFRUJOZ0lzSUFBZ0FUWUNJQ0FBUVFBMkFqUWdBRUlBTndOQUlBQkJBRFlDVUNBQVFnQTNBMGdnQUVLQWdJQ0FnSUNBZURjQ0dDQUFRb0NBZ0lDQWdJRDQvd0EzQWhBZ0FFS0FnSUNBZ0lDQS9QOEFOd0lJSUFCQkFUWUNBQ0FBUVFBMkFpZ2dBRUhBRlRZQ1BBdWpBZ0VFZnlNQVFVQnFJZ0lrQUNBQUtBSUFJZ05CQkdzb0FnQWhCQ0FEUVFocktBSUFJUVVnQWtFQU5nSVVJQUpCM01NQU5nSVFJQUlnQURZQ0RDQUNJQUUyQWdoQkFDRURJQUpCR0dwQkFFRW5FRE1hSUFBZ0JXb2hBQUpBSUFRZ0FVRUFFQ2dFUUNBQ1FRRTJBamdnQkNBQ1FRaHFJQUFnQUVFQlFRQWdCQ2dDQUNnQ0ZCRUpBQ0FBUVFBZ0FpZ0NJRUVCUmhzaEF3d0JDeUFFSUFKQkNHb2dBRUVCUVFBZ0JDZ0NBQ2dDR0JFR0FBSkFBa0FnQWlnQ0xBNENBQUVDQ3lBQ0tBSWNRUUFnQWlnQ0tFRUJSaHRCQUNBQ0tBSWtRUUZHRzBFQUlBSW9BakJCQVVZYklRTU1BUXNnQWlnQ0lFRUJSd1JBSUFJb0FqQU5BU0FDS0FJa1FRRkhEUUVnQWlnQ0tFRUJSdzBCQ3lBQ0tBSVlJUU1MSUFKQlFHc2tBQ0FEQzYwQkFnRi9BWHdnQjBFQ1NVSHdIaUFRRUNJZ0MwRUNTVUdnSHlBUUVDSWdEU2dDQUNBQUlBNXFUa0hRSHlBUUVDSWdEU2dDQkNBQklBOXFUa0hRSHlBUUVDSWdBRUdBQVVoQkFDQUJRWUFCU0J0RkJFQWpBRUVRYXlJUklBQzNJQUczb2lBQ3Q2SWlFaUFTb0RrRENDQVJSQUFBQUFEUUVtTkJPUU1BSUJFckF3Z2dFU3NEQUdZYUN5QUFJQUVnQWlBRElBUWdCU0FHSUFjZ0NDQUpJQW9nQ3lBTUlBMGdEaUFQSUJBUUxRdkhBUUVCZnlBQ1FRQTJBZ0FnQTBFQU5nSUFJQUJCQVVwQjhSc2dCQkFpSUFBZ0FVcEJpQndnQkJBaUlBQkJmM05CSDNaQjVSd2dCQkFpSUFGQkFFcEIvUndnQkJBaUlBQWdBVzBpQlNBQUlBRWdCV3hIYWlJRlFRRktRYWNjSUFRUUlpQUNJQVZCQW0wZ0JVR0JnSUNBZUhGQkFVWnFJQUZzSWdVMkFnQWdBeUFBSUFWck5nSUFJQUlvQWdCQkFFcEJ5aHdnQkJBaUlBTW9BZ0JCQUVwQnlod2dCQkFpSUFJb0FnQWdBVzlGUWNvY0lBUVFJaUFDS0FJQUlBTW9BZ0JPUWNvY0lBUVFJZ3VzQ0FJUmZ3cDhBa0FnQUVVTkFDQUJRUUFnQmtRQUFBQUFBQUFBQUdJYlJRUkFJQWRFQUFBQUFBQUFBQUJpQkVBZ0FFRUFUQTBDSUFWQkEzUWhBUU5BSUFRZ0JDc0RBQ0FIb2prREFDQUJJQVJxSVFRZ0NFRUJhaUlJSUFCSERRQUxEQUlMSUFCQkFVZ05BU0FGUVFOMElRRURRQ0FFUWdBM0F3QWdBU0FFYWlFRUlBaEJBV29pQ0NBQVJ3MEFDd3dCQ3dKQUlBQkJJRWNOQUNBQlFTQkhEUUFnQWlBRElBUWdCU0FHSUFjUWlnRVBDeUFBUVFKdElSTWdBU0FCUVFodElnNUJBM1JySWd0QkFtMGhEeUFBUVFKT0JFQWdBVUVCY1NFVUlBTWdEa0VHZEdvaEZTQUJRUWRLSVJZZ0MwRUNTQ0VYSUE5QkJIUWhEU0FGUVFSMElSZ0RRQ0FDUVlBQ2FpRUlJQUloQ1VRQUFBQUFBQUFBQUNFWlJBQUFBQUFBQUFBQUlScEVBQUFBQUFBQUFBQWhHMFFBQUFBQUFBQUFBQ0VjSUFNaUN5RUtRUUFoRENBV0JFQURRQ0FiSUFvckF3QWlHU0FJS3dNQW9xQWdDaXNEQ0NJYUlBZ3JBd2lpb0NBS0t3TVFJaDBnQ0NzREVLS2dJQW9yQXhnaUhpQUlLd01Zb3FBZ0Npc0RJQ0lmSUFnckF5Q2lvQ0FLS3dNb0lpQWdDQ3NES0tLZ0lBb3JBekFpSVNBSUt3TXdvcUFnQ2lzRE9DSWlJQWdyQXppaW9DRWJJQndnQ1NzREFDQVpvcUFnQ1NzRENDQWFvcUFnQ1NzREVDQWRvcUFnQ1NzREdDQWVvcUFnQ1NzRElDQWZvcUFnQ1NzREtDQWdvcUFnQ1NzRE1DQWhvcUFnQ1NzRE9DQWlvcUFoSENBS1FVQnJJUW9nQ0VGQWF5RUlJQWxCUUdzaENTQU1RUUZxSWd3Z0RrY05BQXNnSENFWklCc2hHaUFWSVFzTEFrQWdGd1JBSUFnaEVRd0JDeUFJSUExcUlSRkJBQ0VTSUFzaENpQUpJUXdEUUNBYUlBb3JBd0FpR3lBSUt3TUFvcUFnQ2lzRENDSWNJQWdyQXdpaW9DRWFJQmtnRENzREFDQWJvcUFnRENzRENDQWNvcUFoR1NBS1FSQnFJUW9nQ0VFUWFpRUlJQXhCRUdvaERDQVNRUUZxSWhJZ0QwY05BQXNnQ3lBTmFpRUxJQWtnRFdvaENRc2dGQVJBSUJvZ0N5c0RBQ0liSUJFckF3Q2lvQ0VhSUJrZ0NTc0RBQ0Fib3FBaEdRc0NRQ0FIUkFBQUFBQUFBQUFBWWdSQUlBUWdHU0FHb2lBRUt3TUFJQWVpb0RrREFDQUVJQVZCQTNScUlnc2dHaUFHb2lBTEt3TUFJQWVpb0RrREFBd0JDeUFFSUJrZ0JxSTVBd0FnQkNBRlFRTjBhaUFhSUFhaU9RTUFDeUFDUVlBRWFpRUNJQVFnR0dvaEJDQVFRUUZxSWhBZ0UwY05BQXNMSUFCQkFYRkZEUUFnQVVFQ2JTRUFSQUFBQUFBQUFBQUFJUmtDUUNBQlFRSklCRUFnQWlFTURBRUxJQUJCQVhRaEJTQUNJQUJCQkhScUlReEJBQ0VKSUFNaENBTkFJQmtnQWlzREFDQUlLd01Bb2lBQ0t3TUlJQWdyQXdpaW9LQWhHU0FJUVJCcUlRZ2dBa0VRYWlFQ0lBbEJBV29pQ1NBQVJ3MEFDeUFESUFWQkEzUnFJUU1MSUFGQkFYRUVRQ0FaSUF3ckF3QWdBeXNEQUtLZ0lSa0xJQVFDZkNBSFJBQUFBQUFBQUFBQVlnUkFJQmtnQnFJZ0JDc0RBQ0FIb3FBTUFRc2dHU0FHb2dzNUF3QUxDd1lBSUFBUUpndDBBUUovQWtBZ0FrRUNiU0VFSUFKQkFrNEVRQU5BSUFBZ0FDc0RBQ0FCS3dNQUlBT2lvRGtEQUNBQUlBQXJBd2dnQVNzRENDQURvcUE1QXdnZ0FVRVFhaUVCSUFCQkVHb2hBQ0FGUVFGcUlnVWdCRWNOQUFzTElBSkJBWEZGRFFBZ0FDQUFLd01BSUFFckF3QWdBNktnT1FNQUN3c1JBQ0FBQkVBZ0FFRUVheWdDQUJBbUN3djFBUUVCZnlNQVFSQnJJZ01rQUFKQUlBQUVRRUhjeXdBdEFBQUVRQ0FESUFKQndCVWdBaHMyQWdBZ0F4Q2pBUXNnQUNnQ1VDSURCRUFnQUNBREVRQUFDeUFBS0FJZ0tBSUlRUUZIQkVBRFFBSkFJQUFvQWlBb0FnaEJBa1lOQUFOQUlBQW9BaUFvQWdoQkFVWU5BUUpBSUFBb0FpQW9BZ2hGRFFBZ0FDZ0NJQ2dDQkVVTkFDQUFLQUlnS0FJSUlBQW9BaUFvQWdRUkFBQUxJQUFnQUNnQ0lDZ0NBRFlDSUNBQUtBSWdLQUlJUVFKSERRQUxDeUFBSUFBb0FpQW9BZ0EyQWlBZ0FDZ0NJQ2dDQ0VFQlJ3MEFDd3NnQUNBQk5nSTRJQUFnQWpZQ1BDQUFLQUkwRFFFTEVBd0FDeUFBS0FJMFFRRVFBZ0FMRVFCQlBTQUFJQUduSUFGQ0lJaW5FQmNMVmdFQmZ5QUFRZGdYTmdJQUlBQW9BZ1FpQVNBQVFRaHFSZ1JBSUFGQkFEWUNBQ0FCS0FJVUJFQWdBU2dDRkNBQktBSVFFUUFBQ3lBQlFRQTJBaFFnQVVFQU9nQUlJQUZDQURjQ0dDQUJRU3MyQWhBTElBQUxWUUVDZjBIQXl3QW9BZ0FpQVNBQVFRTnFRWHh4SWdKcUlRQUNRQ0FDUVFGT1FRQWdBQ0FCVFJzTkFEOEFRUkIwSUFCSkJFQWdBQkFaUlEwQkMwSEF5d0FnQURZQ0FDQUJEd3RCaE13QVFUQTJBZ0JCZnd2dkFnRUJmeU1BUVJCcklnRWdBRFlDRENBQklBRW9BZ3cyQWdnZ0FTQUJLQUlJTmdJTUlBQkJJR29RSXlBQVFVQnJFQ01nQUVIZ0FHb1FJeUFBUVlBQmFoQWpJQUJCb0FGcUVDTWdBRUhJQVdvUU1pQUFRZmdCYWhBaklBQkJvQUpxRUNNZ0FFSEFBbW9RTWlBQVFld0NhaEJtSUFCQjhBTnFFR1lqQUVFUWF5SUJJQUJCOUFScU5nSU1JQUVnQVNnQ0REWUNDQ0FCSUFFb0FnZzJBZ3dnQUVHQUJtb1FJeUFBUWFBR2FoQWpJQUJCd0FacUVDTWdBRUhnQm1vUUl5QUFRWUFIYWhBaklBQkJvQWRxRUNNZ0FFSEFCMm9RSXlBQVFlQUhhaEFqSUFCQmdBaHFFQ01nQUVHa0NHb1FJeUFBUWNRSWFoQWpJQUJCNUFocUVESWdBRUdNQ1dvUUl5QUFRYXdKYWhBeUlBQkIxQWxxRURJZ0FFSDhDV29RTWlBQVFhUUthaEFqSUFCQnhBcHFFQ01nQUVIb0Ntb1FsQUlnQUVIWUZXb1FJeUFBUWZnVmFoQWpJQUJCbUJacUVESWdBRUhBRm1vUUl5QUFRZUFXYWhBaklBQkJnQmRxRUNNZ0FFR2dGMm9RSXd1Q0JBRURmeUFDUVlBRVR3UkFJQUFnQVNBQ0VCZ2FJQUFQQ3lBQUlBSnFJUU1DUUNBQUlBRnpRUU54UlFSQUFrQWdBa0VCU0FSQUlBQWhBZ3dCQ3lBQVFRTnhSUVJBSUFBaEFnd0JDeUFBSVFJRFFDQUNJQUV0QUFBNkFBQWdBVUVCYWlFQklBSkJBV29pQWlBRFR3MEJJQUpCQTNFTkFBc0xBa0FnQTBGOGNTSUVRY0FBU1EwQUlBSWdCRUZBYWlJRlN3MEFBMEFnQWlBQktBSUFOZ0lBSUFJZ0FTZ0NCRFlDQkNBQ0lBRW9BZ2cyQWdnZ0FpQUJLQUlNTmdJTUlBSWdBU2dDRURZQ0VDQUNJQUVvQWhRMkFoUWdBaUFCS0FJWU5nSVlJQUlnQVNnQ0hEWUNIQ0FDSUFFb0FpQTJBaUFnQWlBQktBSWtOZ0lrSUFJZ0FTZ0NLRFlDS0NBQ0lBRW9BaXcyQWl3Z0FpQUJLQUl3TmdJd0lBSWdBU2dDTkRZQ05DQUNJQUVvQWpnMkFqZ2dBaUFCS0FJOE5nSThJQUZCUUdzaEFTQUNRVUJySWdJZ0JVME5BQXNMSUFJZ0JFOE5BUU5BSUFJZ0FTZ0NBRFlDQUNBQlFRUnFJUUVnQWtFRWFpSUNJQVJKRFFBTERBRUxJQU5CQkVrRVFDQUFJUUlNQVFzZ0FDQURRUVJySWdSTEJFQWdBQ0VDREFFTElBQWhBZ05BSUFJZ0FTMEFBRG9BQUNBQ0lBRXRBQUU2QUFFZ0FpQUJMUUFDT2dBQ0lBSWdBUzBBQXpvQUF5QUJRUVJxSVFFZ0FrRUVhaUlDSUFSTkRRQUxDeUFDSUFOSkJFQURRQ0FDSUFFdEFBQTZBQUFnQVVFQmFpRUJJQUpCQVdvaUFpQURSdzBBQ3dzZ0FBdURBUUlEZndGK0FrQWdBRUtBZ0lDQUVGUUVRQ0FBSVFVTUFRc0RRQ0FCUVFGcklnRWdBQ0FBUWdxQUlnVkNDbjU5cDBFd2Nqb0FBQ0FBUXYvLy8vK2ZBVlloQWlBRklRQWdBZzBBQ3dzZ0JhY2lBZ1JBQTBBZ0FVRUJheUlCSUFJZ0FrRUtiaUlEUVFwc2EwRXdjam9BQUNBQ1FRbExJUVFnQXlFQ0lBUU5BQXNMSUFFTEJBQWdBQXZBQWdFRmZ3SkFBa0FDUUNBQUtBSUVJQUFvQWdBaUEydEJBblVpQlVFQmFpSUNRWUNBZ0lBRVNRUkFBbjlCQUNBQ0lBQW9BZ2dnQTJzaUEwRUJkU0lFSUFJZ0JFc2JRZi8vLy84RElBTkJBblZCLy8vLy93RkpHeUlDUlEwQUdpQUNRWUNBZ0lBRVR3MENJQUpCQW5RUUx3c2lCQ0FGUVFKMGFpSURJQUVvQWdBaUFUWUNBQ0FCRUEwZ0JDQUNRUUowYWlFRklBTkJCR29oQkNBQUtBSUVJZ0lnQUNnQ0FDSUJSZzBDQTBBZ0EwRUVheUlESUFKQkJHc2lBaWdDQUNJR05nSUFJQVlRRFNBQklBSkhEUUFMSUFBZ0JUWUNDQ0FBS0FJRUlRSWdBQ0FFTmdJRUlBQW9BZ0FoQVNBQUlBTTJBZ0FnQVNBQ1JnMERBMEFnQWtFRWF5SUNLQUlBRUFjZ0FTQUNSdzBBQ3d3REMwSFZ3QUFRV2dBTFFZZ0pFRm9BQ3lBQUlBVTJBZ2dnQUNBRU5nSUVJQUFnQXpZQ0FBc2dBUVJBSUFFUUpnc0wyZ01DQTM4Q2ZDQUFLQUlFUVFGT0JFQURRQUpBQWtBZ0FDZ0NuQUVnQkdvdEFBQkZEUUFnQkVFRGRDSUNJQUVvQWh4cUt3TUFJUVVnQUNnQ3dBZ2dBbW9yQXdBaEJpTUFRUkJySWdNZ0JUa0RDQ0FESUFZNUF3QWdBeXNEQ0NBREt3TUFaVVVOQUNBQktBSWNJQUpxSUFBb0Fsd2dBbW9yQXdBNUF3QU1BUXNDUUNBQUtBSzhBU0FFYWkwQUFFVU5BQ0FFUVFOMElnSWdBU2dDSEdvckF3QWhCU0FBS0FMZ0NDQUNhaXNEQUNFR0l3QkJFR3NpQXlBRk9RTUlJQU1nQmprREFDQURLd01JSUFNckF3Qm1SUTBBSUFFb0Fod2dBbW9nQUNnQ2ZDQUNhaXNEQURrREFBd0JDeUFFUVFOMElnSWdBU2dDSEdvaUF5QURLd01BSUFBb0Fqd2dBbW9yQXdDaU9RTUFBa0FnQUNnQ25BRWdCR290QUFCRkRRQWdBQ2dDWENBQ2Fpc0RBQ0VGSXdCQkVHc2lBeUFCS0FJY0lBSnFLd01BT1FNSUlBTWdCVGtEQUNBREt3TUlJQU1yQXdCbFJRMEFJQUVvQWh3Z0Ftb2dBQ2dDWENBQ2Fpc0RBRGtEQUFzZ0FDZ0N2QUVnQkdvdEFBQkZEUUFnQUNnQ2ZDQUNhaXNEQUNFRkl3QkJFR3NpQXlBQktBSWNJQUpxS3dNQU9RTUlJQU1nQlRrREFDQURLd01JSUFNckF3Qm1SUTBBSUFFb0Fod2dBbW9nQUNnQ2ZDQUNhaXNEQURrREFBc2dCRUVCYWlJRUlBQW9BZ1JJRFFBTEN3dW5DZ0lIZndGOEl3QkJFR3NpQ1NRQVFjQUFJUVlnQWtFQmRDSUhJQVFvQWdCS0JFQWdCQ0FISUFVUUtndEJBQ0VIQWtBZ0FrRUJTQTBBSUFKQkFVWUVRQ01BUVJCcklnSWdBVUVEZENJRElBRkJBblFpQVNBQUtBSWthaWdDQUdvckF3QTVBd2dnQWtRQUFBQUFBQUFBQURrREFDQUNLd01JSUFJckF3QmtJZ2RGRFFFZ0FDZ0NKQ0FCYWlnQ0FDQURhaUFBS0FJa0lBRnFLQUlBSUFOcUt3TUFuemtEQUF3QkN3SkFBa0FDUUNBQ1FjQUFUQVJBSUFKQklFb05BUXdEQ3lBQ1FTQk1EUUlnQ1VIQUFEWUNEQ0FKSUFKQlFHbzJBZ2dNQVFzZ0FrRWdJQWxCREdvZ0NVRUlhaUFGRUQwZ0NTZ0NEQ0VHQ3lBSklBQWdBU0FHSUFNZ0JDQUZFRXdpQWpvQUJ5QUNSUTBCSUFrb0FnZ2lBa0VCVGdSQUlBa29BZ3dpQmlBQmFpRUlBa0FnQXdSQUlBWWdBaUFBSUFFZ0FVRUJRUUJCQVNBQUlBRWdDQ0FGRURjZ0NTZ0NDQ0FKS0FJTUlnSkVBQUFBQUFBQThMOGdBQ0FCSUFFZ0Ftb2lBa0VCUkFBQUFBQUFBUEEvSUFBZ0FpQUNRUUVnQlJBeERBRUxJQUlnQmlBQUlBRWdBVUVBUVFCQkFTQUFJQWdnQVNBRkVEZ2dDU2dDQ0NBSktBSU1JZ0pFQUFBQUFBQUE4TDhnQUNBQklBSnFJZ0lnQVVFQVJBQUFBQUFBQVBBL0lBQWdBaUFDUVFBZ0JSQXhDeUFBSUFrb0Fnd2dBV29nQ1NnQ0NDQURJQVFnQlJCTVJRMENDMEVCSVFjTUFRc2dBa0VCYXlFRklBTkZCRUFnQlNFREEwQWdBVUVEZENJTUlBRWdDR29pQjBFQ2RDSUtJQUFvQWlScUtBSUFhaUlHUVFFZ0JrRUJJQWNnQVdzUUxDRU5BbjhqQUVFUWF5SUdJQWRCQTNRaUN5QUFLQUlrSUFwcUtBSUFhaXNEQUNBTm9TSU5PUU1JSUFaRUFBQUFBQUFBQUFBNUF3QWdCaXNEQ0NBR0t3TUFaUXNFUUNBQUtBSWtJQWRCQW5ScUtBSUFJQWRCQTNScUlBMDVBd0JCQUNFSERBTUxJQUFvQWlRZ0Ntb29BZ0FnQzJvZ0RaOGlEVGtEQUFKQUlBVWdDRXdOQUVRQUFBQUFBQUR3UHlBTm95RU5JQWhGQkVBZ0IwRUJhaUVIUVFBaEJnTkFJQUFvQWlRZ0JpQUhha0VDZEdvb0FnQWdDMm9pQ2lBTklBb3JBd0NpT1FNQUlBWkJBV29pQmlBRFJ3MEFDd3dCQzBFQUlRWWdCQ2dDSEVFQklBQW9BaVFnQ21vb0FnQWdER29nQ0JBbklBSWdDR3NpQ2tFQmF5QUlJQUFnQjBFQmFpSUhJQUZCQUNBRUlBUWdBaEIrSUFwQkFrZ05BQU5BSUFBb0FpUWdCaUFIYWtFQ2RHb29BZ0FnQzJvaUNpQU5JQW9yQXdBZ0JDZ0NIQ0FDSUFacVFRTjBhaXNEQUtHaU9RTUFJQVpCQVdvaUJpQURSdzBBQ3dzZ0EwRUJheUVEUVFFaEJ5QUlRUUZxSWdnZ0FrY05BQXNNQVFzZ0FTQUZhaUVMUVFBaEJnTkFJQUVnQm1vaUEwRURkQ0lISUFGQkFuUWlEQ0FBS0FJa2FpZ0NBR29pQ0NBQUtBSUlJZ29nQ0NBS0lBTWdBV3NRTENFTkFuOGpBRUVRYXlJSUlBTkJBblFpQ2lBQUtBSWthaWdDQUNBSGFpc0RBQ0FOb1NJTk9RTUlJQWhFQUFBQUFBQUFBQUE1QXdBZ0NDc0RDQ0FJS3dNQVpRc0VRQ0FBS0FJa0lBTkJBblJxS0FJQUlBTkJBM1JxSUEwNUF3QkJBQ0VIREFJTElBQW9BaVFnQ21vb0FnQWdCMm9nRFo4aURUa0RBQ0FGSUFaS0JFQUNRQ0FHUlFSQUlBTkJBV29oQXd3QkN5QUVLQUljSUFBb0FpUWdER29vQWdBZ0Iyb2dBQ2dDQ0NBR0VKY0JJQVpCZjNNZ0Ftb2dCaUFBSUFFZ0EwRUJhaUlEUVFFZ0JDQUVJQUlRZmlBQUtBSWtJQXBxS0FJQUlBTkJBM1JxSUFRb0Fod2dBa0VEZEdvZ0N5QURhMEVCYWhDV0FRc2dBQ2dDSkNBS2FpZ0NBQ0FEUVFOMGFrRUJJQXNnQTJ0QkFXcEVBQUFBQUFBQThEOGdEYU1RTkF0QkFTRUhJQVpCQVdvaUJpQUNSdzBBQ3dzZ0NVRVFhaVFBSUFjTGtRTUNBWDhDZkNBQ1FnQTNBd0FnQTBJQU53TUFJQVJDQURjREFBSi9Jd0JCRUdzaUJTQUJPUU1JSUFWRUFBQUFBQUFBQUFBNUF3QWdCU3NEQ0NBRkt3TUFZUXNFUUNBQ1FvQ0FnSUNBZ0lENFB6Y0RBQ0FEUWdBM0F3QWdCQ0FBT1FNQUR3c0NmeU1BUVJCcklnVWdBRGtEQ0NBRlJBQUFBQUFBQUFBQU9RTUFJQVVyQXdnZ0JTc0RBR0VMQkVBZ0FrSUFOd01BSUFOQ2dJQ0FnSUNBZ1BnL053TUFJQVFnQVRrREFBOExBbndDZnlNQVFSQnJJZ1VnQUprNUF3Z2dCU0FCbVRrREFDQUZLd01JSUFVckF3QmtDd1JBSUFDWklRWWdBU0FBb3d3QkN5QUJtU0VHSUFBZ0FhTUxJUWNnQkNBR0lBY2dCNkpFQUFBQUFBQUE4RCtnbjZJaUJqa0RBQ0FDSUFBZ0JxTTVBd0FnQXlBQklBUXJBd0NqT1FNQUl3QkJFR3NpQlNBQW1Ua0RDQ0FGSUFHWk9RTUFBa0FnQlNzRENDQUZLd01BWkVVTkFDTUFRUkJySWdVZ0Fpc0RBRGtEQ0NBRlJBQUFBQUFBQUFBQU9RTUFJQVVyQXdnZ0JTc0RBR05GRFFBZ0FpQUNLd01BbWprREFDQURJQU1yQXdDYU9RTUFJQVFnQkNzREFKbzVBd0FMQ3dNQUFRdEpBUUovSUFBb0FnUWlCVUVJZFNFR0lBQW9BZ0FpQUNBQklBVkJBWEVFZnlBQ0tBSUFJQVpxS0FJQUJTQUdDeUFDYWlBRFFRSWdCVUVDY1JzZ0JDQUFLQUlBS0FJWUVRWUFDNHNCQXdGL0FYNEJmQ0FCUVg5elFSOTJRZkFhSUFJUUlpQUJSUVJBUVFFUEN5QUJJQUFvQWdCTUJIOGdBVUVCVGdSQUlBQW9BaHdoQTBFQUlRQURRQ0FGUkhzVXJrZmhlb1Evb2lBRElBQkJBM1JxS3dNQW9DRUZJQUJCQVdvaUFDQUJSdzBBQ3dzZ0JiMGlCRUlnaUNBRUlBSW9BZ0JCQVVZYlFvQ0F3UDhIZzBLQWdNRC9CMUlGUVFBTEMxMEJBWDhnQUVHb0dUWUNBQ0FBS0FJRUlnRWdBRUVJYWtZRVFDQUJRUUEyQWdnZ0FVSUFOd0lBSUFFb0Fod0VRQ0FCS0FJY0lBRW9BaGdSQUFBTElBRkJBRFlDSENBQlFRQTZBQkFnQVVJQU53SWdJQUZCS3pZQ0dBc2dBQXNSQUNBQUVJOEJJQUJCbUJrMkFnQWdBQXNIQUNBQUtBSUVDeDBBSUFCQ0FEY0NBQ0FBUVFBMkFnZ2dBQ0FCSUFFUVZ4RFNBU0FBQzR3RkFRTi9Ba0FnQXdSQUlBRWdBbkpCZjB3TkFRSkFJQUVnQUNnQ0FFWUVRQ0FBS0FJRUlBSkdEUUVMQW44Q1FBSkFBa0FDUUFKQUlBQW9BZ3dpQkVFQmF3NEVBd0lCQUFRTElBQkJBRFlDSkNBQVFnQTNBZ0FnQUVFQUlBSnJRUU54SUFKcUlnUTJBZ2hCRUNFR0lBQkJKR29NQkFzZ0FFRUFOZ0lrSUFCQ0FEY0NBQ0FBUVFBZ0FtdEJCM0VnQW1vaUJEWUNDRUVJSVFZZ0FFRWthZ3dEQ3lBQVFRQTJBaVFnQUVJQU53SUFJQUJCQUNBQ2EwRVBjU0FDYWlJRU5nSUlRUVFoQmlBQVFTUnFEQUlMSUFCQkFEWUNKQ0FBUWdBM0FnQWdBRUVBSUFKclFUOXhJQUpxSWdRMkFnaEJBU0VHSUFCQkpHb01BUXNnQUVFQU5nSWtJQUJDQURjQ0FDQUFJQUkyQWdnZ0JFRUJSaUVHSUFJaEJDQUFRU1JxQ3lFRklBQkJGR29nQkNBR2JFRUVhaUFCYkVFL2FpQURFRllnQUNBQ05nSUVJQUFnQVRZQ0FDQUFLQUljSVFNQ1FDQUJRUUZJRFFBZ0FrRUJTQTBBSUFNZ0FVRUNkR29pQWtGQWNVRkFheUFDSUFKQlAzRWJJUUlnQUNBQUtBSWNJZ1EyQWlRZ0FDZ0NDQ0VGUVFBaEF3SkFBa0FDUUFKQUFrQWdBQ2dDREVFQmF3NEVBQUVDQXdRTEEwQWdCQ0FEUVFKMGFpQUNOZ0lBSUFJZ0JXb2hBaUFEUVFGcUlnTWdBVWNOQUFzTUJRc2dCVUVDZENFQUEwQWdCQ0FEUVFKMGFpQUNOZ0lBSUFBZ0Ftb2hBaUFEUVFGcUlnTWdBVWNOQUFzTUJBc2dCVUVEZENFQUEwQWdCQ0FEUVFKMGFpQUNOZ0lBSUFBZ0Ftb2hBaUFEUVFGcUlnTWdBVWNOQUFzTUF3c2dCVUVFZENFQUEwQWdCQ0FEUVFKMGFpQUNOZ0lBSUFBZ0Ftb2hBaUFEUVFGcUlnTWdBVWNOQUFzTUFnc0RRQ0FFSUFOQkFuUnFJQUkyQWdBZ0EwRUJhaUlESUFGSERRQUxEQUVMSUFWQkFEWUNBQXNQQ3hBTUFBc2dBMEVEUWY4V0VFSUFDODhCQVFKL0FrQUNRQ0FDQkVBZ0FVRi9UQTBCSUFBb0FnZ0VRQ0FBS0FJSUlBQW9BZ1FSQUFBZ0FFRUFOZ0lNSUFCQkFEWUNDQXNnQVFSQVFkRExBQzBBQUEwRFFkVExBQ2dDQUNJRFFRRk9CRUJCek1zQUtBSUFJQU5PRFFRTElBRkJ3d0JxRUNraUFVVU5BeUFCUVFScUlnSkJRSEZCUUdzZ0FpQUNRVDl4R3lJRFFRUnJJQUUyQWdBTElBQWdBellDQ0NBQUtBSUlJZ0VFUUNBQlFRUnJLQUlBSVFRTElBQkJLellDQkNBQUlBUTJBZ3dQQ3hBTUFBc2dBa0VEUWZnVkVFSUFDeUFDUVFGQndSVVFRZ0FMa0FFQkEzOGdBQ0VCQWtBQ1FDQUFRUU54UlEwQUlBQXRBQUJGQkVCQkFBOExBMEFnQVVFQmFpSUJRUU54UlEwQklBRXRBQUFOQUFzTUFRc0RRQ0FCSWdKQkJHb2hBU0FDS0FJQUlnTkJmM01nQTBHQmdvUUlhM0ZCZ0lHQ2hIaHhSUTBBQ3lBRFFmOEJjVVVFUUNBQ0lBQnJEd3NEUUNBQ0xRQUJJUU1nQWtFQmFpSUJJUUlnQXcwQUN3c2dBU0FBYXd0TEFRSi9JQUFvQWdRaUJrRUlkU0VISUFBb0FnQWlBQ0FCSUFJZ0JrRUJjUVIvSUFNb0FnQWdCMm9vQWdBRklBY0xJQU5xSUFSQkFpQUdRUUp4R3lBRklBQW9BZ0FvQWhRUkNRQUxvd0VBSUFCQkFUb0FOUUpBSUFBb0FnUWdBa2NOQUNBQVFRRTZBRFFnQUNnQ0VDSUNSUVJBSUFCQkFUWUNKQ0FBSUFNMkFoZ2dBQ0FCTmdJUUlBTkJBVWNOQVNBQUtBSXdRUUZIRFFFZ0FFRUJPZ0EyRHdzZ0FTQUNSZ1JBSUFBb0FoZ2lBa0VDUmdSQUlBQWdBellDR0NBRElRSUxJQUFvQWpCQkFVY05BU0FDUVFGSERRRWdBRUVCT2dBMkR3c2dBRUVCT2dBMklBQWdBQ2dDSkVFQmFqWUNKQXNMUEFFRGYwRUlFQVlpQWlJRElnRkJtTUlBTmdJQUlBRkJ4TUlBTmdJQUlBRkJCR29nQUJEUUFTQURRZlRDQURZQ0FDQUNRWlREQUVFV0VBVUFDMTBCQVg4Z0FDZ0NFQ0lEUlFSQUlBQkJBVFlDSkNBQUlBSTJBaGdnQUNBQk5nSVFEd3NDUUNBQklBTkdCRUFnQUNnQ0dFRUNSdzBCSUFBZ0FqWUNHQThMSUFCQkFUb0FOaUFBUVFJMkFoZ2dBQ0FBS0FJa1FRRnFOZ0lrQ3dzVkFDQUFRY1RDQURZQ0FDQUFRUVJxRU00QklBQUxreEVDRUg4QmZpTUFRZEFBYXlJRkpBQWdCVUg0RkRZQ1RDQUZRVGRxSVJNZ0JVRTRhaUVSQWtBRFFBSkFJQTVCQUVnTkFFSC8vLy8vQnlBT2F5QUVTQVJBUVlUTUFFRTlOZ0lBUVg4aERnd0JDeUFFSUE1cUlRNExJQVVvQWt3aUNpRUVBa0FDUUFKQUlBb3RBQUFpQmdSQUEwQUNRQUpBSUFaQi93RnhJZ1pGQkVBZ0JDRUdEQUVMSUFaQkpVY05BU0FFSVFZRFFDQUVMUUFCUVNWSERRRWdCU0FFUVFKcUlnZzJBa3dnQmtFQmFpRUdJQVF0QUFJaENTQUlJUVFnQ1VFbFJnMEFDd3NnQmlBS2F5RUVJQUFFUUNBQUlBb2dCQkFyQ3lBRURRWWdCU2dDVENFRUlBVUNmd0pBSUFVb0Frd3NBQUZCTUd0QkNrOE5BQ0FFTFFBQ1FTUkhEUUFnQkN3QUFVRXdheUVRUVFFaEVpQUVRUU5xREFFTFFYOGhFQ0FFUVFGcUN5SUVOZ0pNUVFBaER3SkFJQVFzQUFBaUMwRWdheUlJUVI5TEJFQWdCQ0VHREFFTElBUWhCa0VCSUFoMElnbEJpZEVFY1VVTkFBTkFJQVVnQkVFQmFpSUdOZ0pNSUFrZ0QzSWhEeUFFTEFBQklndEJJR3NpQ0VFZ1R3MEJJQVloQkVFQklBaDBJZ2xCaWRFRWNRMEFDd3NDUUNBTFFTcEdCRUFnQlFKL0FrQWdCaXdBQVVFd2EwRUtUdzBBSUFVb0Frd2lCQzBBQWtFa1J3MEFJQVFzQUFGQkFuUWdBMnBCd0FGclFRbzJBZ0FnQkN3QUFVRURkQ0FDYWtHQUEyc29BZ0FoREVFQklSSWdCRUVEYWd3QkN5QVNEUVpCQUNFU1FRQWhEQ0FBQkVBZ0FTQUJLQUlBSWdSQkJHbzJBZ0FnQkNnQ0FDRU1DeUFGS0FKTVFRRnFDeUlFTmdKTUlBeEJmMG9OQVVFQUlBeHJJUXdnRDBHQXdBQnlJUThNQVFzZ0JVSE1BR29RYlNJTVFRQklEUVFnQlNnQ1RDRUVDMEYvSVFjQ1FDQUVMUUFBUVM1SERRQWdCQzBBQVVFcVJnUkFBa0FnQkN3QUFrRXdhMEVLVHcwQUlBVW9Ba3dpQkMwQUEwRWtSdzBBSUFRc0FBSkJBblFnQTJwQndBRnJRUW8yQWdBZ0JDd0FBa0VEZENBQ2FrR0FBMnNvQWdBaEJ5QUZJQVJCQkdvaUJEWUNUQXdDQ3lBU0RRVWdBQVIvSUFFZ0FTZ0NBQ0lFUVFScU5nSUFJQVFvQWdBRlFRQUxJUWNnQlNBRktBSk1RUUpxSWdRMkFrd01BUXNnQlNBRVFRRnFOZ0pNSUFWQnpBQnFFRzBoQnlBRktBSk1JUVFMUVFBaEJnTkFJQVloQ1VGL0lRMGdCQ3dBQUVIQkFHdEJPVXNOQ0NBRklBUkJBV29pQ3pZQ1RDQUVMQUFBSVFZZ0N5RUVJQVlnQ1VFNmJHcEJqenhxTFFBQUlnWkJBV3RCQ0VrTkFBc0NRQUpBSUFaQkUwY0VRQ0FHUlEwS0lCQkJBRTRFUUNBRElCQkJBblJxSUFZMkFnQWdCU0FDSUJCQkEzUnFLUU1BTndOQURBSUxJQUJGRFFnZ0JVRkFheUFHSUFFUWJDQUZLQUpNSVFzTUFnc2dFRUYvU2cwSkMwRUFJUVFnQUVVTkJ3c2dEMEgvLzN0eElnZ2dEeUFQUVlEQUFIRWJJUVpCQUNFTlFiZzhJUkFnRVNFUEFrQUNRQUpBQW44Q1FBSkFBa0FDUUFKL0FrQUNRQUpBQWtBQ1FBSkFBa0FnQzBFQmF5d0FBQ0lFUVY5eElBUWdCRUVQY1VFRFJoc2dCQ0FKR3lJRVFkZ0FhdzRoQkJRVUZCUVVGQlFVRGhRUEJnNE9EaFFHRkJRVUZBSUZBeFFVQ1JRQkZCUUVBQXNDUUNBRVFjRUFhdzRIRGhRTEZBNE9EZ0FMSUFSQjB3QkdEUWtNRXdzZ0JTa0RRQ0VVUWJnOERBVUxRUUFoQkFKQUFrQUNRQUpBQWtBQ1FBSkFJQWxCL3dGeERnZ0FBUUlEQkJvRkJob0xJQVVvQWtBZ0RqWUNBQXdaQ3lBRktBSkFJQTQyQWdBTUdBc2dCU2dDUUNBT3JEY0RBQXdYQ3lBRktBSkFJQTQ3QVFBTUZnc2dCU2dDUUNBT09nQUFEQlVMSUFVb0FrQWdEallDQUF3VUN5QUZLQUpBSUE2c053TUFEQk1MSUFkQkNDQUhRUWhMR3lFSElBWkJDSEloQmtINEFDRUVDeUFGS1FOQUlCRWdCRUVnY1JEY0FTRUtJQVpCQ0hGRkRRTWdCU2tEUUZBTkF5QUVRUVIyUWJnOGFpRVFRUUloRFF3REN5QUZLUU5BSUJFUTJ3RWhDaUFHUVFoeFJRMENJQWNnRVNBS2F5SUVRUUZxSUFRZ0IwZ2JJUWNNQWdzZ0JTa0RRQ0lVUW45WEJFQWdCVUlBSUJSOUloUTNBMEJCQVNFTlFiZzhEQUVMSUFaQmdCQnhCRUJCQVNFTlFiazhEQUVMUWJvOFFiZzhJQVpCQVhFaURSc0xJUkFnRkNBUkVFZ2hDZ3NnQmtILy8zdHhJQVlnQjBGL1Noc2hCaUFGS1FOQUlSUUNRQ0FIRFFBZ0ZGQkZEUUJCQUNFSElCRWhDZ3dNQ3lBSElCUlFJQkVnQ210cUlnUWdCQ0FIU0JzaEJ3d0xDeUFGS0FKQUlnUkJ3andnQkJzaUNpQUhFT01CSWdRZ0J5QUthaUFFR3lFUElBZ2hCaUFFSUFwcklBY2dCQnNoQnd3S0N5QUhCRUFnQlNnQ1FBd0NDMEVBSVFRZ0FFRWdJQXhCQUNBR0VEQU1BZ3NnQlVFQU5nSU1JQVVnQlNrRFFENENDQ0FGSUFWQkNHbzJBa0JCZnlFSElBVkJDR29MSVFsQkFDRUVBa0FEUUNBSktBSUFJZ2hGRFFFQ1FDQUZRUVJxSUFnUWJ5SUtRUUJJSWdnTkFDQUtJQWNnQkd0TERRQWdDVUVFYWlFSklBY2dCQ0FLYWlJRVN3MEJEQUlMQzBGL0lRMGdDQTBMQ3lBQVFTQWdEQ0FFSUFZUU1DQUVSUVJBUVFBaEJBd0JDMEVBSVFrZ0JTZ0NRQ0VMQTBBZ0N5Z0NBQ0lJUlEwQklBVkJCR29nQ0JCdklnZ2dDV29pQ1NBRVNnMEJJQUFnQlVFRWFpQUlFQ3NnQzBFRWFpRUxJQVFnQ1VzTkFBc0xJQUJCSUNBTUlBUWdCa0dBd0FCekVEQWdEQ0FFSUFRZ0RFZ2JJUVFNQ0FzZ0FDQUZLd05BSUF3Z0J5QUdJQVJCMlFBUkhBQWhCQXdIQ3lBRklBVXBBMEE4QURkQkFTRUhJQk1oQ2lBSUlRWU1CQXNnQlNBRVFRRnFJZ2cyQWt3Z0JDMEFBU0VHSUFnaEJBd0FDd0FMSUE0aERTQUFEUVFnRWtVTkFrRUJJUVFEUUNBRElBUkJBblJxS0FJQUlnQUVRQ0FDSUFSQkEzUnFJQUFnQVJCc1FRRWhEU0FFUVFGcUlnUkJDa2NOQVF3R0N3dEJBU0VOSUFSQkNrOE5CQU5BSUFNZ0JFRUNkR29vQWdBTkFTQUVRUUZxSWdSQkNrY05BQXNNQkF0QmZ5RU5EQU1MSUFCQklDQU5JQThnQ21zaUNTQUhJQWNnQ1VnYklnaHFJZ3NnRENBTElBeEtHeUlFSUFzZ0JoQXdJQUFnRUNBTkVDc2dBRUV3SUFRZ0N5QUdRWUNBQkhNUU1DQUFRVEFnQ0NBSlFRQVFNQ0FBSUFvZ0NSQXJJQUJCSUNBRUlBc2dCa0dBd0FCekVEQU1BUXNMUVFBaERRc2dCVUhRQUdva0FDQU5DMmtCQW44Q1FDQUFLQUlVSUFBb0FoeE5EUUFnQUVFQVFRQWdBQ2dDSkJFSUFCb2dBQ2dDRkEwQVFYOFBDeUFBS0FJRUlnRWdBQ2dDQ0NJQ1NRUkFJQUFnQVNBQ2E2eEJBU0FBS0FJb0VUUUFHZ3NnQUVFQU5nSWNJQUJDQURjREVDQUFRZ0EzQWdSQkFBdjNDd0lNZndKOElBQW9BdlFCSVFnZ0FDZ0M4QUVoQ1NBQUtBTEVBU0VISUFBb0FzQUJJUVlnQUNnQ0JDSUZRUUZJSWdwRkJFQURRQ0FBS0FLY0FTQURhaTBBQUFSL0lBTkJBM1FpQkNBQUtBS1VBbW9yQXdBaER5QUFLQUpjSUFScUt3TUFJUkFqQUVFUWF5SUVJQTg1QXdnZ0JDQVFPUU1BSUFRckF3Z2dCQ3NEQUdZRlFRRUxRY1l1SUFJUUlpQUFLQUs4QVNBRGFpMEFBQVIvSUFOQkEzUWlCQ0FBS0FLVUFtb3JBd0FoRHlBQUtBSjhJQVJxS3dNQUlSQWpBRUVRYXlJRUlBODVBd2dnQkNBUU9RTUFJQVFyQXdnZ0JDc0RBR1VGUVFFTFFjWXVJQUlRSWlBRFFRRnFJZ01nQlVjTkFBc0xJQUZCQTNRaUFpQUFRY0FLYWlnQ0FHb2dBQ2dDdkFJckF3QTVBd0FnQUVIZ0Ntb29BZ0FnQW1vZ0FDZ0N2QUlyQXdBNUF3QUNRQUpBQWtBQ1FBSkFBa0FnQ2tVRVFFRUFJUU1nQVVFQ2RDRUVBMEFnQTBFRGRDSUNJQUFvQXZnSklBUnFLQUlBYWlBQUtBTGtBaWdDQUNBQ2Fpc0RBQ0FBS0FJOElBSnFLd01Bb2prREFDQURRUUZxSWdNZ0JVY05BQXRCQUNFQ0lBWWdCMm9pQkVFQVRBMEVJQVZCQUV3TkFTQUZRUU4wSVFjTUFnc2dCaUFIYWlJRVFRRklEUUlMUVFBaEF5QUZRUU4wSVFjRFFDQUFLQUtJQ1NBRFFRSjBhaWdDQUNBSGFpc0RBSm9oRHdKQUlBTWdCazRFUUNNQVFSQnJJZ0lnRHprRENDQUNSQUFBQUFBQUFBQUFPUU1BSUFJckF3Z2dBaXNEQUdNTkFRc2dBVUVEZENJQ0lBQW9Bc0FLYWlzREFDRVFJQUFvQXNBS0lBSnFJQkFnQUNnQ3FBa2dBMEVEZEdvckF3QWdENW1pb0RrREFBSkFJQTlFQUFBQUFBQUFBQUJrRFFBZ0QwUUFBQUFBQUFBQUFHTU5BQXNMSUFOQkFXb2lBeUFFUncwQUN3d0NDd05BSUFKQkFuUWlDaUFBS0FLSUNXb29BZ0FpQ3lBSGFpc0RBSm9oRHlBQlFRSjBJZzRnQUNnQzBBbHFLQUlBSVF4QkFDRURBMEFnRHlBTElBTkJBM1FpRFdvckF3QWdEQ0FOYWlzREFLS2dJUThnQTBFQmFpSURJQVZIRFFBTEFrQWdBaUFHVGdSQUl3QkJFR3NpQXlBUE9RTUlJQU5FQUFBQUFBQUFBQUE1QXdBZ0F5c0RDQ0FES3dNQVl3MEJDeUFCUVFOMElnTWdBQ2dDd0FwcUt3TUFJUkFnQUNnQ3dBb2dBMm9nRUNBQ1FRTjBJZ3NnQUNnQ3FBbHFLd01BSUErWm9xQTVBd0FDZjBFQklBOUVBQUFBQUFBQUFBQmtEUUFhUVg4Z0QwUUFBQUFBQUFBQUFHTU5BQnBCQUF1M0lROUJBQ0VEQTBBZ0EwRURkQ0lNSUFBb0F2Z0pJQTVxS0FJQWFpSU5JQTByQXdBZ0FDZ0NxQWtnQzJvckF3QWdENklnQUNnQ2lBa2dDbW9vQWdBZ0RHb3JBd0Npb0RrREFDQURRUUZxSWdNZ0JVY05BQXNMSUFRZ0FrRUJhaUlDUncwQUN3d0JDeUFJSUFscUlnWkJBVWdOQWd3QkMwRUJJUU1nQ0NBSmFpSUdRUUZJRFFFZ0JVRUFUQTBBQTBBZ0FDZ0N2QUlnQXlJQ1FRTjBhaXNEQUNFUEFrQUNRQ0FESUFsTUJFQWpBRUVRYXlJRElBODVBd2dnQTBRQUFBQUFBQUFBQURrREFDQURLd01JSUFNckF3QmlEUUVNQWdzakFFRVFheUlESUE4NUF3Z2dBMFFBQUFBQUFBQUFBRGtEQUNBREt3TUlJQU1yQXdCbERRRUxJQUZCQTNRaUF5QUFLQUxBQ21vckF3QWhFQ0FBS0FMQUNpQURhaUFRSUFBckE5Z0ZJQStab3FBNUF3QUNmMEVCSUE5RUFBQUFBQUFBQUFCa0RRQWFRWDhnRDBRQUFBQUFBQUFBQUdNTkFCcEJBQXUzSVE5QkFDRURBMEFnQTBFRGRDSUVJQUFvQXZnSklBRkJBblJxS0FJQWFpSUlJQWdyQXdBZ0FDc0QyQVVnRDZJZ0FDZ0M1QUlnQWtFQ2RHb29BZ0FnQkdvckF3Q2lJQUFvQWp3Z0JHb3JBd0Npb0RrREFDQURRUUZxSWdNZ0JVY05BQXNMSUFKQkFXb2hBeUFDSUFaSERRQUxEQUVMUVFFaEFnTkFJQUFvQXJ3Q0lBSWlBMEVEZEdvckF3QWhEd0pBQWtBZ0F5QUpUQVJBSXdCQkVHc2lBaUFQT1FNSUlBSkVBQUFBQUFBQUFBQTVBd0FnQWlzRENDQUNLd01BWWcwQkRBSUxJd0JCRUdzaUFpQVBPUU1JSUFKRUFBQUFBQUFBQUFBNUF3QWdBaXNEQ0NBQ0t3TUFaUTBCQ3lBQlFRTjBJZ0lnQUNnQ3dBcHFLd01BSVJBZ0FDZ0N3QW9nQW1vZ0VDQUFLd1BZQlNBUG1hS2dPUU1BQWtBZ0QwUUFBQUFBQUFBQUFHUU5BQ0FQUkFBQUFBQUFBQUFBWXcwQUN3c2dBMEVCYWlFQ0lBTWdCa2NOQUFzTEMva0NBZ2QvQVh3Z0FDZ0NBQ0VHSUFBb0FnUWhDQ0FBS0FJSUlRY2dCRUlBTndNQUlBZEJBVTRFUUNBSVFRRnJJUWtnQmtFRGRDRUtBMEFnQUNnQ01DQUZRUUowYWlnQ0FFRUJJQUVvQWh3Z0NtcEJBU0FKUVFGcUVDd2hEQ0FGUVFOMElnc2dBaWdDSEdvZ0JTQUdTQVI4SUF3Z0FTZ0NIQ0FGUVFOMGFpc0RBS0FGSUF3TElBQW9BbEFnQzJvckF3Q2hJZ3c1QXdBZ0JDQUVLd01BSUF3Z0RFUUFBQUFBQUFEZ1A2S2lvRGtEQUNBRlFRRnFJZ1VnQjBjTkFBc0xJQVpCQVU0RVFFRUFJUVVEUUNBRlFRTjBJZ0VnQXlnQ0hHb2dBaWdDSENBQmFpc0RBRGtEQUNBRlFRRnFJZ1VnQmtjTkFBc0xJQVlnQ0dvaEFTQUlRUUZPQkVBZ0JpRUZBMEFnQXlnQ0hDQUZRUU4wYWtJQU53TUFJQVZCQVdvaUJTQUJTQTBBQ3dzZ0IwRUJUZ1JBSUFGQkFXc2hBVUVBSVFVRFFDQURLQUljSUFaQkEzUnFJQUFvQWpBZ0JVRUNkR29vQWdBZ0FTQUdhMEVCYWlBQ0tBSWNJQVZCQTNScUt3TUFFRUFnQlVFQmFpSUZJQWRIRFFBTEN3czNBQkNyQWtIZ3l3QkJBVFlDQUVIb3l3QVFrd0U1QXdCQjhNc0FFSklCT1FNQVFmakxBQkNSQVRrREFFR0F6QUJCMkFBUkFRQWFDMThCQVg4Z0FFR29HVFlDQUNBQUtBSUVJZ0VnQUVFSWFrWUVRQ0FCUVFBMkFnZ2dBVUlBTndJQUlBRW9BaHdFUUNBQktBSWNJQUVvQWhnUkFBQUxJQUZCQURZQ0hDQUJRUUE2QUJBZ0FVSUFOd0lnSUFGQkt6WUNHQXNnQUJBbUMxUUJBbjhnQUNBQkVJMEJBa0FnQUNnQ0JDSURSUTBBSUFNb0FnQWdBVWNOQUNBQlFRRklEUUJCQUNFQUEwQWdBRUVEZENJRUlBTW9BaHhxSUFJZ0JHb3JBd0E1QXdBZ0FFRUJhaUlBSUFGSERRQUxDd3RJQUNBQVFkZ1hOZ0lBQWtBZ0FRUkFJQUVvQWdSQkEwWU5BUXRCREJBR0lnQkI0QmNRVkJvZ0FFSElGMEV0RUFVQUN5QUFRUUU2QUNnZ0FDQUJOZ0lFSUFCQm1CazJBZ0FMV0FFQmZ5QUFRZGdYTmdJQUlBQW9BZ1FpQVNBQVFRaHFSZ1JBSUFGQkFEWUNBQ0FCS0FJVUJFQWdBU2dDRkNBQktBSVFFUUFBQ3lBQlFRQTJBaFFnQVVFQU9nQUlJQUZDQURjQ0dDQUJRU3MyQWhBTElBQVFKZ3ZpQVFBZ0FFRUFOZ0lrSUFBb0FqZ0VRQ0FBS0FJNElBQW9BalFSQUFBTElBQkJBRFlDT0NBQVFRQTJBZ1FnQUVJQU53SThJQUJCS3pZQ05DQUFRUUE2QUN3Z0FDZ0NHQVJBSUFBb0FoZ2dBQ2dDRkJFQUFBc2dBRUVBTmdJWUlBQkJBRFlDUkNBQVFnQTNBaHdnQUVFck5nSVVJQUJCQURvQURDQUFLQUpZQkVBZ0FDZ0NXQ0FBS0FKVUVRQUFDeUFBUVFBMkFsZ2dBRUVBTmdKY0lBQkJLellDVkNBQVFnQTNBbUFnQUVFQU9nQk1JQUFvQW5nRVFDQUFLQUo0SUFBb0FuUVJBQUFMSUFCQkFEWUNlQ0FBUWdBM0Fud2dBRUVyTmdKMElBQkJBRG9BYkF1aUJRRUNmeU1BUVJCcklnTWtBQ0FBUVFScVFRQkJnQUVRTXhvZ0FRUkFJQUJCQURZQ09DQUFRUUEyQWlRZ0FFSUFOd0k4SUFNZ0FDZ0NPRFlDRENBRElBTW9BZ3cyQWdnZ0F5QURLQUlJTmdJTUlBTkJBRFlDRENBRElBTW9BZ3cyQWdnZ0F5QURLQUlJTmdJTUlBQkJNR29oQkFKQUlBSUVRQ0FBSUFFb0FpQTJBakFnQVNBRU5nSWdEQUVMSUFCQkFEWUNNQXNnQUNnQ09DRUVJQUJCQURZQ0dDQUFRb0NBZ0lBUU53SWtJQUJCS3pZQ05DQUFRUUE2QUN3Z0FFRUFOZ0lFSUFBZ0JEWUNRQ0FBUWdBM0Fod2dBeUFBS0FJWU5nSU1JQU1nQXlnQ0REWUNDQ0FESUFNb0FnZzJBZ3dnQTBFQU5nSU1JQU1nQXlnQ0REWUNDQ0FESUFNb0FnZzJBZ3dnQUVFUWFpRUVBa0FnQWdSQUlBQWdBU2dDSURZQ0VDQUJJQVEyQWlBTUFRc2dBRUVBTmdJUUN5QUFLQUlZSVFRZ0FFRUFOZ0pZSUFCQ2dJQ0FnQ0EzQWdRZ0FFRXJOZ0lVSUFCQkFEWUNSQ0FBUVFBNkFBd2dBQ0FFTmdJZ0lBQkNBRGNDWENBRElBQW9BbGcyQWd3Z0F5QURLQUlNTmdJSUlBTWdBeWdDQ0RZQ0RDQURRUUEyQWd3Z0F5QURLQUlNTmdJSUlBTWdBeWdDQ0RZQ0RDQUFRZEFBYWlFRUFrQWdBZ1JBSUFBZ0FTZ0NJRFlDVUNBQklBUTJBaUFNQVFzZ0FFRUFOZ0pRQ3lBQUtBSllJUVFnQUVFQU5nSjRJQUJDZ0lDQWdEQTNBa1FnQUVFck5nSlVJQUJCQURZQ1pDQUFRUUE2QUV3Z0FDQUVOZ0pnSUFCQ0FEY0NmQ0FESUFBb0FuZzJBZ3dnQXlBREtBSU1OZ0lJSUFNZ0F5Z0NDRFlDRENBRFFRQTJBZ3dnQXlBREtBSU1OZ0lJSUFNZ0F5Z0NDRFlDRENBQVFmQUFhaUVFQWtBZ0FnUkFJQUFnQVNnQ0lEWUNjQ0FCSUFRMkFpQU1BUXNnQUVFQU5nSndDeUFBUW9DQWdJREFBRGNDWkNBQVFTczJBblFnQUNBQUtBSjROZ0tBQVNBQVFRQTZBR3dnQTBFUWFpUUFEd3NRREFBTG93d0JCbjhnQUNBQmFpRUZBa0FDUUNBQUtBSUVJZ0pCQVhFTkFDQUNRUU54UlEwQklBQW9BZ0FpQXlBQmFpRUJJQUFnQTJzaUFFSDh6QUFvQWdCSEJFQkIrTXdBS0FJQUlRSWdBMEgvQVUwRVFDQUFLQUlJSWdRZ0EwRURkaUlEUVFOMFFaRE5BR3BIR2lBRUlBQW9BZ3dpQmtZRVFFSG96QUJCNk13QUtBSUFRWDRnQTNkeE5nSUFEQU1MSUFRZ0JqWUNEQ0FHSUFRMkFnZ01BZ3NnQUNnQ0dDRUhBa0FnQUNBQUtBSU1JZ05IQkVBZ0FpQUFLQUlJSWdKTkJFQWdBaWdDREJvTElBSWdBellDRENBRElBSTJBZ2dNQVFzQ1FDQUFRUlJxSWdJb0FnQWlCQTBBSUFCQkVHb2lBaWdDQUNJRURRQkJBQ0VEREFFTEEwQWdBaUVHSUFRaUEwRVVhaUlDS0FJQUlnUU5BQ0FEUVJCcUlRSWdBeWdDRUNJRURRQUxJQVpCQURZQ0FBc2dCMFVOQVFKQUlBQWdBQ2dDSENJRVFRSjBRWmpQQUdvaUFpZ0NBRVlFUUNBQ0lBTTJBZ0FnQXcwQlFlek1BRUhzekFBb0FnQkJmaUFFZDNFMkFnQU1Bd3NnQjBFUVFSUWdCeWdDRUNBQVJodHFJQU0yQWdBZ0EwVU5BZ3NnQXlBSE5nSVlJQUFvQWhBaUFnUkFJQU1nQWpZQ0VDQUNJQU0yQWhnTElBQW9BaFFpQWtVTkFTQURJQUkyQWhRZ0FpQUROZ0lZREFFTElBVW9BZ1FpQWtFRGNVRURSdzBBUWZETUFDQUJOZ0lBSUFVZ0FrRitjVFlDQkNBQUlBRkJBWEkyQWdRZ0JTQUJOZ0lBRHdzQ1FDQUZLQUlFSWdOQkFuRkZCRUFnQlVHQXpRQW9BZ0JHQkVCQmdNMEFJQUEyQWdCQjlNd0FRZlRNQUNnQ0FDQUJhaUlCTmdJQUlBQWdBVUVCY2pZQ0JDQUFRZnpNQUNnQ0FFY05BMEh3ekFCQkFEWUNBRUg4ekFCQkFEWUNBQThMSUFWQi9Nd0FLQUlBUmdSQVFmek1BQ0FBTmdJQVFmRE1BRUh3ekFBb0FnQWdBV29pQVRZQ0FDQUFJQUZCQVhJMkFnUWdBQ0FCYWlBQk5nSUFEd3RCK013QUtBSUFJUUlnQTBGNGNTQUJhaUVCQWtBZ0EwSC9BVTBFUUNBRktBSUlJZ1FnQTBFRGRpSURRUU4wUVpETkFHcEhHaUFFSUFVb0Fnd2lCa1lFUUVIb3pBQkI2TXdBS0FJQVFYNGdBM2R4TmdJQURBSUxJQVFnQmpZQ0RDQUdJQVEyQWdnTUFRc2dCU2dDR0NFSEFrQWdCU0FGS0FJTUlnTkhCRUFnQWlBRktBSUlJZ0pOQkVBZ0FpZ0NEQm9MSUFJZ0F6WUNEQ0FESUFJMkFnZ01BUXNDUUNBRlFSUnFJZ1FvQWdBaUFnMEFJQVZCRUdvaUJDZ0NBQ0lDRFFCQkFDRUREQUVMQTBBZ0JDRUdJQUlpQTBFVWFpSUVLQUlBSWdJTkFDQURRUkJxSVFRZ0F5Z0NFQ0lDRFFBTElBWkJBRFlDQUFzZ0IwVU5BQUpBSUFVZ0JTZ0NIQ0lFUVFKMFFaalBBR29pQWlnQ0FFWUVRQ0FDSUFNMkFnQWdBdzBCUWV6TUFFSHN6QUFvQWdCQmZpQUVkM0UyQWdBTUFnc2dCMEVRUVJRZ0J5Z0NFQ0FGUmh0cUlBTTJBZ0FnQTBVTkFRc2dBeUFITmdJWUlBVW9BaEFpQWdSQUlBTWdBallDRUNBQ0lBTTJBaGdMSUFVb0FoUWlBa1VOQUNBRElBSTJBaFFnQWlBRE5nSVlDeUFBSUFGQkFYSTJBZ1FnQUNBQmFpQUJOZ0lBSUFCQi9Nd0FLQUlBUncwQlFmRE1BQ0FCTmdJQUR3c2dCU0FEUVg1eE5nSUVJQUFnQVVFQmNqWUNCQ0FBSUFGcUlBRTJBZ0FMSUFGQi93Rk5CRUFnQVVFRGRpSUNRUU4wUVpETkFHb2hBUUovUWVqTUFDZ0NBQ0lEUVFFZ0FuUWlBbkZGQkVCQjZNd0FJQUlnQTNJMkFnQWdBUXdCQ3lBQktBSUlDeUVDSUFFZ0FEWUNDQ0FDSUFBMkFnd2dBQ0FCTmdJTUlBQWdBallDQ0E4TFFSOGhBaUFBUWdBM0FoQWdBVUgvLy84SFRRUkFJQUZCQ0hZaUFpQUNRWUQrUDJwQkVIWkJDSEVpQkhRaUFpQUNRWURnSDJwQkVIWkJCSEVpQTNRaUFpQUNRWUNBRDJwQkVIWkJBbkVpQW5SQkQzWWdBeUFFY2lBQ2Ntc2lBa0VCZENBQklBSkJGV3AyUVFGeGNrRWNhaUVDQ3lBQUlBSTJBaHdnQWtFQ2RFR1l6d0JxSVFZQ1FBSkFRZXpNQUNnQ0FDSUVRUUVnQW5RaUEzRkZCRUJCN013QUlBTWdCSEkyQWdBZ0JpQUFOZ0lBSUFBZ0JqWUNHQXdCQ3lBQlFRQkJHU0FDUVFGMmF5QUNRUjlHRzNRaEFpQUdLQUlBSVFNRFFDQURJZ1FvQWdSQmVIRWdBVVlOQWlBQ1FSMTJJUU1nQWtFQmRDRUNJQVFnQTBFRWNXb2lCa0VRYWlnQ0FDSUREUUFMSUFZZ0FEWUNFQ0FBSUFRMkFoZ0xJQUFnQURZQ0RDQUFJQUEyQWdnUEN5QUVLQUlJSWdFZ0FEWUNEQ0FFSUFBMkFnZ2dBRUVBTmdJWUlBQWdCRFlDRENBQUlBRTJBZ2dMQzBrQUFrQWdBVVVOQUNBQlFkekZBQkE3SWdGRkRRQWdBU2dDQ0NBQUtBSUlRWDl6Y1EwQUlBQW9BZ3dnQVNnQ0RFRUFFQ2hGRFFBZ0FDZ0NFQ0FCS0FJUVFRQVFLQThMUVFBTFVnRUJmeUFBS0FJRUlRUWdBQ2dDQUNJQUlBRUNmMEVBSUFKRkRRQWFJQVJCQ0hVaUFTQUVRUUZ4UlEwQUdpQUNLQUlBSUFGcUtBSUFDeUFDYWlBRFFRSWdCRUVDY1JzZ0FDZ0NBQ2dDSEJFRUFBc1FBQ0FDQkVBZ0FDQUJJQUlRUnhvTEM3d0NBQUpBSUFGQkZFc05BQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFGQkNXc09DZ0FCQWdNRUJRWUhDQWtLQ3lBQ0lBSW9BZ0FpQVVFRWFqWUNBQ0FBSUFFb0FnQTJBZ0FQQ3lBQ0lBSW9BZ0FpQVVFRWFqWUNBQ0FBSUFFMEFnQTNBd0FQQ3lBQ0lBSW9BZ0FpQVVFRWFqWUNBQ0FBSUFFMUFnQTNBd0FQQ3lBQ0lBSW9BZ0JCQjJwQmVIRWlBVUVJYWpZQ0FDQUFJQUVwQXdBM0F3QVBDeUFDSUFJb0FnQWlBVUVFYWpZQ0FDQUFJQUV5QVFBM0F3QVBDeUFDSUFJb0FnQWlBVUVFYWpZQ0FDQUFJQUV6QVFBM0F3QVBDeUFDSUFJb0FnQWlBVUVFYWpZQ0FDQUFJQUV3QUFBM0F3QVBDeUFDSUFJb0FnQWlBVUVFYWpZQ0FDQUFJQUV4QUFBM0F3QVBDeUFDSUFJb0FnQkJCMnBCZUhFaUFVRUlhallDQUNBQUlBRXJBd0E1QXdBUEN5QUFJQUpCMmdBUkF3QUxDMG9CQTM4Z0FDZ0NBQ3dBQUVFd2EwRUtTUVJBQTBBZ0FDZ0NBQ0lCTEFBQUlRTWdBQ0FCUVFGcU5nSUFJQU1nQWtFS2JHcEJNR3NoQWlBQkxBQUJRVEJyUVFwSkRRQUxDeUFDQzM0Q0FYOEJmaUFBdlNJRFFqU0lwMEgvRDNFaUFrSC9EMGNFZkNBQ1JRUkFJQUVnQUVRQUFBQUFBQUFBQUdFRWYwRUFCU0FBUkFBQUFBQUFBUEJEb2lBQkVHNGhBQ0FCS0FJQVFVQnFDellDQUNBQUR3c2dBU0FDUWY0SGF6WUNBQ0FEUXYvLy8vLy8vLytIZ0grRFFvQ0FnSUNBZ0lEd1A0Uy9CU0FBQ3dzU0FDQUFSUVJBUVFBUEN5QUFJQUVRNEFFTGFnRUJmeUFBQkVBZ0FDZ0NURUYvVEFSQUlBQVFYZzhMSUFBUVhnOExRWWpNQUNnQ0FBUkFRWWpNQUNnQ0FCQndJUUVMUWRUTUFDZ0NBQ0lBQkVBRFFDQUFLQUpNR2lBQUtBSVVJQUFvQWh4TEJFQWdBQkJlSUFGeUlRRUxJQUFvQWpnaUFBMEFDd3NnQVFzbkFRRi9Jd0JCRUdzaUFTUUFJQUVnQURZQ0RFR1FPMEVGSUFFb0Fnd1FDU0FCUVJCcUpBQUxKd0VCZnlNQVFSQnJJZ0VrQUNBQklBQTJBZ3hCNkRwQkJDQUJLQUlNRUFrZ0FVRVFhaVFBQ3ljQkFYOGpBRUVRYXlJQkpBQWdBU0FBTmdJTVFjQTZRUU1nQVNnQ0RCQUpJQUZCRUdva0FBc25BUUYvSXdCQkVHc2lBU1FBSUFFZ0FEWUNERUdZT2tFQ0lBRW9BZ3dRQ1NBQlFSQnFKQUFMSndFQmZ5TUFRUkJySWdFa0FDQUJJQUEyQWd4QjhEbEJBU0FCS0FJTUVBa2dBVUVRYWlRQUN5Y0JBWDhqQUVFUWF5SUJKQUFnQVNBQU5nSU1RY2c1UVFBZ0FTZ0NEQkFKSUFGQkVHb2tBQXU4QVFCQnZNWUFRZjB1RUJ4QjFNWUFRWUl2UVFGQkFVRUFFQnNROWdFUTlRRVE5QUVROHdFUThnRVE4UUVROEFFUTd3RVE3Z0VRN1FFUTZ3RkJnRFpCN0M4UUZFSFlOa0g0THhBVVFiQTNRUVJCbVRBUUVVR01PRUVDUWFZd0VCRkI2RGhCQkVHMU1CQVJRWmdVUWNRd0VCb1E2Z0ZCOGpBUWRrR1hNUkIxUWI0eEVIUkIzVEVRYzBHRk1oQnlRYUl5RUhFUTZRRVE2QUZCalRNUWRrR3RNeEIxUWM0ekVIUkI3ek1RYzBHUk5CQnlRYkkwRUhFUTVnRVE1UUVMN3dJQ0FYOEJmQ0FHUWdBM0F3QWdCU0FDSUFnUUpTQUhJQU1nQ0JBbElBTkJBVTRFUUFOQUlBY29BaHdnQ1VFRGRHcENBRGNEQUNBSlFRRnFJZ2tnQTBjTkFBc0xJQU5CQVdzaENDQUNRUUZPQkVCQkFDRUpBMEFnQnlnQ0hDQUFLQUlrSUFsQkFuUnFLQUlBSUFoQkFXb2dCQ2dDSENBSlFRTjBhaXNEQUJCQUlBbEJBV29pQ1NBQ1J3MEFDd3NnQmtJQU53TUFBa0FnQTBFQlNBMEFRUUFoQ1FOQUlBWWdDaUFKUVFOMElnUWdCeWdDSEdvckF3QWlDaUFLb2tRQUFBQUFBQURnUDZJZ0FTZ0NIQ0FFYWlzREFLT2dJZ281QXdBZ0NVRUJhaUlKSUFOSERRQUxJQU5CQVVnTkFFRUFJUWtEUUNBSlFRTjBJZ1FnQnlnQ0hHb2lCaUFHS3dNQUlBRW9BaHdnQkdvckF3Q2pPUU1BSUFsQkFXb2lDU0FEUncwQUN3c2dBa0VCVGdSQVFRQWhDUU5BSUFBb0FpUWdDVUVDZEdvb0FnQkJBU0FIS0FJY1FRRWdDRUVCYWhBc0lRb2dCU2dDSENBSlFRTjBhaUFLT1FNQUlBbEJBV29pQ1NBQ1J3MEFDd3NMNmdvQkJIOGpBRUhnQUdzaUJTUUFJQVVnQkNnQ0lEWUNVQ0FGUVFBMkFsUWdCVUVDTmdKWUlBUWdCVUhRQUdvMkFpQWdCVUlBTndOSUlBVkJRR3RDQURjREFDQUZRZ0EzQXpnZ0JVSUFOd013SUFWQ0FEY0RFQ0FGUWdBM0F4Z2dCVUlBTndNZ0lBVkNBRGNES0NBRlFnQTNBd2dnQlVFb2FpQUVRUUVRTGlBRlFRaHFRUUlnQkVFQkVDUWdBMElBTndQWUJTQURRcHpYaExXNGs2SDdQRGNEeUFVZ0EwS0FnSUNBZ0lDQTlEODNBOEFGSUFOQ3UvdmV6djJiMyswOU53TzRCU0FEUXJ2NzNzNzltOS90UFRjRHNBVWdBMEthcytiTW1iUG01RDgzQTZnRklBTkNnSUNBZ0lDQXdLekFBRGNEK0FVZ0EwS0FnSUNBZ0lEQXBNQUFOd1B3QlNBRFFRZzJBdXdGSUFOQ3NvQ0FnTUFDTndMa0JTQURRcHF6NXN5WnMrYmNQemNEb0FVZ0EwS0FnSUNBZ0lDQThEODNBNWdGSUFOQ21yUG16Sm16NXVRL053T1FCU0FEUVFVZ0FFRUNiU0lHSUFaQkJVZ2JJZ1kyQXVBRklBTWdBRUVCZEVFQmNpSUlJQVpCQVdvaUJpQUdJQWhJR3lJR05nS0lCU0FESUFJNUF4Z2dBeUFBTmdJRUlBTWdCaUFES0FMZ0JXMUJCR28yQXRBRklBTkJRR3NnQUNBRUVDb2dBMEdBQVdvZ0FDQUVFQ29nQTBIZ0FHb2dBQ0FFRUNvZ0EwR2dBV29nQUNBRUVDb2dBMEVnYWlBQUlBUVFLaUFEUVlBR2FpQUFJQVFRS2lBRFFhQUdhaUFBSUFRUUtpQURRY0FHYWlBQUlBUVFLaUFEUVlBSGFpQUFJQVFRS2lBRFFmZ0JhaUFBSUFRUUtpQUFRUUZPQkVBRFFDQUhRUU4wSWdZZ0F5Z0NYR29nQkNzREdEa0RBQ0FES0FLY0FTQUhha0VBT2dBQUlBTW9BbndnQm1vZ0JDc0RFRGtEQUNBREtBSzhBU0FIYWtFQU9nQUFJQU1vQWp3Z0JtcENnSUNBZ0lDQWdQZy9Od01BSUFNb0Fwd0dJQVpxSUFFb0Fod2dCbW9yQXdBNUF3QWdBeWdDdkFZZ0Jtb2dBU2dDSENBR2Fpc0RBRGtEQUNBSFFRRnFJZ2NnQUVjTkFBc0xJQU1vQWdRaEFFRUJRZjBuSUFRUUlrRUJRWTBvSUFRUUlpQUZLQUlvUVg5elFSOTJRYVVvSUFRUUlpQUZLQUlJUVg5elFSOTJRYnNvSUFRUUlpQUZRU2hxUVFBZ0FFRUJhaUFFRUlFQlFkUW9JQVFRSWlBRFFnQTNBOEFCUVFGQmd5a2dCQkFpUVFGQmx5a2dCQkFpSUFOQ0FEY0Q4QUVnQTBHZ0FtcEJBU0FFRUNvZ0EwSEFBbW9nQXlnQzhBRWdBeWdDOUFGcVFRRnFJQU1vQWdRZ0JCQlZBbjRnQkNnQ0FCcENBQXRDZ0lEQS93ZURRb0NBd1A4SFVrR3JLU0FFRUNJQ2Z5TUFRUkJySWdCRUFBQUFBQUFBQUFBNUF3Z2dBRVFBQUFBQUFBQUFBRGtEQUNBQUt3TUlJQUFyQXdCbUMwSFRLU0FFRUNKQkFVSHZLU0FFRUNJakFFRVFheUlBUkFBQUFBQUFBQUFBT1FNSUlBQkVBQUFBQUFBQUFBQTVBd0FnQUNzRENDQUFLd01BWVNFQUlBTkJBRG9BRkNBRFFRQTJBaEFnQTBTTjdiV2c5OGF3UGtRQUFBQUFBQUFBQUNBQUd6a0RDRUtacytiOUEwS2FzK2JNbWJQbTNEOGdCQ2dDQUVFQlJodENnSURBL3dlRFFvQ0F3UDhIVWtHRUt5QUVFQ0lDZnlNQVFSQnJJZ0JFbXBtWm1abVp1VDg1QXdnZ0FFUUFBQUFBQUFBQUFEa0RBQ0FBS3dNSUlBQXJBd0JrQzBHcUt5QUVFQ0pDZ0lDOWhBUkNnSUNBZ0lDQTBNZkFBQ0FFS0FJQVFRRkdHMEtBZ01EL0I0TkNnSURBL3dkU1FjVXJJQVFRSWdKL0l3QkJFR3NpQUVRQUFBQUFBRUNQUURrRENDQUFSQUFBQUFBQUFBQUFPUU1BSUFBckF3Z2dBQ3NEQUdZTFFld3JJQVFRSWlBRFFwcXo1c3lacytiY1B6Y0RnQVVnQTBLQWdJQ0FnSURReDhBQU53UFlCU0FEUVFBMkFnQWdBeWdDQkNJQUlBRW9BZ0JNUWFVc0lBUVFJaUFCSUFBZ0JCQlFRY01zSUFRUUlpQURLQUtjQmtFQklBRW9BaHdnQUJBbklBTkI4QUpxUVFVZ0JCQXFJQU5Cc0FOcVFRTWdCQkFxSUFOQmZ6WUM3QUlnQTBFQU9nRHFBaUFEUVFBN0FlZ0NJQVFRb1FFZ0JVSGdBR29rQUF0QkFRSi9JQUJCOENFMkFnQWdBQ2dDQkNJQ0JFQWpBRUVRYXlJQklBSTJBZ3dnQVNBQktBSU1OZ0lJSUFFZ0FTZ0NDRFlDRENBQUtBSUVFRUVMSUFBUUpncy9BUUovSUFCQjhDRTJBZ0FnQUNnQ0JDSUNCRUFqQUVFUWF5SUJJQUkyQWd3Z0FTQUJLQUlNTmdJSUlBRWdBU2dDQ0RZQ0RDQUFLQUlFRUVFTElBQUxSUUVCZnlBQVFlQWhOZ0lBSUFCQitBQnFFRVFhSUFCQnhBQnFFRkVhSUFCQkdHb1FSQm9nQUVIUUlUWUNBQ0FBS0FJRUlnRUVRQ0FCRUVZZ0FDZ0NCQkJCQ3lBQUM4WUNBZ2QvQVh3akFFRVFheUlLSkFBZ0FpQUJJQUVnQWtvYklnMUJBVTRFUUNBQ1FRRnJJUXdEUUNBRUtBSWNRUWhxUVFFZ0IwRURkQ0lKSUFkQkFuUWlDQ0FBS0FJa2FpZ0NBR29nQWlBSGF5SUxFQ2NnQkNBTElBcEJDR29RbkFJZ0JTZ0NIQ0FKYWlBS0t3TUlPUU1BSUFBb0FpUWdDR29vQWdBZ0NXcEJBU0FFS0FJY1FRaHFJQXdnQjJ0QkFXb1FKeUFFS0FJY1FvQ0FnSUNBZ0lENFB6Y0RDQ0FDSUFkTUJIOGdCMEVCYWdVakFFRVFheUlJSUFVb0Fod2dDV29yQXdBaURqa0RDQ0FJUkFBQUFBQUFBQUFBT1FNQUlBZ3JBd2dnQ0NzREFHRWhDQUpBSUFkQkFXb2lDU0FCVGcwQUlBZ05BQ0FESUFkQmYzTWdBV29pQ0NBR0VDVWdDQ0FNSUFkclFRRnFJZ3NnQUNBSklBY2dCQ0FERUo0Q0lBZ2dDeUFBSUFrZ0J5QU9taUFESUFRUW53SUxJQWtMSWdjZ0RVY05BQXNMSUFwQkVHb2tBQXZRQWdFQmZBSkFJQUJGRFFBZ0FVVUVRQ0FBUVFGSURRRkJBQ0VGQTBBZ0J5Z0NIQ0FGSUFocVFRTjBha0lBTndNQUlBVkJBV29pQlNBQVJ3MEFDd3dCQ3dKQUlBQkJDVWdOQUNBQlFRbElEUUFMQWtBQ1FDQUZEZ0lCQUFJTElBQkJBVTRFUUVFQUlRVURRQ0FIS0FJY0lBVWdDR3BCQTNScVFnQTNBd0FnQlVFQmFpSUZJQUJIRFFBTEN5QUJRUUZJRFFFZ0FDQUlha0VCYXlFQVFRQWhCUU5BSUFjb0Fod2dDRUVEZEdvZ0FpZ0NKQ0FESUFWcVFRSjBhaWdDQUNBRVFRTjBhaUFBSUFoclFRRnFJQVlvQWh3Z0JVRURkR29yQXdBUVFDQUZRUUZxSWdVZ0FVY05BQXNNQVFzZ0FFRUJTQTBBSUFFZ0JHcEJBV3NoQVVFQUlRVURRQ0FDS0FJa0lBTWdCV3BCQW5ScUtBSUFJQVJCQTNScVFRRWdCaWdDSEVFQklBRWdCR3RCQVdvUUxDRUpJQWNvQWh3Z0JTQUlha0VEZEdvZ0NUa0RBQ0FGUVFGcUlnVWdBRWNOQUFzTEM2MEJBUUYvSUFBb0FnaEJtS1NwaXdaR1FjSWRJQUVRSWlBQUlBQW9BZ0FpQVVHa293TnRJZ0pCM054OGJDQUJha0hPdUFKc0lBSkJ6YUIvYkdvaUFVR3IvLy8vQjJvZ0FTQUJRUUJJR3lJQk5nSUFJQUFnQUNnQ0JDSUFRYWFjQTIwaUFrSGE0M3hzSUFCcVFmUzlBbXdnQWtHeFlteHFJZ0JCaC83Ly93ZHFJQUFnQUVFQVNCc2lBRFlDQkNBQklBQnJJZ0JCcXYvLy93ZHFJQUFnQUVFQlNCdTNSQUFBd09yLy85OUJvd3VIQVFFQmZ3Si9Jd0JCRUdzaUF5QUJPUU1JSUFORUFBQUFBQUFBOEQ4NUF3QWdBeXNEQ0NBREt3TUFaZ3NFUUNBQUlBR2pJZ0FnQWdKL0l3QkJFR3NpQXlBQ09RTUlJQU1nQURrREFDQURLd01JSUFNckF3QmtDeHNQQ3lBQUlBR2pJQUlDZnlNQVFSQnJJZ01nQURrRENDQURJQUVnQXFJNUF3QWdBeXNEQ0NBREt3TUFZd3NiQzhNQkFnTi9BWDRnQWtGL2MwRWZka0diR3lBREVDSWdBVUYvYzBFZmRrSEdHeUFERUNKQkFTRUVBa0FnQVVVTkFDQUNSUTBBUVFBaEJDQUFLQUlBSUFGSURRQWdBQ2dDQkNBQ1NBMEFRUUVoQkNBQlFRRklEUUFnQWtFQlNBMEFBMEJCQUNFRVFRQWhCUU5BSUFBb0FpUWdCa0VDZEdvb0FnQWdCVUVEZEdvckF3QzlJZ2RDSUlnZ0J5QURLQUlBUVFGR0cwS0FnTUQvQjROQ2dJREEvd2RSRFFJZ0JVRUJhaUlGSUFKSERRQUxRUUVoQkNBR1FRRnFJZ1lnQVVjTkFBc0xJQVFMVkFFQmZ3SkFJQUJGRFFBZ0FVVU5BQ0FBSUFFZ0FpZ0NKQ0FEUVFKMGFpZ0NBQ0FFUVFOMGFpQUNLQUlJSUFVZ0JpQUhJQWdvQWlRZ0NVRUNkR29vQWdBZ0NrRURkR29nQ0NnQ0NCQ0hBU0VMQ3lBTEMxUUJBWDhDUUNBQVJRMEFJQUZGRFFBZ0FDQUJJQUlvQWlRZ0EwRUNkR29vQWdBZ0JFRURkR29nQWlnQ0NDQUZJQVlnQnlBSUtBSWtJQWxCQW5ScUtBSUFJQXBCQTNScUlBZ29BZ2dRaUFFaEN3c2dDd3VFQVFFQmZ3SkFJQUJGRFFBZ0FVVU5BQ0FDUlEwQUlBTkVBQUFBQUFBQUFBQmhEUUFnQUNBQklBSWdBeUFFS0FJa0lBVkJBblJxS0FJQUlBWkJBM1JxSUFRb0FnZ2dCeUFJS0FJa0lBbEJBblJxS0FJQUlBcEJBM1JxSUFnb0FnZ2dDeUFNSUEwb0FpUWdEa0VDZEdvb0FnQWdEMEVEZEdvZ0RTZ0NDQkNKQVNFUUN5QVFDODRFQWdwL0Fud2dBVUVDYlNFTElBQkJBbTBoQ2dKQUlBQkJBVWdnQVVFQlNISWdCRVFBQUFBQUFBQUFBR0Z5SWhBTkFDQUFRUUpPQkVBZ0EwRUJkQ0VISUFJZ0EwRURkR29oQ1NBQlFRRnhJUXdDUUNBQlFRSk9CRUFnQjBFRGRDRU9BMEFnQlNzRENDQUVvaUVSSUFVckF3QWdCS0loRWtFQUlROGdCaUVESUFJaEJ5QUpJUWdEUUNBSElBY3JBd0FnRWlBREt3TUFvcUE1QXdBZ0J5QUhLd01JSUJJZ0F5c0RDS0tnT1FNSUlBZ2dDQ3NEQUNBUklBTXJBd0Npb0RrREFDQUlJQWdyQXdnZ0VTQURLd01Jb3FBNUF3Z2dBMEVRYWlFRElBaEJFR29oQ0NBSFFSQnFJUWNnRDBFQmFpSVBJQXRIRFFBTElBd0VRQ0FISUFjckF3QWdFaUFES3dNQW9xQTVBd0FnQ0NBSUt3TUFJQkVnQXlzREFLS2dPUU1BQ3lBRlFSQnFJUVVnQ1NBT2FpRUpJQUlnRG1vaEFpQU5RUUZxSWcwZ0NrY05BQXNNQVFzZ0RBUkFRUUFoQXlBSFFRTjBJUWNEUUNBRkt3TUlJUkVnQWlBQ0t3TUFJQVVyQXdBZ0JLSWdCaXNEQUtLZ09RTUFJQWtnQ1NzREFDQVJJQVNpSUFZckF3Q2lvRGtEQUNBRlFSQnFJUVVnQnlBSmFpRUpJQUlnQjJvaEFpQURRUUZxSWdNZ0NrY05BQXNNQVFzZ0JTQUtRUVIwYWlFRklBSWdBeUFLYkVFRWRHb2hBZ3NnQUVFQmNVVU5BUXNnQlNzREFDQUVvaUVFSUFGQkFrNEVRRUVBSVFNRFFDQUNJQUlyQXdBZ0JDQUdLd01Bb3FBNUF3QWdBaUFDS3dNSUlBUWdCaXNEQ0tLZ09RTUlJQVpCRUdvaEJpQUNRUkJxSVFJZ0EwRUJhaUlESUF0SERRQUxDeUFCUVFGeFJRMEFJQUlnQWlzREFDQUVJQVlyQXdDaW9Ea0RBQXNnRUVFQmN3dW9EUUVIZnlNQVFZQ0NBV3NpRFNRQUFrQWdBRUVnU2cwQUlBRkJJRW9OQUNBQVJRUkFRUUVoQ2d3QkN3SkFBa0FDUUFKQVFRQWdBU0FDUkFBQUFBQUFBQUFBWVJzaUQwRUJTQTBBSUFWRkJFQWdBRUVBVEFSQVFRQkJBQ0FBYTBFQmRtc2hCUXdGQ3lBUFFRRnhJUUVnRDBFQ1RnUkFJQTlCQVhZaEVDQU5RWURCQUdvaEN5QUJSUVJBSUFSQkEzUWhCQU5BUVFBaEJTQUxJUW9nQXlFQkEwQWdDaUFCS3dNQU9RTUFJQW9nQVNzRENEa0RDQ0FCUVJCcUlRRWdDa0VRYWlFS0lBVkJBV29pQlNBUVJ3MEFDeUFMUVlBQ2FpRUxJQU1nQkdvaEF5QU1RUUZxSWd3Z0FFY05BQXNNQXdzZ0JFRURkQ0VFQTBCQkFDRUZJQXNoQ2lBRElRRURRQ0FLSUFFckF3QTVBd0FnQ2lBQkt3TUlPUU1JSUFGQkVHb2hBU0FLUVJCcUlRb2dCVUVCYWlJRklCQkhEUUFMSUFvZ0FTc0RBRGtEQUNBTFFZQUNhaUVMSUFNZ0JHb2hBeUFNUVFGcUlnd2dBRWNOQUFzTUFnc2dBVVVOQWtFQUlRRWdEVUdBd1FCcUlRb2dCRUVEZENFRUEwQWdDaUFES3dNQU9RTUFJQXBCZ0FKcUlRb2dBeUFFYWlFRElBRkJBV29pQVNBQVJ3MEFDd3dCQ3lBQVFRRnhJUUVnQUVFQ2JTRVFJQUJCQWs0RVFDQU5RWURCQUdvaEN5QUJSUVJBSUFSQkEzUWhCQU5BUVFBaEJTQUxJUW9nQXlFQkEwQWdDaUFCS3dNQU9RTUFJQW9nQVNzRENEa0RnQUlnQVVFUWFpRUJJQXBCZ0FScUlRb2dCVUVCYWlJRklCQkhEUUFMSUF0QkNHb2hDeUFESUFScUlRTWdERUVCYWlJTUlBOUhEUUFMREFJTElBUkJBM1FoQkFOQVFRQWhCU0FMSVFvZ0F5RUJBMEFnQ2lBQkt3TUFPUU1BSUFvZ0FTc0RDRGtEZ0FJZ0FVRVFhaUVCSUFwQmdBUnFJUW9nQlVFQmFpSUZJQkJIRFFBTElBb2dBU3NEQURrREFDQUxRUWhxSVFzZ0F5QUVhaUVESUF4QkFXb2lEQ0FQUncwQUN3d0JDeUFCUlEwQVFRQWhBU0FOUVlEQkFHb2hDaUFFUVFOMElRUURRQ0FLSUFNckF3QTVBd0FnQ2tFSWFpRUtJQU1nQkdvaEF5QUJRUUZxSWdFZ0QwY05BQXNMSUFCQkFtMGhCVUVBSVFzZ0FFRUJTQTBDREFFTElBQkJBWFloQlFzZ0FFRUJjU0VCQWtBZ0FFRUNUZ1JBSUEwaEF5QUJSUVJBSUFoQkEzUWhEaUFISVF3RFFFRUFJUVFnQXlFS0lBd2hBUU5BSUFvZ0FTc0RBRGtEQUNBS0lBRXJBd2c1QXdnZ0FVRVFhaUVCSUFwQkVHb2hDaUFFUVFGcUlnUWdCVWNOQUFzZ0EwR0FBbW9oQXlBTUlBNXFJUXdnQzBFQmFpSUxJQUJIRFFBTERBSUxJQWhCQTNRaERpQUhJUXdEUUVFQUlRUWdBeUVLSUF3aEFRTkFJQW9nQVNzREFEa0RBQ0FLSUFFckF3ZzVBd2dnQVVFUWFpRUJJQXBCRUdvaENpQUVRUUZxSWdRZ0JVY05BQXNnQ2lBQkt3TUFPUU1BSUFOQmdBSnFJUU1nRENBT2FpRU1JQXRCQVdvaUN5QUFSdzBBQ3d3QkN5QUJSUTBBUVFBaEJDQU5JUW9nQ0VFRGRDRURJQWNoQVFOQUlBb2dBU3NEQURrREFDQUtRWUFDYWlFS0lBRWdBMm9oQVNBRVFRRnFJZ1FnQUVjTkFBc0xJQUJCQUVvaERrRUJJUXNnQmtRQUFBQUFBQUFBQUdJTkFDQUFRUUZJRFFCQkFDRUtJQTBoQVNBSkJFQURRQ0FBSUFwcklnTkJBVTRFUUNBQklBcEJBM1JxUVFBZ0EwRURkQkF6R2dzZ0FVR0FBbW9oQVNBS1FRRnFJZ29nQUVjTkFBd0NDd0FMQTBBZ0FVRUFJQXBCQTNSQkNHb1FNMEdBQW1vaEFTQUtRUUZxSWdvZ0FFY05BQXNMQWtBZ0NVVUVRQ0FPUlEwQlFRQWhDaUFOUVlEQkFHb2hBU0FOSVFRRFFDQUtRUUZxSWdvZ0R5QU5RWURCQUdvZ0FTQUVRUUVnQWlBR0VENGdCRUdBQW1vaEJDQUJRWUFDYWlFQklBQWdDa2NOQUFzTUFRc2dEa1VOQUVFQUlRb2dEVUdBd1FCcUlRRWdEU0VFQTBBZ0FDQUtheUFQSUFFZ0FTQUVJQXBCQTNScVFRRWdBaUFHRUQ0Z0JFR0FBbW9oQkNBQlFZQUNhaUVCSUFwQkFXb2lDaUFBUncwQUN3dEJBU0VLSUF0RkRRQWdBRUVCY1NFQklBQkJBazRFUUVFQUlRa2dEU0VESUFGRkJFQWdDRUVEZENFSUEwQkJBQ0VFSUFjaENpQURJUUVEUUNBS0lBRXJBd0E1QXdBZ0NpQUJLd01JT1FNSUlBRkJFR29oQVNBS1FSQnFJUW9nQkVFQmFpSUVJQVZIRFFBTElBTkJnQUpxSVFNZ0J5QUlhaUVIUVFFaENpQUpRUUZxSWdrZ0FFY05BQXNNQWdzZ0NFRURkQ0VJQTBCQkFDRUVJQWNoQ2lBRElRRURRQ0FLSUFFckF3QTVBd0FnQ2lBQkt3TUlPUU1JSUFGQkVHb2hBU0FLUVJCcUlRb2dCRUVCYWlJRUlBVkhEUUFMSUFvZ0FTc0RBRGtEQUNBRFFZQUNhaUVESUFjZ0NHb2hCMEVCSVFvZ0NVRUJhaUlKSUFCSERRQUxEQUVMSUFGRkRRQkJBQ0VGSUEwaEFTQUlRUU4wSVFNRFFDQUhJQUVyQXdBNUF3QWdBVUdBQW1vaEFTQURJQWRxSVFjZ0JVRUJhaUlGSUFCSERRQUxDeUFOUVlDQ0FXb2tBQ0FLQzZVUUFnaC9BWHdqQUVHQWhRRnJJZzBrQUFKQUlBQkJJRW9OQUNBQlFTQktEUUFnQUVFQ2JTRVBBa0FDUUFKQUFuOENRQUpBSUFaRkJFQWdBRUVCU0EwQ0lBQkJBVVlOQkNBTlFZREVBR29oQ3lBQVFRRnhSUVJBSUFOQkEzUWhEZ05BUVFBaENpQUxJUU1nQWlFSkEwQWdBeUFKS3dNQU9RTUFJQU1nQ1NzRENEa0RDQ0FKUVJCcUlRa2dBMEVRYWlFRElBcEJBV29pQ2lBUFJ3MEFDeUFMUVlBQ2FpRUxJQUlnRG1vaEFpQU1RUUZxSWd3Z0FFY05BQXNNQWdzZ0EwRURkQ0VPQTBCQkFDRUtJQXNoQXlBQ0lRa0RRQ0FESUFrckF3QTVBd0FnQXlBSkt3TUlPUU1JSUFsQkVHb2hDU0FEUVJCcUlRTWdDa0VCYWlJS0lBOUhEUUFMSUFNZ0NTc0RBRGtEQUNBTFFZQUNhaUVMSUFJZ0Rtb2hBaUFNUVFGcUlnd2dBRWNOQUFzTUFRc2dBRUVCU0EwQklBQkJBVVlOQXlBTlFZREVBR29oQ3lBQVFRRnhSUVJBSUFOQkEzUWhEZ05BUVFBaENpQUxJUU1nQWlFSkEwQWdBeUFKS3dNQU9RTUFJQU1nQ1NzRENEa0RnQUlnQ1VFUWFpRUpJQU5CZ0FScUlRTWdDa0VCYWlJS0lBOUhEUUFMSUF0QkNHb2hDeUFDSUE1cUlRSWdERUVCYWlJTUlBQkhEUUFMREFFTElBTkJBM1FoRGdOQVFRQWhDaUFMSVFNZ0FpRUpBMEFnQXlBSkt3TUFPUU1BSUFNZ0NTc0RDRGtEZ0FJZ0NVRVFhaUVKSUFOQmdBUnFJUU1nQ2tFQmFpSUtJQTlIRFFBTElBTWdDU3NEQURrREFDQUxRUWhxSVFzZ0FpQU9haUVDSUF4QkFXb2lEQ0FBUncwQUN3c2dBVUVDYlNJUElBQkJBVWdOQVJvTUF3c2dBVUVDYlFzaEQwRUFJUXBCQUNFT0RBSUxJQTBnQWlzREFEa0RnRVFnQVVFQ2JTRVBDeUFCUVFGeElRTUNRQ0FCUVFKT0JFQkJBQ0VMSUExQmdBTnFJUUlnQTBVRVFDQUlRUU4wSVE0Z0J5RU1BMEJCQUNFS0lBSWhBeUFNSVFrRFFDQURJQWtyQXdBNUF3QWdBeUFKS3dNSU9RT0FBaUFKUVJCcUlRa2dBMEdBQkdvaEF5QUtRUUZxSWdvZ0QwY05BQXNnQWtFSWFpRUNJQXdnRG1vaERDQUxRUUZxSWdzZ0FFY05BQXNNQWdzZ0NFRURkQ0VPSUFjaERBTkFRUUFoQ2lBQ0lRTWdEQ0VKQTBBZ0F5QUpLd01BT1FNQUlBTWdDU3NEQ0RrRGdBSWdDVUVRYWlFSklBTkJnQVJxSVFNZ0NrRUJhaUlLSUE5SERRQUxJQU1nQ1NzREFEa0RBQ0FDUVFocUlRSWdEQ0FPYWlFTUlBdEJBV29pQ3lBQVJ3MEFDd3dCQ3lBRFJRMEFRUUFoQ2lBTlFZQURhaUVESUFoQkEzUWhBaUFISVFrRFFDQURJQWtyQXdBNUF3QWdBMEVJYWlFRElBSWdDV29oQ1NBS1FRRnFJZ29nQUVjTkFBc0xRUUFoQ1NBQVFRQktJUXBCQVNFT0lBQkJBVWdOQUNBRlJRMEFJQTFCZ01RQWFpRURBMEFnQTBLQWdJQ0FnSUNBK0Q4M0F3QWdBMEdJQW1vaEF5QUpRUUZxSWdrZ0FFY05BQXNMQWtBQ1FDQUVJQVpGUndSQUlBb0VRRUVBSVFJZ0RVR0F4QUJxSWd3aEN3TkFSQUFBQUFBQUFQQS9JQXdyQXdDaklSRWdEU0VESUFzaENTQUNRUUpQQkVBZ0FrRUJkaUVLQTBBZ0F5QUpLd01BT1FNQUlBTWdDU3NEQ0RrRENDQURRUkJxSVFNZ0NVRVFhaUVKSUFwQkFXc2lDZzBBQ3dzZ0FrRUJjUVJBSUFNZ0NTc0RBRGtEQUFzZ0FTQUNJQTFCZ0FOcUlBMGdEVUdBQTJvZ0FrRURkR3BCSUNBUm1pQVJFRDRnQzBHQUFtb2hDeUFNUVlnQ2FpRU1JQUpCQVdvaUF5RUNJQUFnQTBjTkFBc0xJQTVGRFFNZ0FVRUJjU0VESUFGQkFrZ05Ba0VBSVFzZ0RVR0FBMm9oQWlBRERRRWdDRUVEZENFRUEwQkJBQ0VLSUFjaEF5QUNJUWtEUUNBRElBa3JBd0E1QXdBZ0F5QUpLd09BQWprRENDQUpRWUFFYWlFSklBTkJFR29oQXlBS1FRRnFJZ29nRDBjTkFBc2dBa0VJYWlFQ0lBUWdCMm9oQnlBTFFRRnFJZ3NnQUVjTkFBc01Bd3NnQ2dSQUlBMUJnTVFBYWlBQVFRRnJJZ1ZCQ0hScUlBVkJBM1JxSVFzZ0RVRUljaUVNSUFVaEFnTkFJQXRCQ0dvaEF5QU1JQUpCQTNRaUVHb2hCRVFBQUFBQUFBRHdQeUFMS3dNQW95RVJBa0FnQlNBQ2F5SUdRUUpKQkVBZ0JDRUpEQUVMSUFaQkFYWWhDaUFFSVFrRFFDQUpJQU1yQXdBNUF3QWdDU0FES3dNSU9RTUlJQWxCRUdvaENTQURRUkJxSVFNZ0NrRUJheUlLRFFBTEN5QUdRUUZ4QkVBZ0NTQURLd01BT1FNQUN5QUJJQVlnRFVHQUEyb2dFR29pQTBFSWFpQUVJQU5CSUNBUm1pQVJFRDRnQzBHSUFtc2hDeUFDUVFCS0lRTWdBa0VCYXlFQ0lBTU5BQXNMSUE1RkRRSWdBVUVCY1NFRElBRkJBazRFUUVFQUlRc2dEVUdBQTJvaEFpQURSUVJBSUFoQkEzUWhCQU5BUVFBaENpQUhJUU1nQWlFSkEwQWdBeUFKS3dNQU9RTUFJQU1nQ1NzRGdBSTVBd2dnQ1VHQUJHb2hDU0FEUVJCcUlRTWdDa0VCYWlJS0lBOUhEUUFMSUFKQkNHb2hBaUFFSUFkcUlRY2dDMEVCYWlJTElBQkhEUUFMREFRTElBaEJBM1FoQkFOQVFRQWhDaUFISVFNZ0FpRUpBMEFnQXlBSkt3TUFPUU1BSUFNZ0NTc0RnQUk1QXdnZ0NVR0FCR29oQ1NBRFFSQnFJUU1nQ2tFQmFpSUtJQTlIRFFBTElBTWdDU3NEQURrREFDQUNRUWhxSVFJZ0JDQUhhaUVISUF0QkFXb2lDeUFBUncwQUN3d0RDeUFEUlEwQ1FRQWhDU0FOUVlBRGFpRURJQWhCQTNRaEFnTkFJQWNnQXlzREFEa0RBQ0FEUVFocUlRTWdBaUFIYWlFSElBbEJBV29pQ1NBQVJ3MEFDd3dDQ3lBSVFRTjBJUVFEUUVFQUlRb2dCeUVESUFJaENRTkFJQU1nQ1NzREFEa0RBQ0FESUFrckE0QUNPUU1JSUFsQmdBUnFJUWtnQTBFUWFpRURJQXBCQVdvaUNpQVBSdzBBQ3lBRElBa3JBd0E1QXdBZ0FrRUlhaUVDSUFRZ0Iyb2hCeUFMUVFGcUlnc2dBRWNOQUFzTUFRc2dBMFVOQUVFQUlRa2dEVUdBQTJvaEF5QUlRUU4wSVFJRFFDQUhJQU1yQXdBNUF3QWdBMEVJYWlFRElBSWdCMm9oQnlBSlFRRnFJZ2tnQUVjTkFBc0xJQTFCZ0lVQmFpUUFJQUJCSVVnZ0FVRWhTSEVMc2c4Q0IzOENmQ01BUVlDRkFXc2lEU1FBQWtBZ0FFRWdTZzBBSUFGQklFb05BQ0FCUVFKdElRNENRQUpBSUFaRkJFQWdBVUVCU0EwQ0lBRkJBVVlOQVNBTlFZREVBR29oQ2lBQlFRRnhSUVJBSUFOQkEzUWhEd05BUVFBaEN5QUtJUU1nQWlFSkEwQWdBeUFKS3dNQU9RTUFJQU1nQ1NzRENEa0RDQ0FKUVJCcUlRa2dBMEVRYWlFRElBdEJBV29pQ3lBT1J3MEFDeUFLUVlBQ2FpRUtJQUlnRDJvaEFpQU1RUUZxSWd3Z0FVY05BQXNNQXdzZ0EwRURkQ0VQQTBCQkFDRUxJQW9oQXlBQ0lRa0RRQ0FESUFrckF3QTVBd0FnQXlBSkt3TUlPUU1JSUFsQkVHb2hDU0FEUVJCcUlRTWdDMEVCYWlJTElBNUhEUUFMSUFNZ0NTc0RBRGtEQUNBS1FZQUNhaUVLSUFJZ0Qyb2hBaUFNUVFGcUlnd2dBVWNOQUFzTUFnc2dBVUVCU0EwQklBRkJBVVlOQUNBTlFZREVBR29oQ2lBQlFRRnhSUVJBSUFOQkEzUWhEd05BUVFBaEN5QUtJUU1nQWlFSkEwQWdBeUFKS3dNQU9RTUFJQU1nQ1NzRENEa0RnQUlnQ1VFUWFpRUpJQU5CZ0FScUlRTWdDMEVCYWlJTElBNUhEUUFMSUFwQkNHb2hDaUFDSUE5cUlRSWdERUVCYWlJTUlBRkhEUUFMREFJTElBTkJBM1FoRHdOQVFRQWhDeUFLSVFNZ0FpRUpBMEFnQXlBSkt3TUFPUU1BSUFNZ0NTc0RDRGtEZ0FJZ0NVRVFhaUVKSUFOQmdBUnFJUU1nQzBFQmFpSUxJQTVIRFFBTElBTWdDU3NEQURrREFDQUtRUWhxSVFvZ0FpQVBhaUVDSUF4QkFXb2lEQ0FCUncwQUN3d0JDeUFOSUFJckF3QTVBNEJFUVFBaERnc0NRQ0FBUVFGSURRQWdBVUVCY1NFRElBRkJBazRFUUVFQUlRb2dEVUdBQTJvaEFpQURSUVJBSUFoQkEzUWhEeUFISVF3RFFFRUFJUXNnQWlFRElBd2hDUU5BSUFNZ0NTc0RBRGtEQUNBRElBa3JBd2c1QXdnZ0NVRVFhaUVKSUFOQkVHb2hBeUFMUVFGcUlnc2dEa2NOQUFzZ0FrR0FBbW9oQWlBTUlBOXFJUXdnQ2tFQmFpSUtJQUJIRFFBTERBSUxJQWhCQTNRaER5QUhJUXdEUUVFQUlRc2dBaUVESUF3aENRTkFJQU1nQ1NzREFEa0RBQ0FESUFrckF3ZzVBd2dnQ1VFUWFpRUpJQU5CRUdvaEF5QUxRUUZxSWdzZ0RrY05BQXNnQXlBSkt3TUFPUU1BSUFKQmdBSnFJUUlnRENBUGFpRU1JQXBCQVdvaUNpQUFSdzBBQ3d3QkN5QURSUTBBUVFBaEN5QU5RWUFEYWlFRElBaEJBM1FoQWlBSElRa0RRQ0FESUFrckF3QTVBd0FnQTBHQUFtb2hBeUFDSUFscUlRa2dDMEVCYWlJTElBQkhEUUFMQ3dKQUlBRkJBVWdOQUNBRlJRMEFRUUFoQ1NBTlFZREVBR29oQXdOQUlBTkNnSUNBZ0lDQWdQZy9Od01BSUFOQmlBSnFJUU1nQ1VFQmFpSUpJQUZIRFFBTEN5QUdSU0FFYzBVRVFDQUJRUUZPQkVCQkFDRUNJQTFCZ01RQWFpRUtBMEJFQUFBQUFBQUE4RDhnQ2lzREFLTWlFSm9oRVNBQ0JFQWdEVUdBeEFCcUlBSkJBM1JxSVFOQkFDRUxJQTBoQ1FOQUlBa2dBeXNEQURrREFDQUpRUWhxSVFrZ0EwR0FBbW9oQXlBTFFRRnFJZ3NnQWtjTkFBc0xJQUFnQWlBTlFZQURhaUFOSUExQmdBTnFJQUpCQTNScVFTQWdFU0FRRUQ0Z0NrR0lBbW9oQ2lBQ1FRRnFJZ0lnQVVjTkFBc0xJQUJCQVVnTkFTQUJRUUZ4SVFNZ0FVRUNUZ1JBUVFBaENpQU5RWUFEYWlFQ0lBTkZCRUFnQ0VFRGRDRUVBMEJCQUNFTElBY2hBeUFDSVFrRFFDQURJQWtyQXdBNUF3QWdBeUFKS3dNSU9RTUlJQWxCRUdvaENTQURRUkJxSVFNZ0MwRUJhaUlMSUE1SERRQUxJQUpCZ0FKcUlRSWdCQ0FIYWlFSElBcEJBV29pQ2lBQVJ3MEFDd3dEQ3lBSVFRTjBJUVFEUUVFQUlRc2dCeUVESUFJaENRTkFJQU1nQ1NzREFEa0RBQ0FESUFrckF3ZzVBd2dnQ1VFUWFpRUpJQU5CRUdvaEF5QUxRUUZxSWdzZ0RrY05BQXNnQXlBSkt3TUFPUU1BSUFKQmdBSnFJUUlnQkNBSGFpRUhJQXBCQVdvaUNpQUFSdzBBQ3d3Q0N5QURSUTBCUVFBaEF5QU5RWUFEYWlFT0lBaEJBM1FoQWdOQUlBY2dEaXNEQURrREFDQU9RWUFDYWlFT0lBSWdCMm9oQnlBRFFRRnFJZ01nQUVjTkFBc01BUXNnQVVFQlRnUkFJQTFCZ01RQWFpQUJRUUZySWdKQkNIUnFJQUpCQTNScUlRd2dEVUVJY2lFRklBSWhDZ05BUkFBQUFBQUFBUEEvSUF3ckF3Q2pJaENhSVJFZ0RDRURRUUFoQ3lBRklBcEJBM1FpQm1vaUR5RUpJQUlnQ21zaUJBUkFBMEFnQ1NBREt3T0FBamtEQUNBSlFRaHFJUWtnQTBHQUFtb2hBeUFMUVFGcUlnc2dCRWNOQUFzTElBQWdCQ0FOUVlBRGFpQUdhaUlEUVFocUlBOGdBMEVnSUJFZ0VCQStJQXhCaUFKcklRd2dDa0VBU2lFRElBcEJBV3NoQ2lBRERRQUxDeUFBUVFGSURRQWdBVUVCY1NFRElBRkJBazRFUUVFQUlRb2dEVUdBQTJvaEFpQURSUVJBSUFoQkEzUWhCQU5BUVFBaEN5QUhJUU1nQWlFSkEwQWdBeUFKS3dNQU9RTUFJQU1nQ1NzRENEa0RDQ0FKUVJCcUlRa2dBMEVRYWlFRElBdEJBV29pQ3lBT1J3MEFDeUFDUVlBQ2FpRUNJQVFnQjJvaEJ5QUtRUUZxSWdvZ0FFY05BQXNNQWdzZ0NFRURkQ0VFQTBCQkFDRUxJQWNoQXlBQ0lRa0RRQ0FESUFrckF3QTVBd0FnQXlBSkt3TUlPUU1JSUFsQkVHb2hDU0FEUVJCcUlRTWdDMEVCYWlJTElBNUhEUUFMSUFNZ0NTc0RBRGtEQUNBQ1FZQUNhaUVDSUFRZ0Iyb2hCeUFLUVFGcUlnb2dBRWNOQUFzTUFRc2dBMFVOQUVFQUlRTWdEVUdBQTJvaERpQUlRUU4wSVFJRFFDQUhJQTRyQXdBNUF3QWdEa0dBQW1vaERpQUNJQWRxSVFjZ0EwRUJhaUlESUFCSERRQUxDeUFOUVlDRkFXb2tBQ0FBUVNGSUlBRkJJVWh4QzZzTEFRZC9Jd0JCZ01RQWF5SVBKQUFDUUNBQVFTQktJQUZCSUVweUlBSkJJRXB5SUFCQkFVaHlJQUZCQVVoeUlBSkJBVWh5SUFORUFBQUFBQUFBQUFCaGNpSVREUUFDUUNBSlJRUkFJQUZCQVhFaENTQUJRUUpPQkVBZ0FVRUJkaUVSSUE4aERpQUpSUVJBSUFoQkEzUWhFZ05BUVFBaENDQU9JUWtnQnlFTkEwQWdDU0FOS3dNQU9RTUFJQWtnRFNzRENEa0RnQUlnRFVFUWFpRU5JQWxCZ0FScUlRa2dDRUVCYWlJSUlCRkhEUUFMSUE1QkNHb2hEaUFISUJKcUlRY2dFRUVCYWlJUUlBSkhEUUFMREFNTElBaEJBM1FoRWdOQVFRQWhDQ0FPSVFrZ0J5RU5BMEFnQ1NBTkt3TUFPUU1BSUFrZ0RTc0RDRGtEZ0FJZ0RVRVFhaUVOSUFsQmdBUnFJUWtnQ0VFQmFpSUlJQkZIRFFBTElBa2dEU3NEQURrREFDQU9RUWhxSVE0Z0J5QVNhaUVISUJCQkFXb2lFQ0FDUncwQUN3d0NDeUFKUlEwQklBOGhDU0FJUVFOMElRZ0RRQ0FKSUFjckF3QTVBd0FnQ1VFSWFpRUpJQWNnQ0dvaEJ5QU5RUUZxSWcwZ0FrY05BQXNNQVFzZ0FrRUJjU0VKSUFKQkFrNEVRQ0FDUVFGMklSRWdEeUVPSUFsRkJFQWdDRUVEZENFU0EwQkJBQ0VJSUE0aENTQUhJUTBEUUNBSklBMHJBd0E1QXdBZ0NTQU5Ld01JT1FNSUlBMUJFR29oRFNBSlFSQnFJUWtnQ0VFQmFpSUlJQkZIRFFBTElBNUJnQUpxSVE0Z0J5QVNhaUVISUJCQkFXb2lFQ0FCUncwQUN3d0NDeUFJUVFOMElSSURRRUVBSVFnZ0RpRUpJQWNoRFFOQUlBa2dEU3NEQURrREFDQUpJQTByQXdnNUF3Z2dEVUVRYWlFTklBbEJFR29oQ1NBSVFRRnFJZ2dnRVVjTkFBc2dDU0FOS3dNQU9RTUFJQTVCZ0FKcUlRNGdCeUFTYWlFSElCQkJBV29pRUNBQlJ3MEFDd3dCQ3lBSlJRMEFJQThoQ1NBSVFRTjBJUWdEUUNBSklBY3JBd0E1QXdBZ0NVR0FBbW9oQ1NBSElBaHFJUWNnRFVFQmFpSU5JQUZIRFFBTEN3SkFJQVlFUUNBQVFRRklEUUpCQUNFSElBRkJBRW9nQ2tRQUFBQUFBQUFBQUdGeElRWWdBVUVEZENFT0lBVkJBVWNOQVNBQ1FRSnRJUVVnQWtFQmNTRVFJQUpCQVdwQkEwa2hFUU5BSUE5QmdNRUFhaUVKSUFRaERTQUZJUWdnRVVVRVFBTkFJQWtnRFNzREFEa0RBQ0FKSUEwckF3ZzVBd2dnQ1VFUWFpRUpJQTFCRUdvaERTQUlRUUZySWdnTkFBc0xJQkFFUUNBSklBMHJBd0E1QXdBTElBWUVRQ0FMUVFBZ0RoQXpHZ3NnQVNBQ0lBOGdEMEdBd1FCcUlBdEJBU0FESUFvUVBpQUVRUWhxSVFRZ0N5QU1RUU4wYWlFTElBZEJBV29pQnlBQVJ3MEFDd3dDQ3lBQVFRRklEUUZCQUNFUUlBRkJBRW9nQ2tRQUFBQUFBQUFBQUdGeElRY2dBVUVEZENFT0lBSkJBWEVoRVNBQ1FRSnRJUVlnQWtFQmFrRUNTd1JBQTBBZ0QwR0F3UUJxSVFrZ0JDRU5JQVloQ0FOQUlBa2dEU3NEQURrREFDQUpJQTByQXdnNUF3Z2dDVUVRYWlFSklBMUJFR29oRFNBSVFRRnJJZ2dOQUFzZ0VRUkFJQWtnRFNzREFEa0RBQXNnQndSQUlBdEJBQ0FPRURNYUN5QUJJQUlnRHlBUFFZREJBR29nQzBFQklBTWdDaEErSUFRZ0JVRURkR29oQkNBTElBeEJBM1JxSVFzZ0VFRUJhaUlRSUFCSERRQU1Bd3NBQzBFQUlRa2dFVVVFUUNBTVFRTjBJUVFEUUNBSEJFQWdDMEVBSUE0UU14b0xJQUVnQWlBUElBOUJnTUVBYWlBTFFRRWdBeUFLRUQ0Z0JDQUxhaUVMSUFsQkFXb2lDU0FBUncwQUN3d0NDd05BSUE4Z0JDc0RBRGtEZ0VFZ0J3UkFJQXRCQUNBT0VETWFDeUFCSUFJZ0R5QVBRWURCQUdvZ0MwRUJJQU1nQ2hBK0lBUWdCVUVEZEdvaEJDQUxJQXhCQTNScUlRc2dDVUVCYWlJSklBQkhEUUFMREFFTElBSkJBVWdoRUNBRlFRTjBJUVVEUUNBUFFZREJBR29oQ1NBRUlRMUJBQ0VJSUJCRkJFQURRQ0FKSUEwckF3QTVBd0FnQ1VFSWFpRUpJQVVnRFdvaERTQUlRUUZxSWdnZ0FrY05BQXNMSUFZRVFDQUxRUUFnRGhBekdnc2dBU0FDSUE4Z0QwR0F3UUJxSUF0QkFTQURJQW9RUGlBRVFRaHFJUVFnQ3lBTVFRTjBhaUVMSUFkQkFXb2lCeUFBUncwQUN3c2dEMEdBeEFCcUpBQWdFMEYvYzBFQmNRdUhDQUlEZjBCOElBTkJCSFFoQndOQUlBQXJBL2dESVFrZ0FDc0Q4QU1oQ2lBQUt3UG9BeUVMSUFBckErQURJUXdnQUNzRDJBTWhEU0FBS3dQUUF5RU9JQUFyQThnRElROGdBQ3NEd0FNaEVDQUFLd080QXlFUklBQXJBN0FESVJJZ0FDc0RxQU1oRXlBQUt3T2dBeUVVSUFBckE1Z0RJUlVnQUNzRGtBTWhGaUFBS3dPSUF5RVhJQUFyQTRBRElSZ2dBQ3NEK0FJaEdTQUFLd1B3QWlFYUlBQXJBK2dDSVJzZ0FDc0Q0QUloSENBQUt3UFlBaUVkSUFBckE5QUNJUjRnQUNzRHlBSWhIeUFBS3dQQUFpRWdJQUFyQTdnQ0lTRWdBQ3NEc0FJaElpQUFLd09vQWlFaklBQXJBNkFDSVNRZ0FDc0RtQUloSlNBQUt3T1FBaUVtSUFBckE0QUNJU2NnQUNzRGlBSWhLQ0FDSUFBckF3QWdBU3NEQUNJcG9rUUFBQUFBQUFBQUFLQWdBQ3NEQ0NBQkt3TUlJaXFpb0NBQUt3TVFJQUVyQXhBaUs2S2dJQUFyQXhnZ0FTc0RHQ0lzb3FBZ0FDc0RJQ0FCS3dNZ0lpMmlvQ0FBS3dNb0lBRXJBeWdpTHFLZ0lBQXJBekFnQVNzRE1DSXZvcUFnQUNzRE9DQUJLd000SWpDaW9DQUFLd05BSUFFckEwQWlNYUtnSUFBckEwZ2dBU3NEU0NJeW9xQWdBQ3NEVUNBQkt3TlFJak9pb0NBQUt3TllJQUVyQTFnaU5LS2dJQUFyQTJBZ0FTc0RZQ0kxb3FBZ0FDc0RhQ0FCS3dOb0lqYWlvQ0FBS3dOd0lBRXJBM0FpTjZLZ0lBQXJBM2dnQVNzRGVDSTRvcUFnQUNzRGdBRWdBU3NEZ0FFaU9hS2dJQUFyQTRnQklBRXJBNGdCSWpxaW9DQUFLd09RQVNBQkt3T1FBU0k3b3FBZ0FDc0RtQUVnQVNzRG1BRWlQS0tnSUFBckE2QUJJQUVyQTZBQklqMmlvQ0FBS3dPb0FTQUJLd09vQVNJK29xQWdBQ3NEc0FFZ0FTc0RzQUVpUDZLZ0lBQXJBN2dCSUFFckE3Z0JJa0Npb0NBQUt3UEFBU0FCS3dQQUFTSkJvcUFnQUNzRHlBRWdBU3NEeUFFaVFxS2dJQUFyQTlBQklBRXJBOUFCSWtPaW9DQUFLd1BZQVNBQkt3UFlBU0pFb3FBZ0FDc0Q0QUVnQVNzRDRBRWlSYUtnSUFBckErZ0JJQUVyQStnQklrYWlvQ0FBS3dQd0FTQUJLd1B3QVNKSG9xQWdBQ3NEK0FFZ0FTc0QrQUVpU0tLZ0lBU2lJQUlyQXdBZ0JhS2dPUU1BSUFJZ0EwRURkR29pQ0NBcElDZWlSQUFBQUFBQUFBQUFvQ0FxSUNpaW9DQXJJQ2Fpb0NBc0lDV2lvQ0F0SUNTaW9DQXVJQ09pb0NBdklDS2lvQ0F3SUNHaW9DQXhJQ0Npb0NBeUlCK2lvQ0F6SUI2aW9DQTBJQjJpb0NBMUlCeWlvQ0EySUJ1aW9DQTNJQnFpb0NBNElCbWlvQ0E1SUJpaW9DQTZJQmVpb0NBN0lCYWlvQ0E4SUJXaW9DQTlJQlNpb0NBK0lCT2lvQ0EvSUJLaW9DQkFJQkdpb0NCQklCQ2lvQ0JDSUEraW9DQkRJQTZpb0NCRUlBMmlvQ0JGSUF5aW9DQkdJQXVpb0NCSElBcWlvQ0JJSUFtaW9DQUVvaUFJS3dNQUlBV2lvRGtEQUNBQVFZQUVhaUVBSUFJZ0Iyb2hBaUFHUVFGcUlnWkJFRWNOQUFzTE9BRUJmeUFBS0FJZ0lnSWdBQ2dDSkVjRVFDQUNJQUVvQWdBaUFUWUNBQ0FCRUEwZ0FDQUNRUVJxTmdJZ0R3c2dBRUVjYWlBQkVFb0xRUUFnQUVHb0dUWUNBQ0FCS0FJTVFRTkhCRUJCREJBR0lnQkI0QmNRVkJvZ0FFSElGMEV0RUFVQUN5QUFRUUU2QURBZ0FDQUJOZ0lFSUFCQnVCazJBZ0FMcFFnQkNIOGpBRUdBQW1zaUF5UUFRU2dRS1NJQ1FRQTJBZ0FnQXlBRFFTeHFJZ1EyQWl3Z0EwRUJOZ0kwSUFOQkFEWUNNQ0FESUFRMkFpZ2dBMEVBTmdJOElBTkNBRGNEU0NBRFFRQTJBbGdnQTBJQU53TlFJQU5DZ0lDQWdJQ0FnSGczQXlBZ0EwS0FnSUNBZ0lDQStQOEFOd01ZSUFOQ2dJQ0FnSUNBZ1B6L0FEY0RFQ0FEUVFFMkFnZ2dBMEhBRlRZQ1JDQURRZUFBYWtFQklBSkJCQkExSVFZUUFDRUhJQUZCZjBvaENVRUFJUUlDUUFOQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FDQkVCQkRCQUdJUVZCM013QVFRQTJBZ0JCTENBRklBTW9Ba1FRQkJwQjNNd0FLQUlBSVFKQjNNd0FRUUEyQWdCQmZ5RUVJQUpGRFFKQjRNd0FLQUlBSWdoRkRRSWdBaWdDQUNBR0lBY1FJU0lFRFFFZ0FpQUlFQUlBQ3lBRElBTkI0QUJxTmdJOElBQW9BZ1FpQkVVRVFFSGN6QUJCQURZQ0FFRXVJQU5CQ0dwQkEwR1FHQkFEUWR6TUFDZ0NBQ0VDUWR6TUFFRUFOZ0lBSUFKRkRRUkI0TXdBS0FJQUlnUkZEUVFnQWlnQ0FDQUdJQWNRSVEwRERBMExJQUF0QUNnRVFFSGN6QUJCQURZQ0FFRXVJQU5CQ0dwQkEwSGJHQkFEUWR6TUFDZ0NBQ0VDUWR6TUFFRUFOZ0lBSUFKRkRRWkI0TXdBS0FJQUlnUkZEUVlnQWlnQ0FDQUdJQWNRSVEwRkRBMExJQWxGQkVCQjNNd0FRUUEyQWdCQkxpQURRUWhxUVFOQnR4WVFBMEhjekFBb0FnQWhBa0hjekFCQkFEWUNBQ0FDUlEwSVFlRE1BQ2dDQUNJRVJRMElJQUlvQWdBZ0JpQUhFQ0VOQnd3TkN5QUVLQUlBSUFGR0RRcEJBQ0VDSUFSQkFEWUNIQ0FFUVFBMkFnQWdCQ2dDQkVFQmF5SUZRUU5OQkVBZ0JVRUNkRUhnR21vb0FnQWhBZ3RCM013QVFRQTJBZ0JCTHlBRVFReHFJQUVnQW13Z0EwRUlhaEFEUWR6TUFDZ0NBQ0VDUWR6TUFFRUFOZ0lBUVg4aEJTQUNSUTBKUWVETUFDZ0NBQ0lJUlEwSklBSW9BZ0FnQmlBSEVDRWlCUTBJSUFJZ0NCQUNBQXNnQ0JBQkN4QUFJUUlnQkVFQlJnMEpJQVZCeUJkQkxSQUZBQXNnQkJBQkN4QUFJUUlNQndzZ0JCQUJDeEFBSVFJTUJRc2dCQkFCQ3hBQUlRSU1Bd3NnQ0JBQkN4QUFJUUlnQlVFQlJnMEJJQVFnQVRZQ0FDQUVJQVFvQWhRMkFod0xJQU1vQWlnb0FnaEJBVWNFUUFOQUFrQWdBeWdDS0NnQ0NFRUNSZzBBQTBBZ0F5Z0NLQ2dDQ0VFQlJnMEJBa0FnQXlnQ0tDZ0NDRVVOQUNBREtBSW9LQUlFUlEwQUlBTW9BaWdvQWdRaEFpQURLQUlvS0FJSUlRUkIzTXdBUVFBMkFnQWdBaUFFRUFoQjNNd0FLQUlBSVFKQjNNd0FRUUEyQWdCQmZ5RUVBa0FnQWtVTkFFSGd6QUFvQWdBaUJVVU5BQ0FDS0FJQUlBWWdCeEFoSWdSRkJFQWdBaUFGRUFJQUN5QUZFQUVMRUFBaEFpQUVRUUZHRFFVTElBTWdBeWdDS0NnQ0FEWUNLQ0FES0FJb0tBSUlRUUpIRFFBTEN5QURJQU1vQWlnb0FnQTJBaWdnQXlnQ0tDZ0NDRUVCUncwQUN3c0xJQVlRSmlBRFFZQUNhaVFBRHdzZ0FpQUVFQUlBQ3o0QkEzOGdBa0VCVGdSQUlBQW9BbUFoQkFOQUlBUWdBMEVEZENJRmFpQUJJQVZxS3dNQU9RTUFJQU5CQVdvaUF5QUNSdzBBQ3dzZ0FDQUNOZ0prQytBRkFRaC9Jd0JCa0FKcklnRWtBRUVvRUNraUEwRUFOZ0lBSUFCQjJCYzJBZ0FnQVNBQlFTeHFJZ1EyQWl3Z0FVRUJOZ0kwSUFGQkFEWUNNQ0FCSUFRMkFpZ2dBVUVBTmdJOElBRkNBRGNEU0NBQlFRQTJBbGdnQVVJQU53TlFJQUZDZ0lDQWdJQ0FnSGczQXlBZ0FVS0FnSUNBZ0lDQStQOEFOd01ZSUFGQ2dJQ0FnSUNBZ1B6L0FEY0RFQ0FCUVFFMkFnZ2dBVUhBRlRZQ1JDQUJRZUFBYWtFQklBTkJCQkExSVFRUUFDRUdJQUJCQ0dvaENBTkFBa0FDUUNBQ0JFQkJEQkFHSVFWQjNNd0FRUUEyQWdCQkxDQUZJQUVvQWtRUUJCcEIzTXdBS0FJQUlRSkIzTXdBUVFBMkFnQkJmeUVESUFKRkRRSkI0TXdBS0FJQUlnZEZEUUlnQWlnQ0FDQUVJQVlRSVNJRERRRWdBaUFIRUFJQUN5QUJJQUZCNEFCcU5nSThJQUJDQURjQ0hDQUFRZ0EzQUNFZ0FFRUFOZ0ljSUFCQ0FEY0NEQ0FBSUFnMkFnUWdBRUlBTndJVUlBQkJBRFlDSUNBQklBQW9BaHcyQW93Q0lBRWdBU2dDakFJMkFvZ0NJQUVnQVNnQ2lBSTJBb3dDSUFGQkFEWUNqQUlnQVNBQktBS01BallDaUFJZ0FTQUJLQUtJQWpZQ2pBSWdBRUVBTmdJVUlBQkJLellDR0NBQVFRTTJBZ3dnQUVFQU5nSUlJQUJCQURvQUVDQUFJQUFvQWh3MkFpUWdBU2dDS0NnQ0NFRUJSd1JBQTBBQ1FDQUJLQUlvS0FJSVFRSkdEUUFEUUNBQktBSW9LQUlJUVFGR0RRRUNRQ0FCS0FJb0tBSUlSUTBBSUFFb0FpZ29BZ1JGRFFBZ0FTZ0NLQ2dDQkNFRElBRW9BaWdvQWdnaEFrSGN6QUJCQURZQ0FDQURJQUlRQ0VIY3pBQW9BZ0FoQWtIY3pBQkJBRFlDQUVGL0lRTUNRQ0FDUlEwQVFlRE1BQ2dDQUNJRlJRMEFJQUlvQWdBZ0JDQUdFQ0VpQTBVRVFDQUNJQVVRQWdBTElBVVFBUXNRQUNFQ0lBTkJBVVlOQndzZ0FTQUJLQUlvS0FJQU5nSW9JQUVvQWlnb0FnaEJBa2NOQUFzTElBRWdBU2dDS0NnQ0FEWUNLQ0FCS0FJb0tBSUlRUUZIRFFBTEN5QUVFQ1lnQVVHUUFtb2tBQThMSUFjUUFRc1FBQ0VDSUFOQkFVWU5BQXNnQlVISUYwRXRFQVVBQ3hZQUlBQXNBQXRCZjB3RVFDQUFLQUlBRUNZTElBQUxyQUlDQW44QmZDTUFRZUFBYXlJQUpBQWdBQ0FBUVN4cUlnRTJBaXdnQUVFQk5nSTBJQUJCQURZQ01DQUFJQUUyQWlnZ0FFRUFOZ0k4SUFCQ2dJQ0FnSUNBZ0hnM0F5QWdBRUhBRlRZQ1JDQUFRZ0EzQTBnZ0FFS0FnSUNBZ0lDQStQOEFOd01ZSUFCQ2dJQ0FnSUNBZ1B6L0FEY0RFQ0FBUVFFMkFnZ2dBRUVBTmdKWUlBQkNBRGNEVUNBQUt3TWdJUUlnQUNnQ0tDZ0NDRUVCUndSQUEwQUNRQ0FBS0FJb0tBSUlRUUpHRFFBRFFDQUFLQUlvS0FJSVFRRkdEUUVDUUNBQUtBSW9LQUlJUlEwQUlBQW9BaWdvQWdSRkRRQWdBQ2dDS0NnQ0NDQUFLQUlvS0FJRUVRQUFDeUFBSUFBb0FpZ29BZ0EyQWlnZ0FDZ0NLQ2dDQ0VFQ1J3MEFDd3NnQUNBQUtBSW9LQUlBTmdJb0lBQW9BaWdvQWdoQkFVY05BQXNMSUFCQjRBQnFKQUFnQWd1c0FnSUNmd0Y4SXdCQjRBQnJJZ0FrQUNBQUlBQkJMR29pQVRZQ0xDQUFRUUUyQWpRZ0FFRUFOZ0l3SUFBZ0FUWUNLQ0FBUVFBMkFqd2dBRUtBZ0lDQWdJQ0ErUDhBTndNWUlBQkJ3QlUyQWtRZ0FFSUFOd05JSUFCQ2dJQ0FnSUNBZ1B6L0FEY0RFQ0FBUVFFMkFnZ2dBRUVBTmdKWUlBQkNBRGNEVUNBQVFvQ0FnSUNBZ0lCNE53TWdJQUFyQXhnaEFpQUFLQUlvS0FJSVFRRkhCRUFEUUFKQUlBQW9BaWdvQWdoQkFrWU5BQU5BSUFBb0FpZ29BZ2hCQVVZTkFRSkFJQUFvQWlnb0FnaEZEUUFnQUNnQ0tDZ0NCRVVOQUNBQUtBSW9LQUlJSUFBb0FpZ29BZ1FSQUFBTElBQWdBQ2dDS0NnQ0FEWUNLQ0FBS0FJb0tBSUlRUUpIRFFBTEN5QUFJQUFvQWlnb0FnQTJBaWdnQUNnQ0tDZ0NDRUVCUncwQUN3c2dBRUhnQUdva0FDQUNDNndDQWdKL0FYd2pBRUhnQUdzaUFDUUFJQUFnQUVFc2FpSUJOZ0lzSUFCQkFUWUNOQ0FBUVFBMkFqQWdBQ0FCTmdJb0lBQkJBRFlDUENBQVFvQ0FnSUNBZ0lEOC93QTNBeEFnQUVIQUZUWUNSQ0FBUWdBM0EwZ2dBRUVCTmdJSUlBQkJBRFlDV0NBQVFnQTNBMUFnQUVLQWdJQ0FnSUNBZURjRElDQUFRb0NBZ0lDQWdJRDQvd0EzQXhnZ0FDc0RFQ0VDSUFBb0FpZ29BZ2hCQVVjRVFBTkFBa0FnQUNnQ0tDZ0NDRUVDUmcwQUEwQWdBQ2dDS0NnQ0NFRUJSZzBCQWtBZ0FDZ0NLQ2dDQ0VVTkFDQUFLQUlvS0FJRVJRMEFJQUFvQWlnb0FnZ2dBQ2dDS0NnQ0JCRUFBQXNnQUNBQUtBSW9LQUlBTmdJb0lBQW9BaWdvQWdoQkFrY05BQXNMSUFBZ0FDZ0NLQ2dDQURZQ0tDQUFLQUlvS0FJSVFRRkhEUUFMQ3lBQVFlQUFhaVFBSUFJTE9RRUJmeUFCSUFBb0FnUWlCRUVCZFdvaEFTQUFLQUlBSVFBZ0FTQUNJQU1nQkVFQmNRUi9JQUVvQWdBZ0FHb29BZ0FGSUFBTEVRSUFDNndCQVFGL0FrQWdBVUVCUndSQUlBTkJBVWdOQVFOQUlBQWdBQ3NEQUNBQ0t3TUFvVGtEQUNBQ1FRaHFJUUlnQUNBQlFRTjBhaUVBSUFSQkFXb2lCQ0FEUncwQUN3d0JDeUFEUVFKdElRRWdBMEVDVGdSQUEwQWdBQ0FBS3dNQUlBSXJBd0NoT1FNQUlBQWdBQ3NEQ0NBQ0t3TUlvVGtEQ0NBQ1FSQnFJUUlnQUVFUWFpRUFJQVJCQVdvaUJDQUJSdzBBQ3dzZ0EwRUJjVVVOQUNBQUlBQXJBd0FnQWlzREFLRTVBd0FMQzJzQkFuOENRQ0FDUVFKdElRTWdBa0VDVGdSQUEwQWdBQ0FCS3dNQUlBQXJBd0NnT1FNQUlBQWdBU3NEQ0NBQUt3TUlvRGtEQ0NBQlFSQnFJUUVnQUVFUWFpRUFJQVJCQVdvaUJDQURSdzBBQ3dzZ0FrRUJjVVVOQUNBQUlBRXJBd0FnQUNzREFLQTVBd0FMQzVnQkFRRi9Ba0FnQWtFQlJ3UkFJQU5CQVVnTkFRTkFJQUFnQVNzREFKbzVBd0FnQVNBQ1FRTjBhaUVCSUFCQkNHb2hBQ0FFUVFGcUlnUWdBMGNOQUFzTUFRc2dBMEVDYlNFQ0lBTkJBazRFUUFOQUlBQWdBU3NEQUpvNUF3QWdBQ0FCS3dNSW1qa0RDQ0FCUVJCcUlRRWdBRUVRYWlFQUlBUkJBV29pQkNBQ1J3MEFDd3NnQTBFQmNVVU5BQ0FBSUFFckF3Q2FPUU1BQ3dzbEFRRitJQUM5SWdKQ0lJZ2dBaUFCS0FJQVFRRkdHMEtBZ01EL0I0TkNnSURBL3dkU0N5SUJBWDhqQUVFUWF5SUNJQUE1QXdnZ0FpQUJPUU1BSUFJckF3Z2dBaXNEQUdZTElnRUJmeU1BUVJCcklnSWdBRGtEQ0NBQ0lBRTVBd0FnQWlzRENDQUNLd01BWkFzaUFRRi9Jd0JCRUdzaUFpQUFPUU1JSUFJZ0FUa0RBQ0FDS3dNSUlBSXJBd0JoQ3hBQUlBQWdBallDWENBQUlBRTJBbGdMdVFJQkFYOGpBRUVRYXlJRUpBQUNRQUpBQWtBZ0FrVU5BQ0FBS1FNSUlBQXBBd0NFVUVVTkFDQUJRWDlNRFFFZ0FFRUFOZ0lJSUFCQkFEWUNEQ0FFSUFBb0FnZzJBZ3dnQkNBRUtBSU1OZ0lJSUFRZ0JDZ0NDRFlDRENBRVFRQTJBZ3dnQkNBRUtBSU1OZ0lJSUFRZ0JDZ0NDRFlDREFKQUlBTUVRQ0FBSUFJb0FpQTJBZ0FnQWlBQU5nSWdEQUVMSUFCQkFEWUNBQXNnQVFSQVFkRExBQzBBQUEwRFFkVExBQ2dDQUNJRFFRRk9CRUJCek1zQUtBSUFJQU5PRFFRTElBRkJ3d0JxRUNraUFVVU5BeUFCUVFScUlnSkJRSEZCUUdzZ0FpQUNRVDl4R3lJQ1FRUnJJQUUyQWdBZ0FDQUNOZ0lJSUFBQ2YwRUFJQUFvQWdnaUFVVU5BQm9nQVVFRWF5Z0NBQXMyQWd3TElBQkJLellDQkNBRVFSQnFKQUFQQ3hBTUFBc2dBa0VEUWR3VkVFSUFDeUFDUVFGQndSVVFRZ0FMQ1FBZ0FDQUJOd05BQ3lBQkFYOUI4QUFRTHlJQVFmZ1NOZ0lBSUFCQkJHcEJBRUhVQUJBekdpQUFDd2tBSUFBZ0FUWUNOQXQxQUFKQUlBQW9BaUFvQWdoQkFrWU5BQU5BSUFBb0FpQW9BZ2hCQVVZTkFRSkFJQUFvQWlBb0FnaEZEUUFnQUNnQ0lDZ0NCRVVOQUNBQUtBSWdLQUlJSUFBb0FpQW9BZ1FSQUFBTElBQWdBQ2dDSUNnQ0FEWUNJQ0FBS0FJZ0tBSUlRUUpIRFFBTEN5QUFJQUFvQWlBb0FnQTJBaUFMZGdFQ2Z5QUFSUVJBUVFBUEN3SkFBa0JCME1zQUxRQUFEUUJCMU1zQUtBSUFJZ05CQVU0RVFFSE15d0FvQWdBZ0EwNE5BUXNnQUVIREFHb1FLU0lBUlEwQUlBQkJCR29pQVVGQWNVRkFheUFCSUFGQlAzRWJJZ0pCQkdzZ0FEWUNBQXdCQ3lBQlJRMEFJQUZCQVVIQkZSQkNBQXNnQWd0SUFRRi9Jd0JCRUdzaUFTUUFBa0JCM01zQUxRQUFSUTBBUWRqTEFDZ0NBRVVOQUNBQklBQTJBZ3hCMk1zQUtBSUFJQUFRM1FGQjJNc0FLQUlBRUhBYUN5QUJRUkJxSkFBTGt3RUFJQUFvQWlBb0FnaEJBVWNFUUFOQUFrQWdBQ2dDSUNnQ0NFRUNSZzBBQTBBZ0FDZ0NJQ2dDQ0VFQlJnMEJBa0FnQUNnQ0lDZ0NDRVVOQUNBQUtBSWdLQUlFUlEwQUlBQW9BaUFvQWdnZ0FDZ0NJQ2dDQkJFQUFBc2dBQ0FBS0FJZ0tBSUFOZ0lnSUFBb0FpQW9BZ2hCQWtjTkFBc0xJQUFnQUNnQ0lDZ0NBRFlDSUNBQUtBSWdLQUlJUVFGSERRQUxDd3NrQVFGL0l3QkJFR3NpQVNBQU5nSU1JQUVnQVNnQ0REWUNDQ0FCSUFFb0FnZzJBZ3dMM0FNQ0FuOEJmQ01BUVJCcklnUWtBQ0FBS0FKY1FRRk9CRUJCQUNFREEwQWdBQ2dDV0NBRFFRTjBhaUFCS0FJRUtBSWNJQU5CQTNScUt3TUFPUU1BSUFOQkFXb2lBeUFBS0FKY1NBMEFDd3NDUUFKQUFrQUNRQ0FBS0FKb1FRRnJEZ0lBQVFNTElBQW9BaHdvQWdCQkFFR1lFeUFFUVFocUVCQWlBMEhZeHdBZ0JFRUlhaEFQSVFZZ0JDZ0NDQkFPREFFTElBQW9BaHdvQWdCQkFFR1lFeUFFUVFocUVCQWlBMEhZeHdBZ0JFRUlhaEFQSVFZZ0JDZ0NDQkFPSUFhYUlRWUxJQUlvQWdRb0Fod2dCamtEQUNBREVBY0xBa0FnQUNnQ05DSUJJQUFvQWpoR0JFQkJBU0VEREFFTFFRRWhBd05BSUFFZ0JVRUNkR29vQWdCQkFFR1lFeUFFUVFocUVCQWlBVUhZeHdBZ0JFRUlhaEFQSVFZZ0JDZ0NDQkFPSUFJb0FnUW9BaHdnQTBFRGRHb2dCamtEQUNBQkVBY2dBMEVCYWlFRElBVkJBV29pQlNBQUtBSTRJQUFvQWpRaUFXdEJBblZKRFFBTEN5QUFLQUpBSWdFZ0FDZ0NSRWNFUUVFQUlRVURRQ0FCSUFWQkFuUnFLQUlBUVFCQm1CTWdCRUVJYWhBUUlnRkIyTWNBSUFSQkNHb1FEeUVHSUFRb0FnZ1FEaUFDS0FJRUtBSWNJQU5CQTNScUlBWTVBd0FnQVJBSElBTkJBV29oQXlBRlFRRnFJZ1VnQUNnQ1JDQUFLQUpBSWdGclFRSjFTUTBBQ3dzZ0JFRVFhaVFBQ3djQUlBQVJEQUFMMkFFQ0JuOEJmQ01BUVJCcklnTWtBQUpBSUFBb0FsQWlCU0FBS0FKTUlnSkdEUUFnQUNnQ1hDSUhRUUZJRFFBRFFFRUFJUVFnQjBFQVNnUkFBMzhnQXlBRU5nSUlJQUlnQmtFQ2RHb29BZ0JCQVVHVUV5QURRUWhxRUJBaUFrSFl4d0FnQTBFRWFoQVBJUWdnQXlnQ0JCQU9JQUVvQWdRb0FpUWdCa0VDZEdvb0FnQWdCRUVEZEdvZ0NEa0RBQ0FDRUFjZ0JFRUJhaUlFSUFBb0Fsd2lCMDRFZnlBQUtBSk1JUUlnQUNnQ1VBVWdBQ2dDVENFQ0RBRUxDeUVGQ3lBR1FRRnFJZ1lnQlNBQ2EwRUNkVWtOQUFzTElBTkJFR29rQUF1TUF3RUNmeUFBUWZnU05nSUFJQUFvQWt3aUFnUkFBbjhnQWlBQ0lBQW9BbEFpQVVZTkFCb0RRQ0FCUVFScklnRW9BZ0FRQnlBQklBSkhEUUFMSUFBb0Frd0xJUUVnQUNBQ05nSlFJQUVRSmdzZ0FDZ0NRQ0lDQkVBQ2Z5QUNJQUlnQUNnQ1JDSUJSZzBBR2dOQUlBRkJCR3NpQVNnQ0FCQUhJQUVnQWtjTkFBc2dBQ2dDUUFzaEFTQUFJQUkyQWtRZ0FSQW1DeUFBS0FJMElnSUVRQUovSUFJZ0FpQUFLQUk0SWdGR0RRQWFBMEFnQVVFRWF5SUJLQUlBRUFjZ0FTQUNSdzBBQ3lBQUtBSTBDeUVCSUFBZ0FqWUNPQ0FCRUNZTElBQW9BaWdpQWdSQUFuOGdBaUFDSUFBb0Fpd2lBVVlOQUJvRFFDQUJRUVJySWdFb0FnQVFCeUFCSUFKSERRQUxJQUFvQWlnTElRRWdBQ0FDTmdJc0lBRVFKZ3NnQUNnQ0hDSUNCRUFDZnlBQ0lBSWdBQ2dDSUNJQlJnMEFHZ05BSUFGQkJHc2lBU2dDQUJBSElBRWdBa2NOQUFzZ0FDZ0NIQXNoQVNBQUlBSTJBaUFnQVJBbUN5QUFLQUlRSWdFRVFDQUFJQUUyQWhRZ0FSQW1DeUFBS0FJRUlnRUVRQ0FBSUFFMkFnZ2dBUkFtQ3lBQUN3VUFRZVFTQ3hNQUlBQkJCR3BCQUNBQktBSUVRWkFSUmhzTEdBQWdBQ2dDQ0NBQklBSWdBeWdDQUNBQUtBSUVFUVFBQ3hRQUlBRkI0QTQyQWdBZ0FTQUFLUUlFTndJRUN4d0JBWDlCREJBdklnRkI0QTQyQWdBZ0FTQUFLUUlFTndJRUlBRUxCUUJCekE0TEV3QWdBRUVFYWtFQUlBRW9BZ1JCd0F4R0d3c2FBQ0FBS0FJSUlBRWdBaUFESUFRb0FnQWdBQ2dDQkJFR0FBc09BQ0FBQkVBZ0FCQ3BBUkFtQ3dzVUFDQUJRZFFKTmdJQUlBRWdBQ2tDQkRjQ0JBc2NBUUYvUVF3UUx5SUJRZFFKTmdJQUlBRWdBQ2tDQkRjQ0JDQUJDeE1BSUFFZ0FxMGdBNjFDSUlhRUlBQVJFZ0FMQmdBZ0FDUUFDd1FBSXdBTHFRRUJBMzhDUUNBQklBSW9BaEFpQkFSL0lBUUZJQUlRdVFFTkFTQUNLQUlRQ3lBQ0tBSVVJZ1ZyU3dSQUlBSWdBQ0FCSUFJb0FpUVJDQUFhRHdzQ1FDQUNMQUJMUVFCSURRQWdBU0VFQTBBZ0JDSURSUTBCSUFBZ0EwRUJheUlFYWkwQUFFRUtSdzBBQ3lBQ0lBQWdBeUFDS0FJa0VRZ0FJQU5KRFFFZ0FDQURhaUVBSUFFZ0Eyc2hBU0FDS0FJVUlRVUxJQVVnQUNBQkVFY2FJQUlnQWlnQ0ZDQUJhallDRkFzTFdRRUJmeUFBSUFBdEFFb2lBVUVCYXlBQmNqb0FTaUFBS0FJQUlnRkJDSEVFUUNBQUlBRkJJSEkyQWdCQmZ3OExJQUJDQURjQ0JDQUFJQUFvQWl3aUFUWUNIQ0FBSUFFMkFoUWdBQ0FCSUFBb0FqQnFOZ0lRUVFBTDFnSUJBWDhDUUNBQUlBRkdEUUFnQVNBQWF5QUNhMEVBSUFKQkFYUnJUUVJBSUFBZ0FTQUNFRWNhRHdzZ0FDQUJjMEVEY1NFREFrQUNRQ0FBSUFGSkJFQWdBdzBDSUFCQkEzRkZEUUVEUUNBQ1JRMEVJQUFnQVMwQUFEb0FBQ0FCUVFGcUlRRWdBa0VCYXlFQ0lBQkJBV29pQUVFRGNRMEFDd3dCQ3dKQUlBTU5BQ0FBSUFKcVFRTnhCRUFEUUNBQ1JRMEZJQUFnQWtFQmF5SUNhaUlESUFFZ0Ftb3RBQUE2QUFBZ0EwRURjUTBBQ3dzZ0FrRURUUTBBQTBBZ0FDQUNRUVJySWdKcUlBRWdBbW9vQWdBMkFnQWdBa0VEU3cwQUN3c2dBa1VOQWdOQUlBQWdBa0VCYXlJQ2FpQUJJQUpxTFFBQU9nQUFJQUlOQUFzTUFnc2dBa0VEVFEwQUEwQWdBQ0FCS0FJQU5nSUFJQUZCQkdvaEFTQUFRUVJxSVFBZ0FrRUVheUlDUVFOTERRQUxDeUFDUlEwQUEwQWdBQ0FCTFFBQU9nQUFJQUJCQVdvaEFDQUJRUUZxSVFFZ0FrRUJheUlDRFFBTEN3dTdCd0VKZnlBQUtBSUVJZ2RCQTNFaEFpQUFJQWRCZUhFaUJtb2hCQUpBUWZqTUFDZ0NBQ0lGSUFCTERRQWdBa0VCUmcwQUN3SkFJQUpGQkVCQkFDRUNJQUZCZ0FKSkRRRWdBVUVFYWlBR1RRUkFJQUFoQWlBR0lBRnJRY2pRQUNnQ0FFRUJkRTBOQWd0QkFBOExBa0FnQVNBR1RRUkFJQVlnQVdzaUFrRVFTUTBCSUFBZ0IwRUJjU0FCY2tFQ2NqWUNCQ0FBSUFGcUlnRWdBa0VEY2pZQ0JDQUVJQVFvQWdSQkFYSTJBZ1FnQVNBQ0VHZ01BUXRCQUNFQ0lBUkJnTTBBS0FJQVJnUkFRZlRNQUNnQ0FDQUdhaUlGSUFGTkRRSWdBQ0FIUVFGeElBRnlRUUp5TmdJRUlBQWdBV29pQWlBRklBRnJJZ0ZCQVhJMkFnUkI5TXdBSUFFMkFnQkJnTTBBSUFJMkFnQU1BUXNnQkVIOHpBQW9BZ0JHQkVCQjhNd0FLQUlBSUFacUlnVWdBVWtOQWdKQUlBVWdBV3NpQWtFUVR3UkFJQUFnQjBFQmNTQUJja0VDY2pZQ0JDQUFJQUZxSWdFZ0FrRUJjallDQkNBQUlBVnFJZ1VnQWpZQ0FDQUZJQVVvQWdSQmZuRTJBZ1FNQVFzZ0FDQUhRUUZ4SUFWeVFRSnlOZ0lFSUFBZ0JXb2lBU0FCS0FJRVFRRnlOZ0lFUVFBaEFrRUFJUUVMUWZ6TUFDQUJOZ0lBUWZETUFDQUNOZ0lBREFFTElBUW9BZ1FpQTBFQ2NRMEJJQU5CZUhFZ0Jtb2lDU0FCU1EwQklBa2dBV3NoQ2dKQUlBTkIvd0ZOQkVBZ0JDZ0NDQ0lHSUFOQkEzWWlCVUVEZEVHUXpRQnFSeG9nQmlBRUtBSU1JZ2hHQkVCQjZNd0FRZWpNQUNnQ0FFRitJQVYzY1RZQ0FBd0NDeUFHSUFnMkFnd2dDQ0FHTmdJSURBRUxJQVFvQWhnaENBSkFJQVFnQkNnQ0RDSURSd1JBSUFRb0FnZ2lBaUFGVHdSQUlBSW9BZ3dhQ3lBQ0lBTTJBZ3dnQXlBQ05nSUlEQUVMQWtBZ0JFRVVhaUlDS0FJQUlnWU5BQ0FFUVJCcUlnSW9BZ0FpQmcwQVFRQWhBd3dCQ3dOQUlBSWhCU0FHSWdOQkZHb2lBaWdDQUNJR0RRQWdBMEVRYWlFQ0lBTW9BaEFpQmcwQUN5QUZRUUEyQWdBTElBaEZEUUFDUUNBRUlBUW9BaHdpQlVFQ2RFR1l6d0JxSWdJb0FnQkdCRUFnQWlBRE5nSUFJQU1OQVVIc3pBQkI3TXdBS0FJQVFYNGdCWGR4TmdJQURBSUxJQWhCRUVFVUlBZ29BaEFnQkVZYmFpQUROZ0lBSUFORkRRRUxJQU1nQ0RZQ0dDQUVLQUlRSWdJRVFDQURJQUkyQWhBZ0FpQUROZ0lZQ3lBRUtBSVVJZ0pGRFFBZ0F5QUNOZ0lVSUFJZ0F6WUNHQXNnQ2tFUFRRUkFJQUFnQjBFQmNTQUpja0VDY2pZQ0JDQUFJQWxxSWdFZ0FTZ0NCRUVCY2pZQ0JBd0JDeUFBSUFkQkFYRWdBWEpCQW5JMkFnUWdBQ0FCYWlJQ0lBcEJBM0kyQWdRZ0FDQUphaUlCSUFFb0FnUkJBWEkyQWdRZ0FpQUtFR2dMSUFBaEFnc2dBZ3VDQVFFQ2Z5QUFSUVJBSUFFUUtROExJQUZCUUU4RVFFR0V6QUJCTURZQ0FFRUFEd3NnQUVFSWEwRVFJQUZCQzJwQmVIRWdBVUVMU1JzUXV3RWlBZ1JBSUFKQkNHb1BDeUFCRUNraUFrVUVRRUVBRHdzZ0FpQUFRWHhCZUNBQVFRUnJLQUlBSWdOQkEzRWJJQU5CZUhGcUlnTWdBU0FCSUFOTEd4QkhHaUFBRUNZZ0Fnc2FBQ0FBSUFFb0FnZ2dCUkFvQkVBZ0FTQUNJQU1nQkJCWkN3czNBQ0FBSUFFb0FnZ2dCUkFvQkVBZ0FTQUNJQU1nQkJCWkR3c2dBQ2dDQ0NJQUlBRWdBaUFESUFRZ0JTQUFLQUlBS0FJVUVRa0FDNU1DQVFaL0lBQWdBU2dDQ0NBRkVDZ0VRQ0FCSUFJZ0F5QUVFRmtQQ3lBQkxRQTFJUWNnQUNnQ0RDRUdJQUZCQURvQU5TQUJMUUEwSVFnZ0FVRUFPZ0EwSUFCQkVHb2lDU0FCSUFJZ0F5QUVJQVVRV0NBSElBRXRBRFVpQ25JaEJ5QUlJQUV0QURRaUMzSWhDQUpBSUFaQkFrZ05BQ0FKSUFaQkEzUnFJUWtnQUVFWWFpRUdBMEFnQVMwQU5nMEJBa0FnQ3dSQUlBRW9BaGhCQVVZTkF5QUFMUUFJUVFKeERRRU1Bd3NnQ2tVTkFDQUFMUUFJUVFGeFJRMENDeUFCUVFBN0FUUWdCaUFCSUFJZ0F5QUVJQVVRV0NBQkxRQTFJZ29nQjNJaEJ5QUJMUUEwSWdzZ0NISWhDQ0FHUVFocUlnWWdDVWtOQUFzTElBRWdCMEgvQVhGQkFFYzZBRFVnQVNBSVFmOEJjVUVBUnpvQU5BdW5BUUFnQUNBQktBSUlJQVFRS0FSQUFrQWdBU2dDQkNBQ1J3MEFJQUVvQWh4QkFVWU5BQ0FCSUFNMkFod0xEd3NDUUNBQUlBRW9BZ0FnQkJBb1JRMEFBa0FnQWlBQktBSVFSd1JBSUFFb0FoUWdBa2NOQVFzZ0EwRUJSdzBCSUFGQkFUWUNJQThMSUFFZ0FqWUNGQ0FCSUFNMkFpQWdBU0FCS0FJb1FRRnFOZ0lvQWtBZ0FTZ0NKRUVCUncwQUlBRW9BaGhCQWtjTkFDQUJRUUU2QURZTElBRkJCRFlDTEFzTGlBSUFJQUFnQVNnQ0NDQUVFQ2dFUUFKQUlBRW9BZ1FnQWtjTkFDQUJLQUljUVFGR0RRQWdBU0FETmdJY0N3OExBa0FnQUNBQktBSUFJQVFRS0FSQUFrQWdBaUFCS0FJUVJ3UkFJQUVvQWhRZ0FrY05BUXNnQTBFQlJ3MENJQUZCQVRZQ0lBOExJQUVnQXpZQ0lBSkFJQUVvQWl4QkJFWU5BQ0FCUVFBN0FUUWdBQ2dDQ0NJQUlBRWdBaUFDUVFFZ0JDQUFLQUlBS0FJVUVRa0FJQUV0QURVRVFDQUJRUU0yQWl3Z0FTMEFORVVOQVF3REN5QUJRUVEyQWl3TElBRWdBallDRkNBQklBRW9BaWhCQVdvMkFpZ2dBU2dDSkVFQlJ3MEJJQUVvQWhoQkFrY05BU0FCUVFFNkFEWVBDeUFBS0FJSUlnQWdBU0FDSUFNZ0JDQUFLQUlBS0FJWUVRWUFDd3UxQkFFRWZ5QUFJQUVvQWdnZ0JCQW9CRUFDUUNBQktBSUVJQUpIRFFBZ0FTZ0NIRUVCUmcwQUlBRWdBellDSEFzUEN3SkFJQUFnQVNnQ0FDQUVFQ2dFUUFKQUlBSWdBU2dDRUVjRVFDQUJLQUlVSUFKSERRRUxJQU5CQVVjTkFpQUJRUUUyQWlBUEN5QUJJQU0yQWlBZ0FTZ0NMRUVFUndSQUlBQkJFR29pQlNBQUtBSU1RUU4wYWlFSUlBRUNmd0pBQTBBQ1FDQUZJQWhQRFFBZ0FVRUFPd0UwSUFVZ0FTQUNJQUpCQVNBRUVGZ2dBUzBBTmcwQUFrQWdBUzBBTlVVTkFDQUJMUUEwQkVCQkFTRURJQUVvQWhoQkFVWU5CRUVCSVFkQkFTRUdJQUF0QUFoQkFuRU5BUXdFQzBFQklRY2dCaUVESUFBdEFBaEJBWEZGRFFNTElBVkJDR29oQlF3QkN3c2dCaUVEUVFRZ0IwVU5BUm9MUVFNTE5nSXNJQU5CQVhFTkFnc2dBU0FDTmdJVUlBRWdBU2dDS0VFQmFqWUNLQ0FCS0FJa1FRRkhEUUVnQVNnQ0dFRUNSdzBCSUFGQkFUb0FOZzhMSUFBb0Fnd2hCaUFBUVJCcUlnVWdBU0FDSUFNZ0JCQlBJQVpCQWtnTkFDQUZJQVpCQTNScUlRWWdBRUVZYWlFRkFrQWdBQ2dDQ0NJQVFRSnhSUVJBSUFFb0FpUkJBVWNOQVFzRFFDQUJMUUEyRFFJZ0JTQUJJQUlnQXlBRUVFOGdCVUVJYWlJRklBWkpEUUFMREFFTElBQkJBWEZGQkVBRFFDQUJMUUEyRFFJZ0FTZ0NKRUVCUmcwQ0lBVWdBU0FDSUFNZ0JCQlBJQVZCQ0dvaUJTQUdTUTBBREFJTEFBc0RRQ0FCTFFBMkRRRWdBU2dDSkVFQlJnUkFJQUVvQWhoQkFVWU5BZ3NnQlNBQklBSWdBeUFFRUU4Z0JVRUlhaUlGSUFaSkRRQUxDd3VYQVFFQ2Z3SkFBMEFnQVVVRVFFRUFEd3NnQVVIc3hBQVFPeUlCUlEwQklBRW9BZ2dnQUNnQ0NFRi9jM0VOQVNBQUtBSU1JQUVvQWd4QkFCQW9CRUJCQVE4TElBQXRBQWhCQVhGRkRRRWdBQ2dDRENJRFJRMEJJQU5CN01RQUVEc2lBd1JBSUFFb0Fnd2hBU0FESVFBTUFRc0xJQUFvQWd3aUFFVU5BQ0FBUWR6RkFCQTdJZ0JGRFFBZ0FDQUJLQUlNRUdraEFnc2dBZ3ZqQXdFRWZ5TUFRVUJxSWdVa0FBSkFJQUZCeU1ZQVFRQVFLQVJBSUFKQkFEWUNBRUVCSVFNTUFRc2dBQ0FCRU1VQkJFQkJBU0VESUFJb0FnQWlBRVVOQVNBQ0lBQW9BZ0EyQWdBTUFRc0NRQ0FCUlEwQUlBRkI3TVFBRURzaUFVVU5BU0FDS0FJQUlnUUVRQ0FDSUFRb0FnQTJBZ0FMSUFFb0FnZ2lCQ0FBS0FJSUlnWkJmM054UVFkeERRRWdCRUYvY3lBR2NVSGdBSEVOQVVFQklRTWdBQ2dDRENBQktBSU1RUUFRS0EwQklBQW9BZ3hCdk1ZQVFRQVFLQVJBSUFFb0Fnd2lBRVVOQWlBQVFhREZBQkE3UlNFRERBSUxJQUFvQWd3aUJFVU5BRUVBSVFNZ0JFSHN4QUFRT3lJRUJFQWdBQzBBQ0VFQmNVVU5BaUFFSUFFb0Fnd1F3d0VoQXd3Q0N5QUFLQUlNSWdSRkRRRWdCRUhjeFFBUU95SUVCRUFnQUMwQUNFRUJjVVVOQWlBRUlBRW9BZ3dRYVNFRERBSUxJQUFvQWd3aUFFVU5BU0FBUVl6RUFCQTdJZ1JGRFFFZ0FTZ0NEQ0lBUlEwQklBQkJqTVFBRURzaUFFVU5BU0FGUVFocVFRUnlRUUJCTkJBekdpQUZRUUUyQWpnZ0JVRi9OZ0lVSUFVZ0JEWUNFQ0FGSUFBMkFnZ2dBQ0FGUVFocUlBSW9BZ0JCQVNBQUtBSUFLQUljRVFRQUFrQWdCU2dDSUNJQVFRRkhEUUFnQWlnQ0FFVU5BQ0FDSUFVb0FoZzJBZ0FMSUFCQkFVWWhBd3dCQzBFQUlRTUxJQVZCUUdza0FDQURDejRBQWtBZ0FDQUJJQUF0QUFoQkdIRUVmMEVCQlVFQUlRQWdBVVVOQVNBQlFiekVBQkE3SWdGRkRRRWdBUzBBQ0VFWWNVRUFSd3NRS0NFQUN5QUFDMjBCQW44Z0FDQUJLQUlJUVFBUUtBUkFJQUVnQWlBREVGc1BDeUFBS0FJTUlRUWdBRUVRYWlJRklBRWdBaUFERUdvQ1FDQUVRUUpJRFFBZ0JTQUVRUU4wYWlFRUlBQkJHR29oQUFOQUlBQWdBU0FDSUFNUWFpQUFRUWhxSWdBZ0JFOE5BU0FCTFFBMlJRMEFDd3NMTVFBZ0FDQUJLQUlJUVFBUUtBUkFJQUVnQWlBREVGc1BDeUFBS0FJSUlnQWdBU0FDSUFNZ0FDZ0NBQ2dDSEJFRUFBc1lBQ0FBSUFFb0FnaEJBQkFvQkVBZ0FTQUNJQU1RV3dzTG9BRUJBWDhqQUVGQWFpSURKQUFDZjBFQklBQWdBVUVBRUNnTkFCcEJBQ0FCUlEwQUdrRUFJQUZCak1RQUVEc2lBVVVOQUJvZ0EwRUlha0VFY2tFQVFUUVFNeG9nQTBFQk5nSTRJQU5CZnpZQ0ZDQURJQUEyQWhBZ0F5QUJOZ0lJSUFFZ0EwRUlhaUFDS0FJQVFRRWdBU2dDQUNnQ0hCRUVBQ0FES0FJZ0lnQkJBVVlFUUNBQ0lBTW9BaGcyQWdBTElBQkJBVVlMSVFBZ0EwRkFheVFBSUFBTENnQWdBQ0FCUVFBUUtBc1ZBQ0FBSUFFZ0FpQURJQUFvQWdBb0FnUVJCQUFMQ3dBZ0FCQmNHaUFBRUNZTENBQWdBQkJjRUNZTExBRUJmd0ovSUFBb0FnQkJER3NpQUNJQklBRW9BZ2hCQVdzaUFUWUNDQ0FCUVg5TUN3UkFJQUFRSmdzTEJnQkJnY0lBQ3pjQkFuOGdBUkJYSWdKQkRXb1FMeUlEUVFBMkFnZ2dBeUFDTmdJRUlBTWdBallDQUNBQUlBTkJER29nQVNBQ1FRRnFFRWMyQWdBTHNRSUJCWDhqQUVFUWF5SUhKQUFnQWlBQlFYOXpRUkZyVFFSQUFuOGdBQzBBQzBFSGRnUkFJQUFvQWdBTUFRc2dBQXNoQ1FKL0lBRkI1Ly8vL3dkSkJFQWdCeUFCUVFGME5nSUlJQWNnQVNBQ2FqWUNEQUovSXdCQkVHc2lBaVFBSUFkQkRHb2lDQ2dDQUNBSFFRaHFJZ29vQWdCSklRc2dBa0VRYWlRQUlBb2dDQ0FMR3lnQ0FDSUNRUXRQQ3dSL0lBSkJFR3BCY0hFaUFpQUNRUUZySWdJZ0FrRUxSaHNGUVFvTERBRUxRVzRMUVFGcUlnZ1FMeUVDSUFVRVFDQUNJQVlnQlJCckN5QURJQVJySWdNaUJnUkFJQUlnQldvZ0JDQUphaUFHRUdzTElBRkJDa2NFUUNBSkVDWUxJQUFnQWpZQ0FDQUFJQWhCZ0lDQWdIaHlOZ0lJSUFBZ0F5QUZhaUlBTmdJRUlBZEJBRG9BQnlBQUlBSnFJQWN0QUFjNkFBQWdCMEVRYWlRQUR3dEI5TUVBRUZvQUM4Y0JBUU4vSXdCQkVHc2lCQ1FBQWtBZ0FpQUFMUUFMUVFkMkJIOGdBQ2dDQ0VILy8vLy9CM0ZCQVdzRlFRb0xJZ05OQkVBQ2Z5QUFMUUFMUVFkMkJFQWdBQ2dDQUF3QkN5QUFDeUlESVFVZ0FnUkFJQVVnQVNBQ0VMb0JDeUFFUVFBNkFBOGdBaUFEYWlBRUxRQVBPZ0FBQWtBZ0FDMEFDMEVIZGdSQUlBQWdBallDQkF3QkN5QUFJQUk2QUFzTERBRUxJQUFnQXlBQ0lBTnJBbjhnQUMwQUMwRUhkZ1JBSUFBb0FnUU1BUXNnQUMwQUN3c2lBQ0FBSUFJZ0FSRFJBUXNnQkVFUWFpUUFDeVFBSUFBZ0FTQUNJQVFnQUNnQ0FDZ0NCQkVFQUNBQUlBTWdBQ2dDQUNnQ0FCRURBQXNHQUVIY3dBQUxId0JCM013QUtBSUFSUVJBUWVETUFDQUJOZ0lBUWR6TUFDQUFOZ0lBQ3d2WkF3SUNmd0orSXdCQklHc2lBaVFBQWtBZ0FVTC8vLy8vLy8vLy8vOEFneUlGUW9DQWdJQ0FnTUNBUEgwZ0JVS0FnSUNBZ0lEQS84TUFmVlFFUUNBQlFnU0dJQUJDUElpRUlRVWdBRUwvLy8vLy8vLy8vdytESWdCQ2dZQ0FnSUNBZ0lBSVdnUkFJQVZDZ1lDQWdJQ0FnSURBQUh3aEJBd0NDeUFGUW9DQWdJQ0FnSUNBUUgwaEJDQUFRb0NBZ0lDQWdJQ0FDSVZDQUZJTkFTQUVJQVZDQVlOOElRUU1BUXNnQUZBZ0JVS0FnSUNBZ0lEQS8vOEFWQ0FGUW9DQWdJQ0FnTUQvL3dCUkcwVUVRQ0FCUWdTR0lBQkNQSWlFUXYvLy8vLy8vLzhEZzBLQWdJQ0FnSUNBL1A4QWhDRUVEQUVMUW9DQWdJQ0FnSUQ0L3dBaEJDQUZRdi8vLy8vLy83Ly93d0JXRFFCQ0FDRUVJQVZDTUlpbklnTkJrZmNBU1EwQUlBSkJFR29nQUNBQlF2Ly8vLy8vL3orRFFvQ0FnSUNBZ01BQWhDSUVJQU5CZ2ZjQWF4RFlBU0FDSUFBZ0JFR0IrQUFnQTJzUTF3RWdBaWtEQ0VJRWhpQUNLUU1BSWdCQ1BJaUVJUVFnQWlrREVDQUNLUU1ZaEVJQVVxMGdBRUwvLy8vLy8vLy8vdytEaENJQVFvR0FnSUNBZ0lDQUNGb0VRQ0FFUWdGOElRUU1BUXNnQUVLQWdJQ0FnSUNBZ0FpRlFnQlNEUUFnQkVJQmd5QUVmQ0VFQ3lBQ1FTQnFKQUFnQkNBQlFvQ0FnSUNBZ0lDQWdIK0RoTDhMVUFFQmZnSkFJQU5Cd0FCeEJFQWdBaUFEUVVCcXJZZ2hBVUlBSVFJTUFRc2dBMFVOQUNBQ1FjQUFJQU5ycllZZ0FTQURyU0lFaUlRaEFTQUNJQVNJSVFJTElBQWdBVGNEQUNBQUlBSTNBd2dMVUFFQmZnSkFJQU5Cd0FCeEJFQWdBU0FEUVVCcXJZWWhBa0lBSVFFTUFRc2dBMFVOQUNBQ0lBT3RJZ1NHSUFGQndBQWdBMnV0aUlRaEFpQUJJQVNHSVFFTElBQWdBVGNEQUNBQUlBSTNBd2dMS1FBZ0FTQUJLQUlBUVE5cVFYQnhJZ0ZCRUdvMkFnQWdBQ0FCS1FNQUlBRXBBd2dRMWdFNUF3QUxpUmNERW44Q2ZnRjhJd0JCc0FScklna2tBQ0FKUVFBMkFpd0NmeUFCdlNJWVFuOVhCRUJCQVNFU0lBR2FJZ0c5SVJoQnNNQUFEQUVMUVFFaEVrR3p3QUFnQkVHQUVIRU5BQnBCdHNBQUlBUkJBWEVOQUJwQkFDRVNRUUVoRTBHeHdBQUxJUlVDUUNBWVFvQ0FnSUNBZ0lENC93Q0RRb0NBZ0lDQWdJRDQvd0JSQkVBZ0FFRWdJQUlnRWtFRGFpSU5JQVJCLy85N2NSQXdJQUFnRlNBU0VDc2dBRUhMd0FCQno4QUFJQVZCSUhFaUF4dEJ3OEFBUWNmQUFDQURHeUFCSUFGaUcwRURFQ3NNQVFzZ0NVRVFhaUVRQWtBQ2Z3SkFJQUVnQ1VFc2FoQnVJZ0VnQWFBaUFVUUFBQUFBQUFBQUFHSUVRQ0FKSUFrb0Fpd2lCa0VCYXpZQ0xDQUZRU0J5SWhaQjRRQkhEUUVNQXdzZ0JVRWdjaUlXUWVFQVJnMENJQWtvQWl3aEMwRUdJQU1nQTBFQVNCc01BUXNnQ1NBR1FSMXJJZ3MyQWl3Z0FVUUFBQUFBQUFDd1FhSWhBVUVHSUFNZ0EwRUFTQnNMSVFvZ0NVRXdhaUFKUWRBQ2FpQUxRUUJJR3lJUElRZ0RRQ0FJQW44Z0FVUUFBQUFBQUFEd1FXTWdBVVFBQUFBQUFBQUFBR1p4QkVBZ0Fhc01BUXRCQUFzaUF6WUNBQ0FJUVFScUlRZ2dBU0FEdUtGRUFBQUFBR1hOelVHaUlnRkVBQUFBQUFBQUFBQmlEUUFMQWtBZ0MwRUJTQVJBSUFzaEF5QUlJUVlnRHlFSERBRUxJQThoQnlBTElRTURRQ0FEUVIwZ0EwRWRTQnNoREFKQUlBaEJCR3NpQmlBSFNRMEFJQXl0SVJsQ0FDRVlBMEFnQmlBWVF2Ly8vLzhQZ3lBR05RSUFJQm1HZkNJWUlCaENnSlRyM0FPQUloaENnSlRyM0FOK2ZUNENBQ0FHUVFScklnWWdCMDhOQUFzZ0dLY2lBMFVOQUNBSFFRUnJJZ2NnQXpZQ0FBc0RRQ0FISUFnaUJra0VRQ0FHUVFScklnZ29BZ0JGRFFFTEN5QUpJQWtvQWl3Z0RHc2lBellDTENBR0lRZ2dBMEVBU2cwQUN3c2dBMEYvVEFSQUlBcEJHV3BCQ1cxQkFXb2hFU0FXUWVZQVJpRU5BMEJCQ1VFQUlBTnJJQU5CZDBnYklSY0NRQ0FHSUFkTkJFQWdCeUFIUVFScUlBY29BZ0FiSVFjTUFRdEJnSlRyM0FNZ0YzWWhGRUYvSUJkMFFYOXpJUTVCQUNFRElBY2hDQU5BSUFnZ0F5QUlLQUlBSWd3Z0YzWnFOZ0lBSUF3Z0RuRWdGR3doQXlBSVFRUnFJZ2dnQmtrTkFBc2dCeUFIUVFScUlBY29BZ0FiSVFjZ0EwVU5BQ0FHSUFNMkFnQWdCa0VFYWlFR0N5QUpJQWtvQWl3Z0Yyb2lBellDTENBUElBY2dEUnNpQ0NBUlFRSjBhaUFHSUFZZ0NHdEJBblVnRVVvYklRWWdBMEVBU0EwQUN3dEJBQ0VJQWtBZ0JpQUhUUTBBSUE4Z0IydEJBblZCQ1d3aENFRUtJUU1nQnlnQ0FDSU1RUXBKRFFBRFFDQUlRUUZxSVFnZ0RDQURRUXBzSWdOUERRQUxDeUFLUVFBZ0NDQVdRZVlBUmh0cklCWkI1d0JHSUFwQkFFZHhheUlESUFZZ0QydEJBblZCQ1d4QkNXdElCRUFnQTBHQXlBQnFJZzVCQ1cwaURFRUNkQ0FKUVRCcVFRUnlJQWxCMUFKcUlBdEJBRWdiYWtHQUlHc2hEVUVLSVFNZ0RpQU1RUWxzYXlJT1FRZE1CRUFEUUNBRFFRcHNJUU1nRGtFQmFpSU9RUWhIRFFBTEN3SkFRUUFnQmlBTlFRUnFJaEZHSUEwb0FnQWlEaUFPSUFOdUlnd2dBMnhySWhRYkRRQkVBQUFBQUFBQTREOUVBQUFBQUFBQThEOUVBQUFBQUFBQStEOGdGQ0FEUVFGMklndEdHMFFBQUFBQUFBRDRQeUFHSUJGR0d5QUxJQlJMR3lFYVJBRUFBQUFBQUVCRFJBQUFBQUFBQUVCRElBeEJBWEViSVFFQ1FDQVREUUFnRlMwQUFFRXRSdzBBSUJxYUlSb2dBWm9oQVFzZ0RTQU9JQlJySWdzMkFnQWdBU0Fhb0NBQllRMEFJQTBnQXlBTGFpSUROZ0lBSUFOQmdKVHIzQU5QQkVBRFFDQU5RUUEyQWdBZ0J5QU5RUVJySWcxTEJFQWdCMEVFYXlJSFFRQTJBZ0FMSUEwZ0RTZ0NBRUVCYWlJRE5nSUFJQU5CLzVQcjNBTkxEUUFMQ3lBUElBZHJRUUoxUVFsc0lRaEJDaUVESUFjb0FnQWlDMEVLU1EwQUEwQWdDRUVCYWlFSUlBc2dBMEVLYkNJRFR3MEFDd3NnRFVFRWFpSURJQVlnQXlBR1NSc2hCZ3NEUUNBR0lnc2dCMDBpREVVRVFDQUxRUVJySWdZb0FnQkZEUUVMQ3dKQUlCWkI1d0JIQkVBZ0JFRUljU0VUREFFTElBaEJmM05CZnlBS1FRRWdDaHNpQmlBSVNpQUlRWHRLY1NJREd5QUdhaUVLUVg5QmZpQURHeUFGYWlFRklBUkJDSEVpRXcwQVFYY2hCZ0pBSUF3TkFDQUxRUVJyS0FJQUlneEZEUUJCQ2lFT1FRQWhCaUFNUVFwd0RRQURRQ0FHSWdOQkFXb2hCaUFNSUE1QkNtd2lEbkJGRFFBTElBTkJmM01oQmdzZ0N5QVBhMEVDZFVFSmJDRURJQVZCWDNGQnhnQkdCRUJCQUNFVElBb2dBeUFHYWtFSmF5SURRUUFnQTBFQVNoc2lBeUFESUFwS0d5RUtEQUVMUVFBaEV5QUtJQU1nQ0dvZ0JtcEJDV3NpQTBFQUlBTkJBRW9iSWdNZ0F5QUtTaHNoQ2dzZ0NpQVRjaUlVUVFCSElRNGdBRUVnSUFJQ2Z5QUlRUUFnQ0VFQVNoc2dCVUZmY1NJTVFjWUFSZzBBR2lBUUlBZ2dDRUVmZFNJRGFpQURjNjBnRUJCSUlnWnJRUUZNQkVBRFFDQUdRUUZySWdaQk1Eb0FBQ0FRSUFaclFRSklEUUFMQ3lBR1FRSnJJaEVnQlRvQUFDQUdRUUZyUVMxQkt5QUlRUUJJR3pvQUFDQVFJQkZyQ3lBS0lCSnFJQTVxYWtFQmFpSU5JQVFRTUNBQUlCVWdFaEFySUFCQk1DQUNJQTBnQkVHQWdBUnpFREFDUUFKQUFrQWdERUhHQUVZRVFDQUpRUkJxUVFoeUlRTWdDVUVRYWtFSmNpRUlJQThnQnlBSElBOUxHeUlGSVFjRFFDQUhOUUlBSUFnUVNDRUdBa0FnQlNBSFJ3UkFJQVlnQ1VFUWFrME5BUU5BSUFaQkFXc2lCa0V3T2dBQUlBWWdDVUVRYWtzTkFBc01BUXNnQmlBSVJ3MEFJQWxCTURvQUdDQURJUVlMSUFBZ0JpQUlJQVpyRUNzZ0IwRUVhaUlISUE5TkRRQUxJQlFFUUNBQVFkUEFBRUVCRUNzTElBY2dDMDhOQVNBS1FRRklEUUVEUUNBSE5RSUFJQWdRU0NJR0lBbEJFR3BMQkVBRFFDQUdRUUZySWdaQk1Eb0FBQ0FHSUFsQkVHcExEUUFMQ3lBQUlBWWdDa0VKSUFwQkNVZ2JFQ3NnQ2tFSmF5RUdJQWRCQkdvaUJ5QUxUdzBESUFwQkNVb2hBeUFHSVFvZ0F3MEFDd3dDQ3dKQUlBcEJBRWdOQUNBTElBZEJCR29nQnlBTFNSc2hCU0FKUVJCcVFRaHlJUU1nQ1VFUWFrRUpjaUVMSUFjaENBTkFJQXNnQ0RVQ0FDQUxFRWdpQmtZRVFDQUpRVEE2QUJnZ0F5RUdDd0pBSUFjZ0NFY0VRQ0FHSUFsQkVHcE5EUUVEUUNBR1FRRnJJZ1pCTURvQUFDQUdJQWxCRUdwTERRQUxEQUVMSUFBZ0JrRUJFQ3NnQmtFQmFpRUdJQk5GUVFBZ0NrRUJTQnNOQUNBQVFkUEFBRUVCRUNzTElBQWdCaUFMSUFacklnWWdDaUFHSUFwSUd4QXJJQW9nQm1zaENpQUlRUVJxSWdnZ0JVOE5BU0FLUVg5S0RRQUxDeUFBUVRBZ0NrRVNha0VTUVFBUU1DQUFJQkVnRUNBUmF4QXJEQUlMSUFvaEJnc2dBRUV3SUFaQkNXcEJDVUVBRURBTERBRUxJQlZCQ1dvZ0ZTQUZRU0J4SWdzYklRb0NRQ0FEUVF0TERRQkJEQ0FEYXlJR1JRMEFSQUFBQUFBQUFDQkFJUm9EUUNBYVJBQUFBQUFBQURCQW9pRWFJQVpCQVdzaUJnMEFDeUFLTFFBQVFTMUdCRUFnR2lBQm1pQWFvYUNhSVFFTUFRc2dBU0Fhb0NBYW9TRUJDeUFRSUFrb0Fpd2lCaUFHUVI5MUlnWnFJQVp6clNBUUVFZ2lCa1lFUUNBSlFUQTZBQThnQ1VFUGFpRUdDeUFTUVFKeUlROGdDU2dDTENFSUlBWkJBbXNpRENBRlFROXFPZ0FBSUFaQkFXdEJMVUVySUFoQkFFZ2JPZ0FBSUFSQkNIRWhDQ0FKUVJCcUlRY0RRQ0FISWdVQ2Z5QUJtVVFBQUFBQUFBRGdRV01FUUNBQnFnd0JDMEdBZ0lDQWVBc2lCa0dnd0FCcUxRQUFJQXR5T2dBQUlBRWdCcmVoUkFBQUFBQUFBREJBb2lFQkFrQWdCVUVCYWlJSElBbEJFR3ByUVFGSERRQUNRQ0FJRFFBZ0EwRUFTZzBBSUFGRUFBQUFBQUFBQUFCaERRRUxJQVZCTGpvQUFTQUZRUUpxSVFjTElBRkVBQUFBQUFBQUFBQmlEUUFMSUFCQklDQUNJQThDZndKQUlBTkZEUUFnQnlBSmEwRVNheUFEVGcwQUlBTWdFR29nREd0QkFtb01BUXNnRUNBSlFSQnFheUFNYXlBSGFnc2lBMm9pRFNBRUVEQWdBQ0FLSUE4UUt5QUFRVEFnQWlBTklBUkJnSUFFY3hBd0lBQWdDVUVRYWlBSElBbEJFR3BySWdVUUt5QUFRVEFnQXlBRklCQWdER3NpQTJwclFRQkJBQkF3SUFBZ0RDQURFQ3NMSUFCQklDQUNJQTBnQkVHQXdBQnpFREFnQ1VHd0JHb2tBQ0FDSUEwZ0FpQU5TaHNMTFFBZ0FGQkZCRUFEUUNBQlFRRnJJZ0VnQUtkQkIzRkJNSEk2QUFBZ0FFSURpQ0lBUWdCU0RRQUxDeUFCQ3pVQUlBQlFSUVJBQTBBZ0FVRUJheUlCSUFDblFROXhRYURBQUdvdEFBQWdBbkk2QUFBZ0FFSUVpQ0lBUWdCU0RRQUxDeUFCQzhFQ0FRTi9Jd0JCMEFGcklnSWtBQ0FDSUFFMkFzd0JRUUFoQVNBQ1FhQUJha0VBUVNnUU14b2dBaUFDS0FMTUFUWUN5QUVDUUVFQUlBSkJ5QUZxSUFKQjBBQnFJQUpCb0FGcUVGMUJBRWdOQUNBQUtBSk1RUUJPSVFFZ0FDZ0NBQ0VESUFBc0FFcEJBRXdFUUNBQUlBTkJYM0UyQWdBTElBTkJJSEVoQkFKL0lBQW9BakFFUUNBQUlBSkJ5QUZxSUFKQjBBQnFJQUpCb0FGcUVGME1BUXNnQUVIUUFEWUNNQ0FBSUFKQjBBQnFOZ0lRSUFBZ0FqWUNIQ0FBSUFJMkFoUWdBQ2dDTENFRElBQWdBallDTENBQUlBSkJ5QUZxSUFKQjBBQnFJQUpCb0FGcUVGMGdBMFVOQUJvZ0FFRUFRUUFnQUNnQ0pCRUlBQm9nQUVFQU5nSXdJQUFnQXpZQ0xDQUFRUUEyQWh3Z0FFRUFOZ0lRSUFBb0FoUWFJQUJCQURZQ0ZFRUFDeG9nQUNBRUlBQW9BZ0J5TmdJQUlBRkZEUUFMSUFKQjBBRnFKQUFMTlFFQmZ5QUJJQUFvQWdRaUFrRUJkV29oQVNBQUtBSUFJUUFnQVNBQ1FRRnhCSDhnQVNnQ0FDQUFhaWdDQUFVZ0FBc1JBUUFMRFFBZ0FDZ0NBRUVFYXlnQ0FBdUxBZ0FDUUNBQUJIOGdBVUgvQUUwTkFRSkFRWWpMQUNnQ0FDZ0NBRVVFUUNBQlFZQi9jVUdBdndOR0RRTU1BUXNnQVVIL0QwMEVRQ0FBSUFGQlAzRkJnQUZ5T2dBQklBQWdBVUVHZGtIQUFYSTZBQUJCQWc4TElBRkJnTEFEVDBFQUlBRkJnRUJ4UVlEQUEwY2JSUVJBSUFBZ0FVRS9jVUdBQVhJNkFBSWdBQ0FCUVF4MlFlQUJjam9BQUNBQUlBRkJCblpCUDNGQmdBRnlPZ0FCUVFNUEN5QUJRWUNBQkd0Qi8vOC9UUVJBSUFBZ0FVRS9jVUdBQVhJNkFBTWdBQ0FCUVJKMlFmQUJjam9BQUNBQUlBRkJCblpCUDNGQmdBRnlPZ0FDSUFBZ0FVRU1ka0UvY1VHQUFYSTZBQUZCQkE4TEMwR0V6QUJCR1RZQ0FFRi9CVUVCQ3c4TElBQWdBVG9BQUVFQkN5QUJBbjhnQUJCWFFRRnFJZ0VRS1NJQ1JRUkFRUUFQQ3lBQ0lBQWdBUkJIQzAwQkFuOGdBUzBBQUNFQ0FrQWdBQzBBQUNJRFJRMEFJQUlnQTBjTkFBTkFJQUV0QUFFaEFpQUFMUUFCSWdORkRRRWdBVUVCYWlFQklBQkJBV29oQUNBQ0lBTkdEUUFMQ3lBRElBSnJDN29CQVFGL0lBRkJBRWNoQWdKQUFrQUNRQ0FCUlEwQUlBQkJBM0ZGRFFBRFFDQUFMUUFBUlEwQ0lBQkJBV29oQUNBQlFRRnJJZ0ZCQUVjaEFpQUJSUTBCSUFCQkEzRU5BQXNMSUFKRkRRRUxBa0FnQUMwQUFFVU5BQ0FCUVFSSkRRQURRQ0FBS0FJQUlnSkJmM01nQWtHQmdvUUlhM0ZCZ0lHQ2hIaHhEUUVnQUVFRWFpRUFJQUZCQkdzaUFVRURTdzBBQ3dzZ0FVVU5BQU5BSUFBdEFBQkZCRUFnQUE4TElBQkJBV29oQUNBQlFRRnJJZ0VOQUFzTFFRQUxKZ0VCZnlNQVFSQnJJZ0VrQUNBQklBQTJBZ3dnQVNnQ0RDRUFFSGNnQVVFUWFpUUFJQUFMS0FFQmZ5TUFRUkJySWdBa0FDQUFRZk0wTmdJTVFiQThRUWNnQUNnQ0RCQUpJQUJCRUdva0FBc29BUUYvSXdCQkVHc2lBQ1FBSUFCQjFEUTJBZ3hCaUR4QkJpQUFLQUlNRUFrZ0FFRVFhaVFBQ3djQUlBQW9BbXdMS0FFQmZ5TUFRUkJySWdBa0FDQUFRZVl5TmdJTVFlQTdRUVVnQUNnQ0RCQUpJQUJCRUdva0FBc29BUUYvSXdCQkVHc2lBQ1FBSUFCQnlESTJBZ3hCdUR0QkJDQUFLQUlNRUFrZ0FFRVFhaVFBQ3lnQkFYOGpBRUVRYXlJQUpBQWdBRUhVTURZQ0RFR2dPVUVBSUFBb0Fnd1FDU0FBUVJCcUpBQUxLUUVCZnlNQVFSQnJJZ0FrQUNBQVFlVXZOZ0lNUWRqSEFDQUFLQUlNUVFnUUV5QUFRUkJxSkFBTFFRRUJmeUFCSUFBb0FnUWlDRUVCZFdvaEFTQUFLQUlBSVFBZ0FTQUNJQU1nQkNBRklBWWdCeUFJUVFGeEJIOGdBU2dDQUNBQWFpZ0NBQVVnQUFzUkd3QUxLUUVCZnlNQVFSQnJJZ0FrQUNBQVFkOHZOZ0lNUWN6SEFDQUFLQUlNUVFRUUV5QUFRUkJxSkFBTExRRUJmeU1BUVJCcklnQWtBQ0FBUWRFdk5nSU1RY0RIQUNBQUtBSU1RUVJCQUVGL0VBc2dBRUVRYWlRQUN6VUJBWDhqQUVFUWF5SUFKQUFnQUVITUx6WUNERUcweHdBZ0FDZ0NERUVFUVlDQWdJQjRRZi8vLy84SEVBc2dBRUVRYWlRQUN5MEJBWDhqQUVFUWF5SUFKQUFnQUVHL0x6WUNERUdveHdBZ0FDZ0NERUVFUVFCQmZ4QUxJQUJCRUdva0FBczFBUUYvSXdCQkVHc2lBQ1FBSUFCQnV5ODJBZ3hCbk1jQUlBQW9BZ3hCQkVHQWdJQ0FlRUgvLy8vL0J4QUxJQUJCRUdva0FBc3ZBUUYvSXdCQkVHc2lBQ1FBSUFCQnJDODJBZ3hCa01jQUlBQW9BZ3hCQWtFQVFmLy9BeEFMSUFCQkVHb2tBQXN4QVFGL0l3QkJFR3NpQUNRQUlBQkJwaTgyQWd4QmhNY0FJQUFvQWd4QkFrR0FnSDVCLy84QkVBc2dBRUVRYWlRQUN5NEJBWDhqQUVFUWF5SUFKQUFnQUVHWUx6WUNERUhzeGdBZ0FDZ0NERUVCUVFCQi93RVFDeUFBUVJCcUpBQUxMd0VCZnlNQVFSQnJJZ0FrQUNBQVFZd3ZOZ0lNUWZqR0FDQUFLQUlNUVFGQmdIOUIvd0FRQ3lBQVFSQnFKQUFMTHdFQmZ5TUFRUkJySWdBa0FDQUFRWWN2TmdJTVFlREdBQ0FBS0FJTVFRRkJnSDlCL3dBUUN5QUFRUkJxSkFBTGt3VUNCMzhCZmlNQVFaQURheUlJSVFjZ0NDUUFJQUFnQVRZQ2FDQUlJQUFvQW1RaUNFRURkRUVQYWtGd2NXc2lDU0lLSkFBZ0NFRUJUZ1JBSUFBb0FtQWhERUVBSVFFRFFDQUpJQUZCQTNRaUMyb2dDeUFNYWlzREFEa0RBQ0FCUVFGcUlnRWdDRWNOQUFzTElBZEI0QUpxRUZJaURDQUFLQUpjSUFrUVl5QUtJQUFvQWx3aUNFRURkRUVQYWtGd2NXc2lDaVFBSUFoQkFVNEVRQ0FBS0FKWUlRbEJBQ0VCQTBBZ0NpQUJRUU4wSWd0cUlBa2dDMm9yQXdBNUF3QWdBVUVCYWlJQklBaEhEUUFMQ3lBSFFiQUNhaEJTSWdrZ0FDZ0NYQ0FLRUdNZ0IwR0lBV29Ra0FJaEFTQUhRZUFBYWhDTUFpRUtJQWRCTUdvUVVpRUxRYkFYS0FJQUlnZ3BBd0FoRGlBQUtBSmNJUTBDUUNBQUtBSlFJQUFvQWt4SEJFQWdEU0FKSUFFZ0RoQ0xBZ3dCQ3lBTklBa2dCU0FCSUE0UWlnSUxJQUVnQkNBRElBZ3BBd0FRZ3dJZ0FTQUdJQUlnQ0NrREFCQ0dBaUFCSUF3Z0NDa0RBQkNGQWlBQklBQW9BamdnQUNnQ05HdEJBblVnQUNnQ1JDQUFLQUpBYTBFQ2RTQUlLUU1BRUljQ0lBQ3RRaUNHSVE0Q1FDQUFLQUpRSUFBb0FreEhCRUFnQjBIVUNUWUNHQ0FISUE1Q0ZJUTNBaHdnQnlBSFFSaHFOZ0lvSUFFZ0IwRVlhaUFJS1FNQUVQNEJJQWNvQWlnaUFpQUhRUmhxUmdSQUlBSWdBaWdDQUNnQ0VCRUFBQXdDQ3lBQ1JRMEJJQUlnQWlnQ0FDZ0NGQkVBQUF3QkN5QUhRZUFPTmdJQUlBY2dEa0lWaERjQ0JDQUhJQWMyQWhBZ0FTQUhJQWdwQXdBUWdBSWdCeWdDRUNJQ0lBZEdCRUFnQWlBQ0tBSUFLQUlRRVFBQURBRUxJQUpGRFFBZ0FpQUNLQUlBS0FJVUVRQUFDeUFCSUFzZ0NpQUlLUU1BRVB3QklBQWdDaWdDSENnQ0FEWUNiQ0FMRUVRYUlBb1FleG9nQVJCOEdpQUpFRVFhSUF3UVJCb2dCMEdRQTJva0FFRUJDMFlCQVg4akFFRVFheUlCSkFBZ0FTQUFOZ0lNQW44akFFRVFheUlBSUFFb0FndzJBZ2dnQUNBQUtBSUlLQUlFTmdJTUlBQW9BZ3dMRU9FQklRQWdBVUVRYWlRQUlBQUxqREVDR1g4RWZDTUFRVEJySWdna0FDQUFRZ0EzQTNnQ1FDQUFLQUlFSWd3Z0FDZ0NBQ0lMYWlJSlJRMEFJQXhGQkVBZ0FTQUxJQUlRSlNBTFFRRklEUUVEUUNBRFFRTjBJZ0lnQVNnQ0hHb2dBQ2dDVUNBQ2Fpc0RBRGtEQUNBQUtBSndJQU5xTFFBQUJFQWdBU2dDSENBQ2FpQUJLQUljSUFKcUt3TUFJaHhFQUFBQUFBQUFBQUFnSEVRQUFBQUFBQUFBQUdRYk9RTUFDeUFEUVFGcUlnTWdDMGNOQUFzTUFRc2dBQ2dDQ0NFRElBRWdDU0FDRUNVZ0FFR0VBV29nQ1NBQ0VDVWdBRUdrQVdvZ0NTQUNFQ1VnQUVIOEFtb2lFeUFKSUFJUUpTQUFRWndEYWlBSklBSVFKU0FBUWZ3RWFpSVVJQU1nQWhBbElBQkIzQU5xSUF3Z0FoQWxJQUJCbkFWcUlBa2dBaEFsSUFCQnZBTnFJQWtnQWhBbElBbEJBVWdpRGtVRVFFRUFJUU1EUUNBRFFRTjBJZ1FnQVNnQ0hHcENBRGNEQUNBQUtBSzRCU0FFYWtLQWdJQ0FnSUNBK0Q4M0F3QWdBMEVCYWlJRElBbEhEUUFMQ3lBSVFRQTJBaEFnQ0VFQU5nSVVJQUJCM0FScUlSa2dDMEVCYXlFWUlBeEJBV3NoRlNBQVFld0JhaUVXSUFCQi9BVnFJUThnQUVIY0JXb2hFQ0FBUWJ3RmFpRVJJQUJCbEFKcUlSb2dBRUc4QW1vaEd3TkFRUUFoQXdKQUlBbEJBRXdFUUNBQUlBRWdGQ0FUSUFoQkNHb1FZQXdCQ3dOQUFuOUJBU0FBS0FKd0lBTnFMUUFBUlEwQUdpTUFRUkJySWdRZ0FTZ0NIQ0FEUVFOMGFpc0RBRGtEQ0NBRVJBQUFBQUFBQUFBQU9RTUFJQVFyQXdnZ0JDc0RBR1lMUWRjbElBSVFJaUFEUVFGcUlnTWdDVWNOQUFzZ0FDQUJJQlFnRXlBSVFRaHFFR0JCQUNFRElBbEJBRXdOQUFOQUFud0NRQ0FBS0FKd0lBTnFMUUFBUlEwQUl3QkJFR3NpQkNBRFFRTjBJZ1VnQVNnQ0hHb3JBd0E1QXdnZ0JFUUFBQUFBQUFBQUFEa0RBQ0FFS3dNSUlBUXJBd0JpRFFBakFFRVFheUlFSUFBb0FwZ0RJQVZxS3dNQU9RTUlJQVJFQUFBQUFBQUFBQUE1QXdCRUFBQUFBQUFBQUFBZ0JDc0RDQ0FFS3dNQVpBMEJHZ3NnQUNnQ21BTWdBMEVEZEdvckF3Q2FDeUVjSUFBb0FyZ0RJQU5CQTNScUlCdzVBd0FnQTBFQmFpSURJQWxIRFFBTFFRQWhBMEVBSVFZZ0NVRUFUQTBBQTBBQ1FDQUFLQUp3SUFOcUxRQUFSUTBBSXdCQkVHc2lCQ0FEUVFOMElnVWdBU2dDSEdvckF3QTVBd2dnQkVRQUFBQUFBQUFBQURrREFDQUVLd01JSUFRckF3QmlEUUFqQUVFUWF5SUVJQUFvQXJnRElBVnFLd01BT1FNSUlBUkVBQUFBQUFBQUFBQTVBd0FnQmlBRUt3TUlJQVFyQXdCa2NpRUdDeUFEUVFGcUlnTWdDVWNOQUF0QkFDRURJQVpCQVhGRkJFQWdDVUVBVEEwQkEwQWdBMEVEZENJRUlBQW9Bc0FCYWlBQktBSWNJQVJxS3dNQU9RTUFJQU5CQVdvaUF5QUpSdzBBQ3d3QkN3TkFJd0JCRUdzaUJDQURRUU4wSWdVZ0FTZ0NIR29yQXdBNUF3Z2dCRVFBQUFBQUFBQUFBRGtEQUFKQUlBUXJBd2dnQkNzREFHSU5BQ01BUVJCcklnUWdBQ2dDdUFNZ0JXb3JBd0E1QXdnZ0JFUUFBQUFBQUFBQUFEa0RBQ0FFS3dNSUlBUXJBd0JrUlEwQUlBRW9BaHdnQldvaUJDQUVLd01BUkhXVVAycm5MOG9nb0RrREFBc2dDU0FEUVFGcUlnTkhEUUFMREFFTElBQW9BZ2doRFNBQUtBSUVJUW9nR3lBQUtBSUFJZ2NnQWhBbElCb2dCeUFLYWlBS0lBSVFOaUFXSUFvZ0NpQU5haUlTSUFJUU5nSkFJQWRCQVVnTkFFRUFJUVFnQ2tFQlRnUkFBMEFDZkVRQUFBQUFBQUR3UHlBQUtBSndJQVJxTFFBQVJRMEFHa1FBQUFBQUFBQUFBRVFBQUFBQUFBRHdQd0ovSXdCQkVHc2lBeUFCS0FJY0lBUkJBM1JxS3dNQU9RTUlJQU5FQUFBQUFBQUFBQUE1QXdBZ0F5c0RDQ0FES3dNQVlRc2JDeUljUkpYV0p1Z0xMZ0UrSUFoQktHb2dDRUVnYWlBSVFSaHFFRTBnQkVFRGRDSUZJQUFvQXRnQ2FpQWNJQWdyQXlpaUlBZ3JBeUJFbGRZbTZBc3VBVDZpb0RrREFFRUFJUU1EUUNBRFFRTjBJZ1lnQkVFQ2RDSVhJQUFvQXJnQ2FpZ0NBR29nQUNnQ01DQVhhaWdDQUNBR2Fpc0RBQ0ljSUFnckF5aWlPUU1BSUFBb0FwQUNJQU5CQW5ScUtBSUFJQVZxSUJ3Z0NDc0RJSnFpT1FNQUlBTkJBV29pQXlBS1J3MEFDeUFFUVFGcUlnUWdCMGNOQUF3Q0N3QUxBMEFDZkVRQUFBQUFBQUR3UHlBQUtBSndJQVJxTFFBQVJRMEFHa1FBQUFBQUFBQUFBRVFBQUFBQUFBRHdQd0ovSXdCQkVHc2lBeUFCS0FJY0lBUkJBM1JxS3dNQU9RTUlJQU5FQUFBQUFBQUFBQUE1QXdBZ0F5c0RDQ0FES3dNQVlRc2JDeUljUkpYV0p1Z0xMZ0UrSUFoQktHb2dDRUVnYWlBSVFSaHFFRTBnQUNnQzJBSWdCRUVEZEdvZ0hDQUlLd01vb2lBSUt3TWdSSlhXSnVnTExnRStvcUE1QXdBZ0JFRUJhaUlFSUFkSERRQUxDd0pBQWtBZ0NrRUJUZ1JBUVFBaEJpQUhJQTFJQkVBRFFDQUhJUU1EUUNBQUtBS1FBaUFHUVFKMGFpZ0NBQ0FEUVFOMGFpQUFLQUl3SUFOQkFuUnFLQUlBSUFaQkEzUnFLd01BT1FNQUlBTkJBV29pQXlBTlJ3MEFDeUFHUVFGcUlnWWdDa2NOQUFzTEFrQWdCMEVBVEFSQVFRQWhCaUFOUVFGSURRRURRQUpBSUFZZ0Iyb2lCU0FBS0FKd2FpMEFBRVVOQUVFQUlRTWpBRUVRYXlJRUlBRW9BaHdnQlVFRGRHb3JBd0E1QXdnZ0JFUUFBQUFBQUFBQUFEa0RBQ0FFS3dNSUlBUXJBd0JpRFFBRFFDQUFLQUtRQWlBR1FRSjBhaWdDQUNBRFFRTjBha0lBTndNQUlBTkJBV29pQXlBTlJ3MEFDd3NnQmtFQmFpSUdJQXBIRFFBTERBTUxRUUFoQXlBTlFRRk9CRUFEUUFKQUlBTWdCMm9pRnlBQUtBSndhaTBBQUVVTkFFRUFJUVpCQUNFRkl3QkJFR3NpQkNBQktBSWNJQmRCQTNScUt3TUFPUU1JSUFSRUFBQUFBQUFBQUFBNUF3QWdCQ3NEQ0NBRUt3TUFZZzBBQTBBZ0FDZ0NrQUlnQTBFQ2RHb29BZ0FnQlVFRGRHcENBRGNEQUNBRlFRRnFJZ1VnRFVjTkFBc0RRQ0FBS0FLNEFpQUdRUUowYWlnQ0FDQURRUU4wYWtJQU53TUFJQVpCQVdvaUJpQUhSdzBBQ3dzZ0EwRUJhaUlESUFwSERRQU1CQXNBQ3dOQUFrQWdBeUFIYWlJRklBQW9BbkJxTFFBQVJRMEFRUUFoQmlNQVFSQnJJZ1FnQVNnQ0hDQUZRUU4wYWlzREFEa0RDQ0FFUkFBQUFBQUFBQUFBT1FNQUlBUXJBd2dnQkNzREFHSU5BQU5BSUFBb0FyZ0NJQVpCQW5ScUtBSUFJQU5CQTNScVFnQTNBd0FnQmtFQmFpSUdJQWRIRFFBTEN5QURRUUZxSWdNZ0NrY05BQXNNQWdzRFFDQUdJQWRxSWdRZ0FDZ0NjR290QUFBRVFDTUFRUkJySWdNZ0FTZ0NIQ0FFUVFOMGFpc0RBRGtEQ0NBRFJBQUFBQUFBQUFBQU9RTUFJQU1yQXdnZ0F5c0RBR0VhQ3lBS0lBWkJBV29pQmtjTkFBc01BUXNnRVNBU1FRRnFJZ01nQWhBbElCQWdBeUFDRUNVZ0R5QURJQUlRSlNBV0lBb2dFaUFSSUJBZ0R5QUNFSDBNQVF0QkFDRUVBMEFnQkNBTmFpRUZRUUFoQXdOQUlBVkJBM1FpQmlBQUtBS1FBaUFEUVFKMGFpZ0NBR3BDQURjREFDQURRUUZxSWdNZ0NrY05BQXNnQUNnQ2tBSWdCRUVDZEdvb0FnQWdCbW9nQUNnQ3VBVWdCRUVEZEdvckF3QkVsZFltNkFzdUFUNmlPUU1BSUFSQkFXb2lCQ0FLUncwQUN5QVJJQkpCQVdvaUF5QUNFQ1VnRUNBRElBSVFKU0FQSUFNZ0FoQWxJQllnQ2lBU0lCRWdFQ0FQSUFJUWZVRUFJUVFEUUFKL0l3QkJFR3NpQlNBRUlnTkJBM1FpQmlBQUtBS1FBaUFEUVFKMGFpZ0NBR29yQXdBNUF3Z2dCVVFBQUFBQUFBQUFBRGtEQUNBRkt3TUlJQVVyQXdCakN3UkFBMEFnQUNnQ2tBSWdBMEVDZEdvb0FnQWdCbW9pQlNBRkt3TUFtamtEQUNBRFFRRnFJZ01nQ2tjTkFBc0xRUUVoQlVFQUlRWWdCRUVCYWlJRUlBcEhEUUFMQTBCQkFDRURBMEFnQUNnQ3VBSWdBeUFIYWtFQ2RHb29BZ0FnQmtFRGRHb2dBQ2dDa0FJZ0JrRUNkR29vQWdBZ0EwRURkR29yQXdBNUF3QWdBMEVCYWlJRElBVkhEUUFMSUFWQkFXb2hCU0FHUVFGcUlnWWdDa2NOQUFzTEFrQUNRQU5BQWtBZ0FDZ0NnQUVpQTBFQlRnUkFJQWdvQWhBZ0EwNE5BUXNnQUNBQklCUWdFeUFJUVFocUVHQkJBQ0VESUE1RkJFQURRQ0FEUVFOMElnUWdBQ2dDdUFOcUlBQW9BcGdESUFScUt3TUFtamtEQUFKQUlBQW9BbkFnQTJvdEFBQkZEUUFqQUVFUWF5SUZJQUVvQWh3Z0JHb3JBd0E1QXdnZ0JVUUFBQUFBQUFBQUFEa0RBQ0FGS3dNSUlBVXJBd0JpRFFBZ0FDZ0N1QU1nQkdwQ0FEY0RBQXNnQTBFQmFpSURJQWxIRFFBTEN3SkFBa0FDUUNBTFFRRk9CRUFDUUNBTVFRRklJZ1VFUUVFQUlRTURRQ0FEUVFOMElnUWdBQ2dDdUFOcUlnY2dCeXNEQUNBQUtBTFlBaUFFYWlzREFLTTVBd0FnQTBFQmFpSURJQXRIRFFBTERBRUxRUUFoQkNBTVFRRkdCRUFEUUNBRVFRTjBJZ01nQUNnQ3VBTnFJZ2NnQnlzREFDQUFLQUxZQWlBRGFpc0RBS001QXdBZ0FDZ0N1QU1pQnlBTFFRTjBhaUlHSUFZckF3QWdBeUFIYWlzREFDQUFLQUs0QWlBRVFRSjBhaWdDQUNzREFLS2hPUU1BSUFSQkFXb2lCQ0FMUncwQURBSUxBQXNEUUNBRVFRTjBJZ01nQUNnQ3VBTnFJZ2NnQnlzREFDQUFLQUxZQWlBRGFpc0RBS001QXdBZ0FDZ0N1QU1pQnlBTFFRTjBhaUlHSUFZckF3QWdBeUFIYWlzREFDSWNJQVJCQW5RaUJ5QUFLQUs0QW1vb0FnQXJBd0Npb1RrREFFRUJJUU1EUUNBQUtBSzRBeUFESUF0cVFRTjBhaUlHSUFZckF3QWdIQ0FBS0FLNEFpQUhhaWdDQUNBRFFRTjBhaXNEQUtLaE9RTUFJQU5CQVdvaUF5QU1SdzBBQ3lBRVFRRnFJZ1FnQzBjTkFBc0xJQVZGRFFFZ0dDRURJQXRCQUV3TkF3d0NDeUFNUVFCTURRSUxRUUFoQkFOQUlBUWlBeUFMYWlJRVFRTjBJZ2NnQUNnQ3VBTnFJZ1VnQlNzREFDQUVRUUowSWdVZ0FDZ0N1QUpxS0FJQUlBTkJBM1JxS3dNQW96a0RBQUpBSUFOQkFXb2lCQ0FNVGcwQUlBQW9BcmdESWdZZ0JDQUxha0VEZEdvaUNpQUtLd01BSUFZZ0Iyb3JBd0FpSENBQUtBSzRBaUFGYWlnQ0FDQUVRUU4wYWlzREFLS2hPUU1BSUFOQkFtb2lBeUFNUmcwQUEwQWdBQ2dDdUFNZ0F5QUxha0VEZEdvaUJ5QUhLd01BSUJ3Z0FDZ0N1QUlnQldvb0FnQWdBMEVEZEdvckF3Q2lvVGtEQUNBRFFRRnFJZ01nREVjTkFBc0xJQVFnREVjTkFBc2dGU0VFQTBBQ1FDQUVJQlZPQkVBZ0FDZ0N1QUlnQkNBTGFpSUZRUUowYWlnQ0FDRUhJQUFvQXJnRElRWkVBQUFBQUFBQUFBQWhIUXdCQ3lBQUtBSzRBaUFFSUF0cUlnVkJBblJxS0FJQUlRY2dBQ2dDdUFNaEJrUUFBQUFBQUFBQUFDRWRJQVFoQXdOQUlCMGdCeUFEUVFGcUlnTkJBM1JxS3dNQUlBWWdBeUFMYWtFRGRHb3JBd0Npb0NFZElBTWdGVWNOQUFzTElBWWdCVUVEZEdvaUF5QURLd01BSUIyaElBY2dCRUVEZEdvckF3Q2pPUU1BSUFSQkFFb2hBeUFFUVFGcklRUWdBdzBBQ3lBTFFRQk1EUUVnR0NJRUlRTWdERUVBVEEwQUEwQWdBQ2dDdUFJZ0JFRUNkR29vQWdBaEJ5QUFLQUs0QXlFRlFRQWhBMFFBQUFBQUFBQUFBQ0VkQTBBZ0hTQUhJQU5CQTNScUt3TUFJQVVnQXlBTGFrRURkR29yQXdDaW9DRWRJQU5CQVdvaUF5QU1SdzBBQ3lBRklBUkJBM1FpQTJvaUJTQUZLd01BSUIyaElBQW9BdGdDSUFOcUt3TUFvemtEQUNBRVFRQktJUU1nQkVFQmF5RUVJQU1OQUFzTUFRc0RRQ0FEUVFOMElnUWdBQ2dDdUFOcUlnVWdCU3NEQUNBQUtBTFlBaUFFYWlzREFLTTVBd0FnQTBFQVNpRUVJQU5CQVdzaEF5QUVEUUFMQzBFQUlRTWdEa1VFUUFOQUlBTkJBM1FpQkNBQUtBS2dBV29nQVNnQ0hDQUVhaXNEQUNBQUtBSzRBeUFFYWlzREFLQTVBd0FnQTBFQmFpSURJQWxIRFFBTEN3SkFJQUFvQWdnaUJVRUJTQVJBUkFBQUFBQUFBQUFBSVI0TUFRc2dBQ2dDQUNFRUlBQW9BZ1JCQVdzaEIwRUFJUU5FQUFBQUFBQUFBQUFoSGdOQUlBQW9BakFnQTBFQ2RHb29BZ0JCQVNBQUtBS2dBU0FFUVFOMGFrRUJJQWRCQVdvUUxDRWNJQjRnQXlBRVNBUjhJQndnQUNnQ29BRWdBMEVEZEdvckF3Q2dCU0FjQ3lBQUtBSlFJQU5CQTNScUt3TUFvU0ljSUJ4RUFBQUFBQUFBNEQraW9xQWhIaUFEUVFGcUlnTWdCVWNOQUFzTElBZ3JBd2doSENNQVFSQnJJZ01nSGprRENDQURJQnc1QXdBZ0F5c0RDQ0FES3dNQVpnMEFRUUFoQTBRQUFBQUFBQUFBQUNFZEFrQWdDVUVBVEFSQVJKcGtmc1VPRzFGS0lSeEJmeUVHUkFBQUFBQUFBQUFBSVI0TUFRc0RRQ0FkSUFBb0FyZ0RJQU5CQTNScUt3TUFJaHdnSEtLZ0lSMGdBMEVCYWlJRElBbEhEUUFMUVg4aEJrRUFJUU5FbW1SK3hRNGJVVW9oSENBZG55RWVJQTROQUFOQUFrQWdBQ2dDY0NBRGFpMEFBRVVOQUNNQVFSQnJJZ1FnQTBFRGRDSUZJQUFvQXJnRGFpc0RBRGtEQ0NBRVJBQUFBQUFBQUFBQU9RTUFJQVFyQXdnZ0JDc0RBR05GRFFBZ0F5QUdBbjhnQVNnQ0hDQUZhaXNEQUNBQUtBSzRBeUFGYWlzREFKb2dIQkNBQVNJZElSOGpBRUVRYXlJRUlCODVBd2dnQkNBY09RTUFJQVFyQXdnZ0JDc0RBR01MR3lFR0lCMGhIQXNnQTBFQmFpSURJQWxIRFFBTEN5TUFRUkJySWdNZ0hqa0RDQ0FEUkFBQUFBQUFBQUFBT1FNQUlBTXJBd2dnQXlzREFHRU5BRUVBSVFNZ0hFUUFBQUFBQUFEd1B5QWNSQUFBQUFBQUFQQS9ZeHNoSGlBT1JRUkFBMEFnQTBFRGRDSUVJQUVvQWh4cUt3TUFJQjRnQUNnQ3VBTWdCR29yQXdDaW9DRWRJQUFvQXFBQklBUnFJQjFFQUFBQUFBQUFBQUFnSFVRQUFBQUFBQUFBQUdRYklCMGdBQ2dDY0NBRGFpMEFBQnM1QXdBZ0EwRUJhaUlESUFsSERRQUxDeU1BUVJCcklnTWdIamtEQ0NBRElCdzVBd0FnQXlzRENDQURLd01BWVNFREFrQWdCa0VBU0EwQUlBTkZEUUFnQUNnQ29BRWdCa0VEZEdwQ0FEY0RBQXRCQUNFRVFRQWhCaUFKUVFCTURRSURRQ01BUVJCcklnTWdCRUVEZENJRklBQW9BcUFCYWlzREFEa0RDQ0FEUkFBQUFBQUFBQUFBT1FNQUFrQWdBeXNEQ0NBREt3TUFZZzBBSXdCQkVHc2lBeUFCS0FJY0lBVnFLd01BT1FNSUlBTkVBQUFBQUFBQUFBQTVBd0FnQXlzRENDQURLd01BWVEwQUlBdEJmM05CSDNaQmtDNGdBaEFpSUF4QmYzTkJIM1pCa0M0Z0FoQWlRUUZCa0M0Z0FoQWlRUUZCa0M0Z0FoQWlRUUZCa0M0Z0FoQWlJQmtnRENBQ0VDVUNRQ0FFSUF0SUJFQkJBQ0VESUF4QkFFd0VRQ0FBS0FMWUFpQUZha0tBZ0lDQWdJQ0ErRDgzQXdBTUFnc0RRQ0FEUVFOMElnY2dBQ2dDK0FScUlBUkJBblFpQmlBQUtBSzRBbW9vQWdBZ0Iyb3JBd0E1QXdBZ0FDZ0N1QUlnQm1vb0FnQWdCMnBDQURjREFDQURRUUZxSWdNZ0RFY05BQXNnQUNnQzJBSWdCV3BDZ0lDQWdJQ0FnUGcvTndNQVFRQWhCUU5BQW44akFFRVFheUlESUFWQkEzUWlCeUFBS0FMNEJHb3JBd0E1QXdnZ0EwUUFBQUFBQUFBQUFEa0RBQ0FES3dNSUlBTXJBd0JpQ3dSQUlBVWdDMnBCQW5RaUJpQUFLQUs0QW1vb0FnQWdCMm9yQXdBZ0FDZ0MrQVFnQjJvckF3QWdDRUVvYWlBSVFTQnFJQWhCR0dvUVRTQUZJUU1EUUNBRFFRTjBJZ2NnQUNnQ3VBSWdCbW9vQWdCcUlnb2dDaXNEQUNJY0lBZ3JBeWlpSUFBb0F2Z0VJQWRxS3dNQUloMGdDQ3NESUtLZ09RTUFJQUFvQXZnRUlBZHFJQjBnQ0NzREtLSWdIQ0FJS3dNZ29xRTVBd0FnQTBFQmFpSURJQXhIRFFBTEN5QUZRUUZxSWdVZ0RFY05BQXNNQVFzZ0JDQUxheUVGUVFBaEF3TkFJQVZCQTNRaUJ5QUFLQUs0QWlBRFFRSjBhaWdDQUdwQ0FEY0RBQ0FEUVFGcUlnTWdDVWNOQUFzZ0JVRUJhaUlGSVFNZ0JTQU1UZ1JBSUFBb0FyZ0NJQVJCQW5ScUtBSUFJQWRxUW9DQWdJQ0FnSUQ0UHpjREFBd0JDd05BSUFOQkEzUWlCaUFBS0FMNEJHb2dCRUVDZENJS0lBQW9BcmdDYWlnQ0FDQUdhaXNEQURrREFDQUFLQUs0QWlBS2FpZ0NBQ0FHYWtJQU53TUFJQU5CQVdvaUF5QU1SdzBBQ3lBQUtBSzRBaUFLYWlnQ0FDQUhha0tBZ0lDQWdJQ0ErRDgzQXdBRFFBSi9Jd0JCRUdzaUF5QUZRUU4wSWdjZ0FDZ0MrQVJxS3dNQU9RTUlJQU5FQUFBQUFBQUFBQUE1QXdBZ0F5c0RDQ0FES3dNQVlnc0VRQ0FGSUF0cVFRSjBJZ1lnQUNnQ3VBSnFLQUlBSUFkcUt3TUFJQUFvQXZnRUlBZHFLd01BSUFoQktHb2dDRUVnYWlBSVFSaHFFRTBnQlNFREEwQWdBMEVEZENJSElBQW9BcmdDSUFacUtBSUFhaUlLSUFvckF3QWlIQ0FJS3dNb29pQUFLQUw0QkNBSGFpc0RBQ0lkSUFnckF5Q2lvRGtEQUNBQUtBTDRCQ0FIYWlBZElBZ3JBeWlpSUJ3Z0NDc0RJS0toT1FNQUlBTkJBV29pQXlBTVNBMEFDd3NnQlVFQmFpSUZJQXhIRFFBTEMwRUJJUVlMSUFSQkFXb2lCQ0FKUncwQUMwRUFJUU1nQ1VFQVNnUkFBMEFnQTBFRGRDSUVJQUVvQWh4cUlBQW9BcUFCSUFScUt3TUFPUU1BSUFOQkFXb2lBeUFKUncwQUN3c2dDQ0FJS0FJUVFRRnFOZ0lRSUFaQkFYRU5BUXNMSUFnZ0NDZ0NGRUVCYWpZQ0ZDQUlLQUlVUVFsS0RRTkVBQUFBQUFBQUFBQWhIRUVBSVFjZ0RnMEJBMEFnQjBFRGRDSURJQUFvQXNBQmFpc0RBSmtoSFNBQktBSWNJQU5xS3dNQW1TRWVBa0FDZnlNQVFSQnJJZ1FnSFRrRENDQUVSQUFBQUFBQUFBQUFPUU1BSUFRckF3Z2dCQ3NEQUdFTEJFQWpBRUVRYXlJRUlCNDVBd2dnQkVRQUFBQUFBQUFBQURrREFDQUVLd01JSUFRckF3QmhEUUVMSUJ3Z0FTZ0NIQ0FEYWlzREFDQUFLQUxBQVNBRGFpc0RBS0daSUIwZ0hpQWRJQjVrRzZNaUhTQWNJQjFrR3lFY0N5QUhRUUZxSWdjZ0NVY05BQXNNQVFzZ0NDQUlLQUlRUVFGcU5nSVFJQWdnQ0NnQ0ZFRUJhallDRkVRQUFBQUFBQUFBQUNFY0lBZ29BaFJCQ1VvTkFnc2pBRUVRYXlJRElCdzVBd2dnQTBRUjZpMkJtWmRoUFRrREFDQURLd01JSUFNckF3QmxSUTBBQ3dzZ0NFRXdhaVFBQzdBQ0FRSi9RUUZCc2lNZ0JSQWlJQU5CZjNOQkgzWkJ5Q01nQlJBaUlBUkJBRXBCM2lNZ0JSQWlJQU1nQkV4QjlTTWdCUkFpSUFRZ0FTZ0NBRXhCakNRZ0JSQWlJQUVvQWdSQkFVNUJxQ1FnQlJBaUlBSW9BZ0FnQkU1QnhDUWdCUkFpSUFFZ0JFRUJJQVVRZ1FGQjRpUWdCUkFpSUFJZ0JDQUZFRkJCaGlVZ0JSQWlJQUFnQkRZQ0NDQUFRUUUyQWdRZ0FDQUROZ0lBSUFCQkRHb2dCRUVCSUFVUU5pQUVRUUZPQkVBRFFDQUdRUUowSWdjZ0FDZ0NNR29vQWdCQkFTQUJLQUlrSUFkcUtBSUFRUUVRSnlBR1FRRnFJZ1lnQkVjTkFBc0xJQUJCTkdvZ0JDQUZFQ1VnQUNnQ1VFRUJJQUlvQWh3Z0JCQW5JQUJCMUFCcUlBTkJBV29pQVNBRkVDVWdBVUVCVGdSQVFRQWhCZ05BSUFBb0FuQWdCbXBCQVRvQUFDQUdRUUZxSWdZZ0FVY05BQXNMQzlvQkFnRi9BbndnQUNnQ0JDSUVJQUVvQWdCS0JFQWdBU0FFSUFNUUtnc2dBaUFBS0FMQUZ6WUNBQ0FDSUFBb0FzZ1hOZ0lFSUFJZ0FDZ0N6QmMyQWlRZ0FpQUFLQUxRRnpZQ0tDQUNJQUFvQXRRWE5nSWdJQUlnQUNzRDJCY2lCU0FBS3dQZ0Z5SUdJQVVnQm1RYk9RTUlJQUlnQUNzRDJCYzVBeEFnQWlBQUt3UGdGemtER0NBQUtBTFVGMEVBVEFSQUlBQW9BZ1FpQWtFQlRnUkFRUUFoQUFOQUlBRW9BaHdnQUVFRGRHb2dBeXNEQ0RrREFDQUFRUUZxSWdBZ0FrY05BQXNMRHdzZ0FTZ0NIRUVCSUFBb0Fyd0dJQUFvQWdRUUp3dnZCd0VKZnlNQVFZQUNheUlJSkFCQktCQXBJZ2RCQURZQ0FFSGN6QUJCQURZQ0FDQUlRUWhxRURwQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZRUVFoQ1FKQUFrQWdCRVVOQUVIZ3pBQW9BZ0FpQmtVTkFDQUVLQUlBSUFkQkJCQWhJZ1ZGRFFFZ0JoQUJDeEFBSVFRZ0JVRUJSd1JBSUFoQjRBQnFRUUVnQjBFRUVEVWhCeEFBSVFsQkFDRUVDd05BQWtBQ1FBSkFBa0FnQkFSQVFRd1FCaUVHUWR6TUFFRUFOZ0lBUVN3Z0JpQUlLQUpFRUFRYVFkek1BQ2dDQUNFRVFkek1BRUVBTmdJQVFYOGhCU0FFUlEwQ1FlRE1BQ2dDQUNJS1JRMENJQVFvQWdBZ0J5QUpFQ0VpQlEwQklBUWdDaEFDQUF0QjNNd0FRUUEyQWdBZ0NDQUlRZUFBYWpZQ1BFSGN6QUFvQWdBaEJFSGN6QUJCQURZQ0FFRi9JUVVnQkVVTkEwSGd6QUFvQWdBaUJrVU5BeUFFS0FJQUlBY2dDUkFoSWdVTkFnd0ZDeUFLRUFFTEVBQWhCQ0FGUVFGR0RRSWdCa0hJRjBFdEVBVUFDeUFHRUFFTEVBQWhCQ0FGUVFGR0RRQWdBMUJGQkVCQjNNd0FRUUEyQWdBZ0NFRUlhaUFERUVOQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZBa0FnQkVVTkFFSGd6QUFvQWdBaUJrVU5BQ0FFS0FJQUlBY2dDUkFoSWdWRkRRTWdCaEFCQ3hBQUlRUWdCVUVCUmcwQkN5QUFLQUlFSVF4QjNNd0FRUUEyQWdBZ0FTZ0NCQ0VHUWR6TUFDZ0NBQ0VFUWR6TUFFRUFOZ0lBUVg4aEJRSkFJQVJGRFFCQjRNd0FLQUlBSWdwRkRRQWdCQ2dDQUNBSElBa1FJU0lGUlFSQUlBUWdDaEFDQUFzZ0NoQUJDeEFBSVFRZ0JVRUJSZzBBSUFJb0FnUWhDa0hjekFCQkFEWUNBRUhQQUNBR0VBaEIzTXdBS0FJQUlRUkIzTXdBUVFBMkFnQkJmeUVGQWtBZ0JFVU5BRUhnekFBb0FnQWlDMFVOQUNBRUtBSUFJQWNnQ1JBaElnVkZCRUFnQkNBTEVBSUFDeUFMRUFFTEVBQWhCQ0FGUVFGR0RRQkIzTXdBUVFBMkFnQWpBRUVRYXlJRUlBbzJBZ3dnQkNBRUtBSU1OZ0lJSUFRZ0JDZ0NDRFlDREVIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUVGL0lRVUNRQ0FFUlEwQVFlRE1BQ2dDQUNJTFJRMEFJQVFvQWdBZ0J5QUpFQ0VpQlVVRVFDQUVJQXNRQWdBTElBc1FBUXNRQUNFRUlBVkJBVVlOQUVIY3pBQkJBRFlDQUVIUUFDQU1JQVlnQ2lBSVFRaHFFQkpCM013QUtBSUFJUVJCM013QVFRQTJBZ0JCZnlFRkFrQWdCRVVOQUVIZ3pBQW9BZ0FpQmtVTkFDQUVLQUlBSUFjZ0NSQWhJZ1ZGRFFJZ0JoQUJDeEFBSVFRZ0JVRUJSZzBBUWR6TUFFRUFOZ0lBUVRzZ0NFRUlhaEFJUWR6TUFDZ0NBQ0VFUWR6TUFFRUFOZ0lBUVg4aEJRSkFJQVJGRFFCQjRNd0FLQUlBSWdaRkRRQWdCQ2dDQUNBSElBa1FJU0lGUlEwQ0lBWVFBUXNRQUNFRUlBVkJBVVlOQUFzZ0J4QW1JQWhCZ0FKcUpBQVBDeUFFSUFZUUFnQUxOUUVCZnlBQklBQW9BZ1FpQWtFQmRXb2hBU0FBS0FJQUlRQWdBU0FDUVFGeEJIOGdBU2dDQUNBQWFpZ0NBQVVnQUFzUkFBQUxoQW9CQ244akFFR0FBbXNpQmlRQVFTZ1FLU0lIUVFBMkFnQkIzTXdBUVFBMkFnQWdCa0VJYWhBNlFkek1BQ2dDQUNFRFFkek1BRUVBTmdJQVFYOGhCRUVFSVFnQ1FBSkFBa0FnQTBVTkFFSGd6QUFvQWdBaUJVVU5BQ0FES0FJQUlBZEJCQkFoSWdSRkRRRWdCUkFCQ3hBQUlRTWdCRUVCUndSQUlBWkI0QUJxUVFFZ0IwRUVFRFVoQnhBQUlRaEJBQ0VEQ3dOQUFrQUNRQUpBQWtBZ0F3UkFRUXdRQmlFRlFkek1BRUVBTmdJQVFTd2dCU0FHS0FKRUVBUWFRZHpNQUNnQ0FDRURRZHpNQUVFQU5nSUFRWDhoQkNBRFJRMENRZURNQUNnQ0FDSUpSUTBDSUFNb0FnQWdCeUFJRUNFaUJBMEJJQU1nQ1JBQ0FBdEIzTXdBUVFBMkFnQWdCaUFHUWVBQWFqWUNQRUhjekFBb0FnQWhBMEhjekFCQkFEWUNBRUYvSVFRZ0EwVU5BMEhnekFBb0FnQWlCVVVOQXlBREtBSUFJQWNnQ0JBaElnUU5BZ3dGQ3lBSkVBRUxFQUFoQXlBRVFRRkdEUUlnQlVISUYwRXRFQVVBQ3lBRkVBRUxFQUFoQXlBRVFRRkdEUUFnQWxCRkJFQkIzTXdBUVFBMkFnQWdCa0VJYWlBQ0VFTkIzTXdBS0FJQUlRTkIzTXdBUVFBMkFnQkJmeUVFQWtBZ0EwVU5BRUhnekFBb0FnQWlCVVVOQUNBREtBSUFJQWNnQ0JBaElnUkZEUU1nQlJBQkN4QUFJUU1nQkVFQlJnMEJDeUFCS0FJUUlRTkIzTXdBUVFBMkFnQkJ3QUFnQTBFQVIwR0JJeUFHUVFocUVBTkIzTXdBS0FJQUlRTkIzTXdBUVFBMkFnQkJmeUVFQWtBZ0EwVU5BRUhnekFBb0FnQWlCVVVOQUNBREtBSUFJQWNnQ0JBaElnUkZEUUlnQlJBQkN4QUFJUU1nQkVFQlJnMEFJQUFvQWdRaEEwSGN6QUJCQURZQ0FFSExBQ0FESUFaQkNHb1FCQ0VKUWR6TUFDZ0NBQ0VEUWR6TUFFRUFOZ0lBUVg4aEJBSkFJQU5GRFFCQjRNd0FLQUlBSWdWRkRRQWdBeWdDQUNBSElBZ1FJU0lFUlEwQ0lBVVFBUXNRQUNFRElBUkJBVVlOQUFKQUlBa0VRQ0FBUWZnQWFpRUpJQUJCR0dvaENpQUFRY1FBYWlFTEEwQUNRQUpBQWtBQ1FBSkFJQUFvQWd3dEFBQUVRQ0FHUVFBMkF2d0JJQUVvQWhBaUEwVU5DQ0FES0FJQUtBSVlJUVJCM013QVFRQTJBZ0FnQkNBRElBa2dDaUFMSUFaQi9BRnFFQjVCM013QUtBSUFJUU5CM013QVFRQTJBZ0JCZnlFRUlBTkZEUUpCNE13QUtBSUFJZ1ZGRFFJZ0F5Z0NBQ0FISUFnUUlTSUVEUUVNQ3dzZ0FDZ0NFQzBBQUEwRVFkek1BRUVBTmdJQVFjQUFRUUJCdWlJZ0JrRUlhaEFEUWR6TUFDZ0NBQ0VEUWR6TUFFRUFOZ0lBUVg4aEJDQURSUTBEUWVETUFDZ0NBQ0lGUlEwRElBTW9BZ0FnQnlBSUVDRWlCQTBDREFvTElBVVFBUXNRQUNFRElBUkJBVVlOQmd3Q0N5QUZFQUVMRUFBaEF5QUVRUUZHRFFRTElBQW9BZ1FoQTBIY3pBQkJBRFlDQUVITEFDQURJQVpCQ0dvUUJDRU1RZHpNQUNnQ0FDRURRZHpNQUVFQU5nSUFRWDhoQkFKQUlBTkZEUUJCNE13QUtBSUFJZ1ZGRFFBZ0F5Z0NBQ0FISUFnUUlTSUVSUTBHSUFVUUFRc1FBQ0VESUFSQkFVWU5BeUFNRFFBTEMwSGN6QUJCQURZQ0FFRTdJQVpCQ0dvUUNFSGN6QUFvQWdBaEEwSGN6QUJCQURZQ0FFRi9JUVFDUUNBRFJRMEFRZURNQUNnQ0FDSUZSUTBBSUFNb0FnQWdCeUFJRUNFaUJFVU5BeUFGRUFFTEVBQWhBeUFFUVFGR0RRRWdCeEFtSUFaQmdBSnFKQUFQQzBIY3pBQkJBRFlDQUVITUFCQVZRZHpNQUNnQ0FDRURRZHpNQUVFQU5nSUFBa0FnQTBVTkFFSGd6QUFvQWdBaUJFVU5BQ0FES0FJQUlBY2dDQkFoUlFSQUlBTWdCQkFDQUFzZ0JCQUJDeEFBSVFNTUFBc0FDeUFESUFVUUFnQUxJQU1nQlJBQ0FBc2RBUUYvUVFRUUJpSUFRZnpBQURZQ0FDQUFRYVRCQUVITkFCQUZBQXY2Q1FFSmZ5TUFRWUFDYXlJR0pBQkJLQkFwSWdkQkFEWUNBRUhjekFCQkFEWUNBQ0FHUVFocUVEcEIzTXdBS0FJQUlRTkIzTXdBUVFBMkFnQkJmeUVFUVFRaENBSkFBa0FDUUNBRFJRMEFRZURNQUNnQ0FDSUZSUTBBSUFNb0FnQWdCMEVFRUNFaUJFVU5BU0FGRUFFTEVBQWhBeUFFUVFGSEJFQWdCa0hnQUdwQkFTQUhRUVFRTlNFSEVBQWhDRUVBSVFNTEEwQUNRQUpBQWtBQ1FDQURCRUJCREJBR0lRVkIzTXdBUVFBMkFnQkJMQ0FGSUFZb0FrUVFCQnBCM013QUtBSUFJUU5CM013QVFRQTJBZ0JCZnlFRUlBTkZEUUpCNE13QUtBSUFJZ2xGRFFJZ0F5Z0NBQ0FISUFnUUlTSUVEUUVnQXlBSkVBSUFDMEhjekFCQkFEWUNBQ0FHSUFaQjRBQnFOZ0k4UWR6TUFDZ0NBQ0VEUWR6TUFFRUFOZ0lBUVg4aEJDQURSUTBEUWVETUFDZ0NBQ0lGUlEwRElBTW9BZ0FnQnlBSUVDRWlCQTBDREFVTElBa1FBUXNRQUNFRElBUkJBVVlOQWlBRlFjZ1hRUzBRQlFBTElBVVFBUXNRQUNFRElBUkJBVVlOQUNBQ1VFVUVRRUhjekFCQkFEWUNBQ0FHUVFocUlBSVFRMEhjekFBb0FnQWhBMEhjekFCQkFEWUNBRUYvSVFRQ1FDQURSUTBBUWVETUFDZ0NBQ0lGUlEwQUlBTW9BZ0FnQnlBSUVDRWlCRVVOQXlBRkVBRUxFQUFoQXlBRVFRRkdEUUVMSUFFb0FoQWhBMEhjekFCQkFEWUNBRUhBQUNBRFFRQkhRWWdpSUFaQkNHb1FBMEhjekFBb0FnQWhBMEhjekFCQkFEWUNBRUYvSVFRQ1FDQURSUTBBUWVETUFDZ0NBQ0lGUlEwQUlBTW9BZ0FnQnlBSUVDRWlCRVVOQWlBRkVBRUxFQUFoQXlBRVFRRkdEUUFnQUNnQ0JDRURRZHpNQUVFQU5nSUFRY3NBSUFNZ0JrRUlhaEFFSVFsQjNNd0FLQUlBSVFOQjNNd0FRUUEyQWdCQmZ5RUVBa0FnQTBVTkFFSGd6QUFvQWdBaUJVVU5BQ0FES0FJQUlBY2dDQkFoSWdSRkRRSWdCUkFCQ3hBQUlRTWdCRUVCUmcwQUFrQWdDUVJBSUFCQitBQnFJUWtnQUVFWWFpRUtBMEFDUUFKQUFrQUNRQUpBSUFBb0FnZ3RBQUFFUUNBR1FRQTJBdndCSUFFb0FoQWlBMFVOQ0NBREtBSUFLQUlZSVFSQjNNd0FRUUEyQWdBZ0JDQURJQWtnQ2lBR1Fmd0JhaEFTUWR6TUFDZ0NBQ0VEUWR6TUFFRUFOZ0lBUVg4aEJDQURSUTBDUWVETUFDZ0NBQ0lGUlEwQ0lBTW9BZ0FnQnlBSUVDRWlCQTBCREFzTElBQW9BaEF0QUFBTkJFSGN6QUJCQURZQ0FFSEFBRUVBUWJvaUlBWkJDR29RQTBIY3pBQW9BZ0FoQTBIY3pBQkJBRFlDQUVGL0lRUWdBMFVOQTBIZ3pBQW9BZ0FpQlVVTkF5QURLQUlBSUFjZ0NCQWhJZ1FOQWd3S0N5QUZFQUVMRUFBaEF5QUVRUUZHRFFZTUFnc2dCUkFCQ3hBQUlRTWdCRUVCUmcwRUN5QUFLQUlFSVFOQjNNd0FRUUEyQWdCQnl3QWdBeUFHUVFocUVBUWhDMEhjekFBb0FnQWhBMEhjekFCQkFEWUNBRUYvSVFRQ1FDQURSUTBBUWVETUFDZ0NBQ0lGUlEwQUlBTW9BZ0FnQnlBSUVDRWlCRVVOQmlBRkVBRUxFQUFoQXlBRVFRRkdEUU1nQ3cwQUN3dEIzTXdBUVFBMkFnQkJPeUFHUVFocUVBaEIzTXdBS0FJQUlRTkIzTXdBUVFBMkFnQkJmeUVFQWtBZ0EwVU5BRUhnekFBb0FnQWlCVVVOQUNBREtBSUFJQWNnQ0JBaElnUkZEUU1nQlJBQkN4QUFJUU1nQkVFQlJnMEJJQWNRSmlBR1FZQUNhaVFBRHd0QjNNd0FRUUEyQWdCQnpBQVFGVUhjekFBb0FnQWhBMEhjekFCQkFEWUNBQUpBSUFORkRRQkI0TXdBS0FJQUlnUkZEUUFnQXlnQ0FDQUhJQWdRSVVVRVFDQURJQVFRQWdBTElBUVFBUXNRQUNFRERBQUxBQXNnQXlBRkVBSUFDeUFESUFVUUFnQUx5bk1ETG44QmZoQjhJd0JCSUdzaUNTUUFBbndnQUNnQzhBTWlCRUVBVGdSQUlBQW9BcEFFSWdnb0Fod2hGaUFJS0FJWUlRSWdDQ2dDRkNFRklBZ29BaEFoSENBSUtBSU1JUm9nQ0NnQ0NDRVhJQWdvQWdRaEVTQUlLQUlBSVFjZ0NTQUlLQUlnSWgwMkFoQWdDQ2dDS0NFR0lBZ29BaVFoRGlBSklBZ29BaXcyQWd3Z0NTQUlLQUl3TmdJSUlBQW9BckFFSWdNdEFBTkJBRWNoR0NBRExRQUNRUUJISVJNZ0F5MEFBVUVBUnlFU0lBTXRBQUJCQUVjaEhpQUlLQUkwSVJzZ0FDZ0MwQVFpQXlzRFNDRTFJQU1yQTBBaE55QURLd000SVR3Z0F5c0RNQ0V5SUFNckF5Z2hPQ0FES3dNZ0lUc2dBeXNER0NFNklBTXJBeEFoT1NBREt3TUlJVFlnQXlzREFBd0JDeUFKUWZnSE5nSU1RZng0SVIwZ0NVSDhlRFlDRUNBSlFadCtOZ0lJUWVoN0lSdEJBU0VlUkFBQUFBQUF1STFBSVRWRUFBQUFBQUNZajhBaE4wSFVlQ0VHUWNKOUlRNUVBQUFBQUFBZ2MwQWhQRVFBQUFBQUFFQmp3Q0V5UkFBQUFBQUEwSXhBSVRoRUFBQUFBQUFnYVVBaE8wUUFBQUFBQVBpTVFDRTZSQUFBQUFBQTBIekFJVGxFQUFBQUFBRFFlY0FoTmtIR2VpRVdRZU43SVFKQit3VWhCVUh5ZXlFY1Fhc0hJUnBCdW5raEYwSE5BU0VSUWFrR0lRZEJBU0VTUkFBQUFBQUFrSWJBQ3lFMEFuOGdBQUovQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQW44Q1FBSkFBa0FDUUFKQUFrQUNRQ0FFRGdRQkFnVUVBQXNnQUNnQ0FFVkJzQzRnQVJBaUlBQW9Bc1FCSVJjZ0FDZ0N3QUVoRVNBQUtBSUVJUWNDUUNBQUtBTDBBU0ljSUFBb0F2QUJJaHBxUVFGSURRQWpBRUVRYXlJRklBQXJBOWdGT1FNSUlBVkVBQUFBQUFBQUFBQTVBd0FnQlNzRENDQUZLd01BWWcwQUlBQkJmellDMUJjTUN3c2dBRUdnQjJvZ0J5QUJFQ1VnQUVIQUIyb2dCeUFCRUNVZ0FFSGdCMm9nQnlBQkVDVWdBRUdBQ0dvZ0J5QUJFQ1VnQUVHc0NXb2dBQ2dDaUFVaURrRUJhaUlGSUFjZ0FSQTJJQUJCMUFscUlBVWdCeUFCRURZZ0FFSDhDV29nQlNBSElBRVFOaUFBUWFRS2FpQUZJQUVRSlNBQVFjUUthaUFGSUFFUUpTQUFRZUFHYWlBSElBRVFKU0FBUWRnVmFpQU9JQUVRSlNBQVFmZ1ZhaUFPSUFFUUpTQUFRY0FXYWtFQklBRVFKU0FBUVpnV2FrRUJJQVVnQVJBMklBNUJBVTRFUUVFQUlRTURRQ0FEUVFOMElnVWdBQ2dDOUJWcVFnQTNBd0FnQUNnQ2xCWWdCV29nQVNzREVEa0RBQ0FEUVFGcUlnTWdEa2NOQUFzTElBQkI5QVJxRUtBQ0lBQkJwQWhxSUFjZ0FSQWxJQUJCeEFocUlBY2dBUkFsSUFkQkFVNEVRRUVBSVFZRFFBSjhBa0FnQUNnQ25BRWdCbW90QUFCRkRRQWdBQ2dDdkFFZ0Jtb3RBQUFFUUFKL0lBWkJBM1FpQlNBQUtBSjhhaXNEQUNFeElBQW9BbHdnQldvckF3QWhOQ01BUVJCcklnVWdNVGtEQ0NBRklEUTVBd0FnQlNzRENDQUZLd01BWXdzRVFDQUFRWDAyQXRRWERCQUxJQUFvQXB3QklBWnFMUUFBUlEwQkN5QUdRUU4wSWdVZ0FDZ0NYR29yQXdBZ0FDZ0NQQ0FGYWlzREFLTU1BUXNnQVNzREdBc2hOQ0FHUVFOMElnUWdBQ2dDd0FocUlEUTVBd0FnQUNnQzRBZ2dCR29DZkNBQUtBSzhBU0FHYWkwQUFBUkFJQUFvQW53Z0JHb3JBd0FnQUNnQ1BDQUVhaXNEQUtNTUFRc2dBU3NERUFzNUF3QUNRQ0FBS0FLY0FTQUdhaTBBQUVVTkFDQUFLQUs4QVNBR2FpMEFBQVJBQW44Z0FDZ0M0QWdnQkdvckF3QWhOQ01BUVJCcklnVWdBQ2dDd0FnZ0JHb3JBd0E1QXdnZ0JTQTBPUU1BSUFVckF3Z2dCU3NEQUdVTFFZY3NJQUVRSWlBQUtBS2NBU0FHYWkwQUFFVU5BUXNnQUNnQ3ZBRWdCbW90QUFCRkRRQWdBQ2dDZkNBRWFpc0RBQ0UwSXdCQkVHc2lCU0FBS0FKY0lBUnFLd01BT1FNSUlBVWdORGtEQUNBRkt3TUlJQVVyQXdCaURRQUNmeUFBS0FMZ0NDQUVhaXNEQUNFMEl3QkJFR3NpQlNBQUtBTEFDQ0FFYWlzREFEa0RDQ0FGSURRNUF3QWdCU3NEQ0NBRkt3TUFZUXRCaHl3Z0FSQWlDeUFBS0FLOEJpQUVhaUFBS0FLY0JpQUVhaXNEQURrREFBSkFBa0FnQUNnQ25BRWdCbW90QUFCRkRRQWdBQ2dDWENBRWFpc0RBQ0UwSXdCQkVHc2lCU0FBS0FLOEJpQUVhaXNEQURrRENDQUZJRFE1QXdBZ0JTc0RDQ0FGS3dNQVpVVU5BQ0FBS0FLOEJpQUVhaUFBS0FMQUNDQUVhaXNEQURrREFBd0JDd0pBSUFBb0Fyd0JJQVpxTFFBQVJRMEFJQUFvQW53Z0JHb3JBd0FoTkNNQVFSQnJJZ1VnQUNnQ3ZBWWdCR29yQXdBNUF3Z2dCU0EwT1FNQUlBVXJBd2dnQlNzREFHWkZEUUFnQUNnQ3ZBWWdCR29nQUNnQzRBZ2dCR29yQXdBNUF3QU1BUXNnQUNnQ3ZBWWdCR29pQlNBRkt3TUFJQUFvQWp3Z0JHb3JBd0NqT1FNQUFrQWdBQ2dDbkFFZ0Jtb3RBQUJGRFFBZ0FDZ0N3QWdnQkdvckF3QWhOQ01BUVJCcklnVWdBQ2dDdkFZZ0JHb3JBd0E1QXdnZ0JTQTBPUU1BSUFVckF3Z2dCU3NEQUdWRkRRQWdBQ2dDdkFZZ0JHb2dBQ2dDd0FnZ0JHb3JBd0E1QXdBTElBQW9BcndCSUFacUxRQUFSUTBBSUFBb0F1QUlJQVJxS3dNQUlUUWpBRUVRYXlJRklBQW9BcndHSUFScUt3TUFPUU1JSUFVZ05Ea0RBQ0FGS3dNSUlBVXJBd0JtUlEwQUlBQW9BcndHSUFScUlBQW9BdUFJSUFScUt3TUFPUU1BQ3lBR1FRRnFJZ1lnQjBjTkFBc0xJQUJCNUFocUlCRWdGMm9pQlNBSFFRRnFJZ1FnQVJBMklBQkJqQWxxSUFVZ0FSQWxRUUFoR0FKQUlBVkJBVWdFUUVFQUlRVU1BUXNnQjBFQlRnUkFBMEFnQUNnQ3FBa2dERUVEZEdwQ0FEY0RBRUVBSVFORUFBQUFBQUFBQUFBaE13TkFJQU5CQTNRaUFTQU1RUUowSWdnZ0FDZ0NpQWxxS0FJQWFpQUFLQUxzQVNBSWFpZ0NBQ0FCYWlzREFDQUFLQUk4SUFGcUt3TUFvaUl5T1FNQUlETWdNaUF5b3FBaE15QURRUUZxSWdNZ0IwY05BQXNnQjBFRGRDSUJJQUFvQW9nSklBaHFLQUlBYWlBQUtBTHNBU0FJYWlnQ0FDQUJhaXNEQURrREFFRUFJUU5CQUNBSEFuOGpBRUVRYXlJQklET2ZJanc1QXdnZ0FVUUFBQUFBQUFBQUFEa0RBQ0FCS3dNSUlBRXJBd0JrSWdFTEd5RUNBa0FnQjBFQVNBMEFJQUZGRFFBRFFDQUFLQUtJQ1NBSWFpZ0NBQ0FEUVFOMGFpSUJJQUVyQXdBZ1BLTTVBd0FnQXlBSFJ5RUJJQU5CQVdvaEF5QUJEUUFMSUFRaEFnc2dERUVCYWlJTUlBVkhEUUFNQWdzQUN3TkFJQUFvQXFnSklBeEJBM1JxUWdBM0F3QkVBQUFBQUFBQUFBQWhQQ0FIUVFOMElnRWdERUVDZENJRElBQW9Bb2dKYWlnQ0FHb2dBQ2dDN0FFZ0Eyb29BZ0FnQVdvckF3QTVBd0JCQUNFQ0l3QkJFR3NpQVVRQUFBQUFBQUFBQURrRENDQUJSQUFBQUFBQUFBQUFPUU1BSUFFckF3Z2dBU3NEQUdRaEFRSkFJQWRCQUVnTkFDQUJSUTBBQTBBZ0FDZ0NpQWtnQTJvb0FnQWdBa0VEZEdvaUFTQUJLd01BUkFBQUFBQUFBQUFBb3prREFDQUNJQWRISVFFZ0FrRUJhaUVDSUFFTkFBc2dCQ0VDQ3lBTVFRRnFJZ3dnQlVjTkFBc0xJQUFyQTZnRklqWWdBQ3NEZ0FVaU5DSXhJREVnTm1RYklUb2dDVUVBTmdJTUlBbEJBRFlDRUVFQklRWWdOQ0UyREE4TElBQkNBRGNEMkJkQkFDRUVJQUJCQURvQTZBSkJBU0VGQWtBZ0VTQVhhaUlQUVFGSURRQWdCMEVCVGdSQUlBZEJBM1FoRFFOQUlBQW9Bb2dKSUFSQkFuUnFLQUlBSWdvZ0RXb3JBd0NhSVRJZ0FDZ0N2QVloQ0VFQUlRTURRQ0F5SUFvZ0EwRURkQ0lDYWlzREFDQUNJQWhxS3dNQW9xQWhNaUFEUVFGcUlnTWdCMGNOQUFzQ1FDQUVJQkZPQkVBakFFRVFheUlDSURJNUF3Z2dBa1FBQUFBQUFBQUFBRGtEQUNBQ0t3TUlJQUlyQXdCbERRRUxJQUFnQUNzRDJCY2lNeUF5bVNJeElERWdNMk1iT1FQWUZ3c2dCRUVCYWlJRUlBOUhEUUFMREFFTElBZEJBM1FoQWdOQUlBQW9Bb2dKSUFSQkFuUnFLQUlBSUFKcUt3TUFtaUV5QWtBZ0JDQVJUZ1JBSXdCQkVHc2lBeUF5T1FNSUlBTkVBQUFBQUFBQUFBQTVBd0FnQXlzRENDQURLd01BWlEwQkN5QUFJQUFyQTlnWElqTWdNcGtpTVNBeElETmpHemtEMkJjTElBUkJBV29pQkNBUFJ3MEFDd3NnQUVJQU53UGdGeUFhSUJ4cUlnUkJBVTRFUUNBRVFRRnFJUVZCQVNFREEwQWdBQ2dDdkFJZ0EwRURkR29yQXdBaE1nSkFJQU1nR2tvRVFDTUFRUkJySWdJZ01qa0RDQ0FDUkFBQUFBQUFBQUFBT1FNQUlBSXJBd2dnQWlzREFHVU5BUXNnQUNBQUt3UGdGeUl6SURLWklqRWdNU0F6WXhzNUErQVhDeUFESUFSR0lRSWdBMEVCYWlFRElBSkZEUUFMQzBFQUlRSWdCMEVCVGdSQVFRQWhBd05BSUFOQkEzUWlBaUFBS0FMOEJtb2dBQ2dDNUFJb0FnQWdBbW9yQXdBZ0FDZ0NQQ0FDYWlzREFLSTVBd0FnQTBFQmFpSURJQWRIRFFBTElBY2hBZ3NnQUVFQUlBRVFYeUFBTFFBVVJRMEJJQUFvQXBRQ1FRRWdBQ2dDdkFZZ0J4QW5JQUFnQUVIZ0Ntb29BZ0FyQXdBNUE1Z0NJQUFnQUVINEFXb1FTeUFBUVFFNkFPb0NJQUJCQURzQjZBSkJBUXdQQ3lBQVFRQTZBT29DQzBFSUlRTWdBQzBBb0FnTkJnSkFJQWRCQVVnRVFFUUFBQUFBQUFBQUFDRXlEQUVMUVFBaEEwUUFBQUFBQUFBQUFDRXlBMEFnTWlBQUtBTDRDU2dDQUNBRFFRTjBhaXNEQUNJeElER2lvQ0V5SUFOQkFXb2lBeUFIUncwQUN3dEJlQ0VESURLOUlqQkNJSWdnTUNBQktBSUFRUUZHRzBLQWdNRC9CNE5DZ0lEQS93ZFJEUVlnQUVIQUNtb29BZ0FyQXdDOUlqQkNJSWdnTUNBQktBSUFRUUZHRzBLQWdNRC9CNE5DZ0lEQS93ZFJEUVlnRVNBWGFpSUZRUUZJRFFRZ0IwRUJTQTBDSUFkQkEzUWhEMEVBSVFRRFFDQUVRUUowSWcwZ0FDZ0NpQWxxS0FJQUlnb2dEMm9yQXdDYUlUSWdBQ2dDdkFZaENFRUFJUU1EUUNBeUlBb2dBMEVEZENJQ2Fpc0RBQ0FDSUFocUt3TUFvcUFoTWlBRFFRRnFJZ01nQjBjTkFBc0NRQUpBSUFRZ0VVNEVRQ01BUVJCcklnSWdNamtEQ0NBQ1JBQUFBQUFBQUFBQU9RTUFJQUlyQXdnZ0Fpc0RBR1VOQWd3QkN5TUFRUkJySWdJZ01qa0RDQ0FDUkFBQUFBQUFBQUFBT1FNQUlBSXJBd2dnQWlzREFHRU5BUXNDZnlNQVFSQnJJZ0lnQUNzRDhBVTVBd2dnQWtRQUFBQUFBQUR3UHprREFDQUNLd01JSUFJckF3QmtDMEhHTGlBQkVDSUNmeUFBS3dQd0JTRXhJd0JCRUdzaUFpQUFLd1A0QlRrRENDQUNJREU1QXdBZ0Fpc0RDQ0FDS3dNQVpBdEJ4aTRnQVJBaUlBQW9Bb2dKSUExcUtBSUFJUW9nQUNnQy9BWWhDRUVBSVFORUFBQUFBQUFBQUFBaE1nTkFJRElnQ0NBRFFRTjBJZ0pxS3dNQUlBSWdDbW9yQXdDaW9DRXlJQU5CQVdvaUF5QUhSdzBBQ3lBRVFRTjBJZ0lnQUNnQ3FBbHFLd01BSVRFakFFRVFheUlESURLWklqSWdBQ3NEOEFXaU9RTUlJQU1nTVRrREFDQURLd01JSUFNckF3QmtSUTBBSUFBb0FxZ0pJQUpxSURJZ0FDc0QrQVdpT1FNQVFRRWhFQXNnQkVFQmFpSUVJQVZIRFFBTElBY01Bd3NnQUVFQU9nRG9BaUFBSUE0Z0FSQmZBbjhqQUVFUWF5SUVJRHM1QXdnZ0JFUUFBQUFBQUFBQUFEa0RBQ0FFS3dNSUlBUXJBd0JrQzBIR0xpQUJFQ0lDZnlBQVFjQUthaWdDQUNJQklBNUJBM1JxS3dNQUlUTWdBU3NEQUNBNElEa2dBQ3NEb0FXaW9xQWhNU01BUVJCcklnRWdNemtEQ0NBQklERTVBd0FnQVNzRENDQUJLd01BWlVVTEJFQWdBQ3NEbUFVaE1TQUpJQWtvQWdoQkFXbzJBZ2dnR3lBSktBSUlTZ1JBSUFkQkFXc2hFQ0E1SURHaUlUbEJBU0VUREF3TElBQW9BdHdHUVFFZ0FDZ0N2QVlnQnhBblJBQUFBQUFBQUFBQUlUbEJBU0VUQ3dKL0lBQXJBN2dGSVRFakFFRVFheUlCSURzZ09hSWlNemtEQ0NBQklERTVBd0FDUUFKQUlBRXJBd2dnQVNzREFHVU5BQ0EySUFBckE4QUZvaUV4SXdCQkVHc2lBU0F6T1FNSUlBRWdNVGtEQUNBQkt3TUlJQUVyQXdCbERRQWdBQ3NEeUFVaE1TTUFRUkJySWdRZ0FDZ0N3QW9pQVNzREFDQUJJQTVCQTNScUt3TUFvWms1QXdnZ0JDQXhPUU1BSUFRckF3Z2dCQ3NEQUdWRkRRRUxJQWtnQ1NnQ0RFRUJhallDRENBSktBSU1EQUVMSUFsQkFEWUNERUVBQ3lBQUtBTFFCVTRFUUNBQUt3T1FCU0V4SUFsQkFEWUNEQ0FKSUFrb0FoQkJBV28yQWhBZ0FFSEFGMm9pQVNBQktBSUFRUUZxTmdJQUlEWWdNYUloTmd3TUN5QUFLQUs4QmtFQklBQW9BdHdHSUFjUUp5QUFRY0FYYWlJQklBRW9BZ0JCQVdvMkFnQWdPaUE2SURxZ0lCTWJJakZFQUFBQUFBQUE0RCtpSURFZ0V4c2dNU0FZR3lFNkRBc0xJQUJCQURvQTZBSWdBQ0FGSUFFUVh5QUZRUUZxSVFVZ0ZrRUJhaUVXREFNTElBZEJBM1FoQkVFQUlRTURRQ0FBS0FLSUNTQURRUUowYWlnQ0FDQUVhaXNEQUpvaE1nSkFBa0FnQXlBUlNBUkFJd0JCRUdzaUFpQXlPUU1JSUFKRUFBQUFBQUFBQUFBNUF3QWdBaXNEQ0NBQ0t3TUFZZzBCREFJTEl3QkJFR3NpQWlBeU9RTUlJQUpFQUFBQUFBQUFBQUE1QXdBZ0Fpc0RDQ0FDS3dNQVpRMEJDd0ovSXdCQkVHc2lBaUFBS3dQd0JUa0RDQ0FDUkFBQUFBQUFBUEEvT1FNQUlBSXJBd2dnQWlzREFHUUxRY1l1SUFFUUlnSi9JQUFyQS9BRklURWpBRUVRYXlJQ0lBQXJBL2dGT1FNSUlBSWdNVGtEQUNBQ0t3TUlJQUlyQXdCa0MwSEdMaUFCRUNJZ0EwRURkQ0lDSUFBb0FxZ0phaXNEQUNFeEl3QkJFR3NpQ0VRQUFBQUFBQUFBQUNJeUlBQXJBL0FGb2prRENDQUlJREU1QXdBZ0NDc0RDQ0FJS3dNQVpFVU5BQ0FBS0FLb0NTQUNhaUFBS3dQNEJVUUFBQUFBQUFBQUFLSTVBd0JCQVNFUUN5QURRUUZxSWdNZ0JVY05BQXRCQUFzaEFrRUJJUjRnRUVFQmNVVU5BRUVBSVFZTUNBdEJCeUVESUIwZ0FDZ0M1QVZPRFFFZ0FDZ0NFQ0lDSUFBb0FzQVhUQVJBUVFVaEF5QUNRUUJLRFFJTFFRSWhBeUFBS3dNSUlBQXJBNUFGb2lFeEl3QkJFR3NpQWlBMk9RTUlJQUlnTVRrREFDQUNLd01JSUFJckF3QmxEUUVnQjBFQmF5RVBRUUFoRmlBR1FRQktRWWNzSUFFUUlrRUJJUVVnQmtFQ1RnUkFRUUVoQWdOQUFrQUNRQ0FIUVFGSUlnaEZCRUJCQUNFRFJBQUFBQUFBQUFBQUlUSURRQ0F5SUFOQkEzUWlCQ0FDUVFKMElnb2dBQ2dDMEFscUtBSUFhaXNEQUNBQUtBSzhCaUFFYWlzREFLR1pJakVnTVNBeVl4c2hNaUFEUVFGcUlnTWdCMGNOQUFzakFFRVFheUlFSURJNUF3Z2dCQ0EyT1FNQUlBUXJBd2dnQkNzREFHUU5Ba0VBSVJKQkFDRURJQWdOQVFOQUlCSWhCRUVCSVJJQ1FDQUVEUUFDUUNBQUtBS2NBU0FEYWkwQUFFVU5BQ0FEUVFOMElnZ2dBQ2dDdkFacUt3TUFJVE1nQUNnQ3dBZ2dDR29yQXdBaE1TTUFRUkJySWdRZ016a0RDQ0FFSURFNUF3QWdCQ3NEQ0NBRUt3TUFZZzBBSUFBb0FzQUlJQWhxS3dNQUlURWpBRUVRYXlJRUlBQW9BdEFKSUFwcUtBSUFJQWhxS3dNQU9RTUlJQVFnTVRrREFDQUVLd01JSUFRckF3QmlEUUVMUVFBaEVpQUFLQUs4QVNBRGFpMEFBRVVOQUNBRFFRTjBJZ2dnQUNnQ3ZBWnFLd01BSVRNZ0FDZ0M0QWdnQ0dvckF3QWhNU01BUVJCcklnUWdNemtEQ0NBRUlERTVBd0FnQkNzRENDQUVLd01BWWcwQUlBQW9BdUFJSUFocUt3TUFJVEVqQUVFUWF5SUVJQUFvQXRBSklBcHFLQUlBSUFocUt3TUFPUU1JSUFRZ01Ua0RBQ0FFS3dNSUlBUXJBd0JpSVJJTElBTkJBV29pQXlBSFJ3MEFDeUFTUlEwQkRBSUxSQUFBQUFBQUFBQUFJVElqQUVFUWF5SUVSQUFBQUFBQUFBQUFPUU1JSUFRZ05qa0RBQ0FFS3dNSUlBUXJBd0JrRFFFTFFRQWhFaUFBS0FMUUNTSUVJQVZCQW5RaUNHb29BZ0JCQVNBRUlBSkJBblFpQTJvb0FnQWdEMEVCYWhBbklBZ2dBQ2dDK0FraUJHb29BZ0JCQVNBRElBUnFLQUlBSUE5QkFXb1FKeUFBS0FMQUNpSUVJQVZCQTNRaUNHb2dCQ0FDUVFOMElnTnFLd01BT1FNQUlBZ2dBQ2dDNEFvaUJHb2dBeUFFYWlzREFEa0RBQ0FGUVFGcUlRVUxJQUpCQVdvaUFpQUdSdzBBQ3dzQ1FDQUFLQUxnQlNJRElBQW9Bb2dGSWdRZ0JXc2lBa3dOQUNBRklBTWdBbXNpRFVwQmh5d2dBUkFpSUFVZ0RXc2lCVUVDU0EwQUlBUWdBMnNoQ2tFQklRTURRQ0FBS0FMUUNTSUNJQU5CQW5RaUNHb29BZ0JCQVNBQ0lBTWdEV29pQmtFQ2RDSUVhaWdDQUNBUFFRRnFFQ2NnQ0NBQUtBTDRDU0lDYWlnQ0FFRUJJQUlnQkdvb0FnQWdEMEVCYWhBbklBQW9Bc0FLSWdJZ0EwRURkQ0lJYWlBQ0lBWkJBM1FpQkdvckF3QTVBd0FnQ0NBQUtBTGdDaUlDYWlBQ0lBUnFLd01BT1FNQUlBTkJBV29pQXlBS1J3MEFDd3NnQlNFR1FRQWhIZ3NnQlNBQUtBS0lCU0lFSUFBb0F1QUZJQVpxSWdJZ0FpQUVTaHRJQkVBZ0IwRUJTQVIvUVFBRklBQkI5QVJxSVFKQkFDRURJQVZCQW5RaENBTkFJQU5CQTNRaUNpQUFLQUxRQ1NBSWFpZ0NBR29nQUNnQ3ZBWWdDbW9yQXdBNUF3QUNRQUpBSUFBb0Fwd0JJQU5xTFFBQVJRMEFJQUFvQXJ3QklBTnFMUUFBQkVBZ0FDZ0M0QWdnQ21vckF3QWhNU01BUVJCcklnUWdBQ2dDd0FnZ0Ntb3JBd0E1QXdnZ0JDQXhPUU1BSUFRckF3Z2dCQ3NEQUdFTkFpQUFLQUtjQVNBRGFpMEFBRVVOQVFzZ0FDZ0N3QWdnQ21vckF3QWhNU01BUVJCcklnUWdBQ2dDMEFrZ0NHb29BZ0FnQ21vckF3QTVBd2dnQkNBeE9RTUFJQVFyQXdnZ0JDc0RBR0VOQVFzZ0FDZ0N2QUVnQTJvdEFBQUVRQ0FBS0FMZ0NDQUthaXNEQUNFeEl3QkJFR3NpQkNBQUtBTFFDU0FJYWlnQ0FDQUthaXNEQURrRENDQUVJREU1QXdBZ0JDc0RDQ0FFS3dNQVlRMEJDeUFDSUFFUWZ5RTFJd0JCRUdzaUJDQTFPUU1JSUFSRUFBQUFBQUFBNEQ4NUF3QWdBQ2dDMEFrZ0NHb29BZ0FnQ21vckF3QWhOUUpBSUFRckF3Z2dCQ3NEQUdZRVFDQTFJRGFoSVRjZ0FDZ0NuQUVnQTJvdEFBQkZEUUVnQUNnQ3dBZ2dDbW9yQXdBaU1TQTNJREVnTjJRYklUY01BUXNnTmlBMW9DRXhJQUFvQXJ3QklBTnFMUUFBUlFSQUlEVWhOeUF4SVRVTUFRc2dOU0UzSURFZ0FDZ0M0QWdnQ21vckF3QWlOU0F4SURWakd5RTFDd0ovSXdCQkVHc2lCQ0ExT1FNSUlBUWdOemtEQUNBRUt3TUlJQVFyQXdCbUMwR0hMQ0FCRUNJZ055QTFJRGVoSUFJZ0FSQi9vcUFnTnlBMUVLY0NJVEVnQUNnQzBBa2dDR29vQWdBZ0Ntb2dNVGtEQUFzZ0EwRUJhaUlESUFkSERRQUxJQWNMSVFJZ0FDZ0NsQUpCQVNBQVFkQUphaWdDQUNBRlFRSjBhaWdDQUNBSEVDY2dBQ0FBUWZnQmFoQkxJQUJCQURvQTZnSWdBRUVCT3dIb0FrRUNEQWdMSUFBb0FvZ0ZJU0lnQmlBV2FpSUdRUUZJRFFJRFFFRUFJUU1nQjBFQVNnUkFBMEFnQUNnQ25BRWdBMm90QUFBRWZ5QURRUU4wSWdJZ0FDZ0N2QVpxS3dNQUlUSWdBQ2dDd0FnZ0Ftb3JBd0FoTVNNQVFSQnJJZ0lnTWprRENDQUNJREU1QXdBZ0Fpc0RDQ0FDS3dNQVpnVkJBUXRCeGk0Z0FSQWlJQUFvQXJ3QklBTnFMUUFBQkg4Z0EwRURkQ0lDSUFBb0Fyd0dhaXNEQUNFeUlBQW9BdUFJSUFKcUt3TUFJVEVqQUVFUWF5SUNJREk1QXdnZ0FpQXhPUU1BSUFJckF3Z2dBaXNEQUdVRlFRRUxRY1l1SUFFUUlpQURRUU4wSWdRZ0RFRUNkQ0lGSUFBb0FxQUthaWdDQUdvZ0FDZ0MrQWtnQldvb0FnQWdCR29yQXdBNUF3QUNRQUpBSUFBb0Fwd0JJQU5xTFFBQVJRMEFJQUFvQXJ3QklBTnFMUUFBQkVBQ2Z5QUFLQUxnQ0NBRWFpc0RBQ0V4SXdCQkVHc2lBaUFBS0FMQUNDQUVhaXNEQURrRENDQUNJREU1QXdBZ0Fpc0RDQ0FDS3dNQVlRc0VRQ0FBS0FLZ0NpQUZhaWdDQUNBRWFrSUFOd01BREFNTElBQW9BcHdCSUFOcUxRQUFSUTBCQ3lBQUtBTEFDQ0FFYWlzREFDRXhJd0JCRUdzaUFpQUFLQUs4QmlBRWFpc0RBRGtEQ0NBQ0lERTVBd0FnQWlzRENDQUNLd01BWWcwQUFuOGpBRUVRYXlJQ0lBQW9BdmdKS0FJQUlBUnFLd01BT1FNSUlBSkVBQUFBQUFBQUFBQTVBd0FnQWlzRENDQUNLd01BWmdzRVFDQUFLQUtnQ2lBRmFpZ0NBQ0FFYWtJQU53TUFDeUFBS0FLZ0NpQUZhaWdDQUNBRWFrUUFBQUFBQUFBQUFDQUFLQUtnQ2lBRmFpZ0NBQ0FFYWlzREFDSXhJREZFQUFBQUFBQUFBQUJrR3prREFBd0JDeUFBS0FLOEFTQURhaTBBQUVVTkFDQUFLQUxnQ0NBRWFpc0RBQ0V4SXdCQkVHc2lBaUFBS0FLOEJpQUVhaXNEQURrRENDQUNJREU1QXdBZ0Fpc0RDQ0FDS3dNQVlnMEFBbjhqQUVFUWF5SUNJQUFvQXZnSktBSUFJQVJxS3dNQU9RTUlJQUpFQUFBQUFBQUFBQUE1QXdBZ0Fpc0RDQ0FDS3dNQVpRc0VRQ0FBS0FLZ0NpQUZhaWdDQUNBRWFrSUFOd01BQ3lBQUtBS2dDaUFGYWlnQ0FDQUVhaUFBS0FLZ0NpQUZhaWdDQUNBRWFpc0RBQ0l4UkFBQUFBQUFBQUFBSURGRUFBQUFBQUFBQUFCa0d6a0RBQXNnQTBFQmFpSURJQWRIRFFBTEN5QU1RUUZxSWd3Z0JrY05BQXNnQjBFQmF5RVFJQWRCQUV3TkJBd0RDeUFBSUFNMkF0UVhJQUFnQUVHZ0Jtb1FTd3RCQUF3R0N5QUhRUUZySVJBZ0IwRUJUZzBBREFFTFFRQWhBd05BSUFOQkEzUWlBaUFBS0FLOEIycENBRGNEQUNBQUtBTDhCeUFDYWtLQWdJQ0FnSUNBK0Q4M0F3QWdBQ2dDbkFnZ0FtcENnSUNBZ0lDQWdQaS9memNEQUNBRFFRRnFJZ01nQjBjTkFBc2dCa0VCVGdSQVFRQWhBZ05BUVFBaEN3TkFJQXRCQTNRaUJTQUFLQUs4QjJvckF3QWlNaUFBS0FLZ0NpQUNRUUowYWlnQ0FDQUZhaXNEQUNJem1TSXhJREVnTW1NYklURWdBQ2dDdkFjZ0JXb2dNVGtEQUNBQUtBTDhCeUFGYWlzREFDRXlJQUFvQXZ3SElBVnFBbjlCQVNBelJBQUFBQUFBQUFBQVpBMEFHa0YvSURORUFBQUFBQUFBQUFCakRRQWFRUUFMdHlJeElESWdNU0F5WXhzNUF3QWdBQ2dDbkFnZ0JXb2dBQ2dDbkFnZ0JXb3JBd0FpTWdKL1FRRWdNMFFBQUFBQUFBQUFBR1FOQUJwQmZ5QXpSQUFBQUFBQUFBQUFZdzBBR2tFQUM3Y2lNU0F4SURKakd6a0RBQ0FMUVFGcUlnc2dCMGNOQUFzZ0FrRUJhaUlDSUFaSERRQUxDMEVBSVFzRFFDQUxRUU4wSWdRZ0FDZ0MvQWRxS3dNQUlUSWdBQ2dDbkFnZ0JHb3JBd0FoTVNNQVFSQnJJZ0lnTWprRENDQUNJREU1QXdBZ0Fpc0RDQ0FDS3dNQVlpRUNJd0JCRUdzaUJTQUFLQUs4QnlBRWFpc0RBRGtEQ0NBRlJBQUFBQUFBQUFBQU9RTUFJQVVyQXdnZ0JTc0RBR0loQlFKOEFrQWdBZ1JBSUFWQmh5d2dBUkFpSURZaE1nd0JDeUEwSVRKRUFBQUFBQUFBOEQ4Z0JVVU5BUm9MQW44akFFRVFheUlDSURJNUF3Z2dBa1FBQUFBQUFBQUFBRGtEQUNBQ0t3TUlJQUlyQXdCaUMwR0hMQ0FCRUNJZ0FDZ0N2QWNnQkdvckF3QWdNcU1MSVRFZ0FDZ0MzQWNnQkdvZ01Ua0RBRUVCSVJRZ0MwRUJhaUlMSUFkSERRQUxDeUFBUWRnVmFpQUdJQUVRSlNBQVFmZ0thaUlqSUFZZ0FSQWxJQUJCbUF0cUlBWWdBUkFsSUFCQnVBdHFJQVlnQVJBbElBQkIyQXRxSWlRZ0JpQUJFQ1VnQUVINEMyb2dCaUFCRUNVZ0FFR1lER29pQ0NBR0lBWWdBUkEySUFCQndBeHFJaDhnQmlBR0lBRVFOaUFBUWVnTWFpSUVJQVlnQnlBQkVEWWdBRUdRRFdvZ0JpQUJFQ1VnQUVHd0RXb2lGU0FHSUFFUUpTQUFRZmdPYWlJcUlBWWdBUkFsQWtBZ0JrRUJUZ1JBUkFBQUFBQUFBUEEvSUFhM0lqNmpJVEZCQUNFREEwQWdBMEVEZENJQ0lBQW9BcFFMYWlBeE9RTUFJQUFvQXZRVklBSnFJREU1QXdBZ0EwRUJhaUlESUFaSERRQUxJQlFFUUVFQUlRd0RRRUVBSVFNRFFDQURRUU4wSWdVZ0RFRUNkQ0lDSUFBb0FxQUthaWdDQUdvckF3QWhNU0FBS0FLTURTQUNhaWdDQUNBRmFpQXhJQUFvQXR3SElBVnFLd01BbjZNNUF3QWdBMEVCYWlJRElBZEhEUUFMSUF4QkFXb2lEQ0FHUncwQUN3dEVBQUFBQUFBQUFBQWhNa0VBSVFNZ0JpQUhSQUFBQUFBQUFQQS9JQVJCQUVFQVFRQkVBQUFBQUFBQUFBQWdDRUVBUVFCQkFTQUJFREVEUUNBeUlBQW9BcndNSUFOQkFuUnFLQUlBSUFOQkEzUnFLd01BSWpFZ01TQXlZeHNoTWlBRFFRRnFJZ01nQmtjTkFBc01BUXRFQUFBQUFBQUFBQUFoTWlBR0lBZEVBQUFBQUFBQThEOGdCRUVBUVFCQkFFUUFBQUFBQUFBQUFDQUlRUUJCQUVFQklBRVFNU0FHdHlFK0N5QUdJQ0pHSVJnZ0JrRUJheUVJSUFCQjZCZHFJUmtnQUVIQUIyb2hKU0FBUWZ3SmFpRW1SQUFBQUFBQUFQQS9JRElDZnlNQVFSQnJJZ0lnTWprRENDQUNSQUFBQUFBQUFBQUFPUU1BSUFJckF3Z2dBaXNEQUdFTEd5RS9JQWxCQURZQ0dDQUpRUUEyQWh3Z0NVRUFOZ0lVSUFCQnNBNXFJU3NnQmtFQmFpRXNJQUJCN0E5cUlTMGdBRUhNRDJvaExpQUFRZHdRYWlFdklBQkJwQTlxSVIwZ0FFR1lEMm9oSnlBQVFkQU9haUVvSUFCQjhBMXFJU2tnQUVIUURXb2hEeUFBUWVnS2FpRWhSTHU5MTluZmZNczlJVDBEUUVFQUlRc2dBQ2dDMUF0QkFTQUFLQUtVQ3lBSVFRRnFFQ2NnSmlBbElBWWdCeUFqSUNRZ0lTQVZJQUVRZUNBUElBWWdBUkFsSUNrZ0JpQUJFQ1VnS0NBR1FRRWdBUkEyUVFBaEEwRUFJUVZCQUNFQ1FRQWhERUVBSVFRQ2Z5QUdRUUZJSWlCRkJFQURRQ01BUVJCcklnSWdBQ2dDbEFzZ0EwRURkR29yQXdBNUF3Z2dBa1FBQUFBQUFBQUFBRGtEQUNBRklBSXJBd2dnQWlzREFHRnFJUVVnQTBFQmFpSURJQVpIRFFBTFFRQWhBeUFGSVFRRFFDTUFRUkJySWdJZ0EwRURkQ0lOSUFBb0FwUUxhaXNEQURrRENDQUNSQUFBQUFBQUFBQUFPUU1BSUFBb0F1d05JUW9DUUNBQ0t3TUlJQUlyQXdCaEJFQWdDaUFNUVFKMElnSnFJQU0yQWdBZ0FDZ0NqQTRnREVFRGRHb2dBQ2dDOUFzZ0RXb3JBd0E1QXdBZ0FDZ0M5QTRnQW1vb0FnQkNnSUNBZ0lDQWdQaS9memNEQUNBTVFRRnFJUXdNQVFzZ0NpQUVRUUowSWdKcUlBTTJBZ0FnQUNnQ2pBNGdCRUVEZEdvZ0FDZ0M5QXNnRFdvckF3Q2FPUU1BSUFBb0F2UU9JQUpxS0FJQVFvQ0FnSUNBZ0lENFB6Y0RBQ0FFUVFGcUlRUUxJQU5CQVdvaUF5QUdSdzBBQ3lBRklRSUxJQUlnREVZTFFkMHVJQUVRSWlBRUlBWkdRZDB1SUFFUUlpQUFRUUEyQXFBUElBQkNBRGNEbUE4Z0hTQUdRUUVnQVJBMklDOGdCa0VCSUFFUU5pQXVJQVlnQVJBbElDMGdMQ0FCRUNVZ0FFRUFOZ0tZRUNBQVFnQTNBNUFRSUNjZ0tDQXBJQUlnQmlBQkVQb0JRUUZCcWlVZ0FSQWlJQUFvQXB3UElBQW9BcGdQYWlBQ1NrRytKU0FCRUNJZ0FDZ0NpQkFnQW1wQkFEb0FBQ0FuSUNzZ0FSRDVBU0FHUVFCS0JFQURRQ0FMUVFOMElnVWdBQ2dDbEF4cUlBQW9BdlFMSUFWcUt3TUFtaUFBS0FMTURpQUNRUU4wYWlzREFLRTVBd0FnQzBFQmFpSUxJQVpIRFFBTEMwRUFJUU1nQWdSQUEwQUNmeU1BUVJCcklnVWdBQ2dDekE0Z0EwRURkR29yQXdBNUF3Z2dCVVFBQUFBQUFBQUFBRGtEQUNBRkt3TUlJQVVyQXdCa0N3UkFJQUFvQXBRTUlBQW9BdXdOSUFOQkFuUnFLQUlBUVFOMGFrSUFOd01BQ3lBRFFRRnFJZ01nQWtjTkFBc0xRUUFoQzBRQUFBQUFBQUFBQUNFeVJBQUFBQUFBQUFBQUlUTUNRQ0FHUVFCS0JFQURRQ01BUVJCcklnSWdDMEVEZENJRklBQW9BcFFMYWlzREFEa0RDQ0FDUkFBQUFBQUFBQUFBT1FNQUFrQWdBaXNEQ0NBQ0t3TUFZZzBBSXdCQkVHc2lBaUFBS0FLVURDQUZhaXNEQURrRENDQUNSQUFBQUFBQUFBQUFPUU1BSUFJckF3Z2dBaXNEQUdORkRRQWdBQ2dDbEF3Z0JXcENBRGNEQUFzZ01pQUFLQUtVRENBRmFpc0RBS0FoTWlBeklBQW9BdlFMSUFWcUt3TUFtU0l4SURFZ00yTWJJVE1nQzBFQmFpSUxJQVpIRFFBTEFuOGpBRUVRYXlJQ0lES1pPUU1JSUFJZ00wUUFBQUFBQUFEd1B5QXpSQUFBQUFBQUFQQS9aQnNnUHA5RUFBQUFBQUJxK0VDaVJCWlc1NTZ2QThJOG9xSTVBd0FnQWlzRENDQUNLd01BWXd0QjNTNGdBUkFpUVFBaEEwRUFJUUlEUUFKL0l3QkJFR3NpQkNBRFFRTjBJZ1VnQUNnQ2xBdHFLd01BT1FNSUlBUkVBQUFBQUFBQUFBQTVBd0FnQkNzRENDQUVLd01BWVFzRVFDTUFRUkJySWdRZ0FDZ0NsQXdnQldvckF3QTVBd2dnQkVRQUFBQUFBQUFBQURrREFDQUNJQVFyQXdnZ0JDc0RBR1J5SVFJTElBTkJBV29pQXlBR1J3MEFDeUFDUVFGeEJFQWdBQ2dDbEFzaEFrUUFBQUFBQUFBQUFDRXlRUUFoQXdOQUl3QkJFR3NpQkNBQ0lBTkJBM1FpQldvckF3QTVBd2dnQkVRQUFBQUFBQUFBQURrREFBSkFJQVFyQXdnZ0JDc0RBR0lOQUNNQVFSQnJJZ0lnQUNnQ2xBd2dCV29yQXdBNUF3Z2dBa1FBQUFBQUFBQUFBRGtEQUNBQ0t3TUlJQUlyQXdCa1JRMEFJQUFvQXBRTElBVnFJZ0lnQWlzREFFUVdWdWVlcndQQ1BLQTVBd0FMSURJZ0FDZ0NsQXNpQWlBRmFpc0RBS0FoTWlBRFFRRnFJZ01nQmtjTkFBc0NmeU1BUVJCcklnSWdNamtEQ0NBQ1JBQUFBQUFBQUFBQU9RTUFJQUlyQXdnZ0Fpc0RBR1FMUWQwdUlBRVFJa0VBSVFNRFFDQUFLQUtVQ3lBRFFRTjBhaUlDSUFJckF3QWdNcU01QXdBZ0EwRUJhaUlESUFaSERRQUxJQWtnQ1NnQ0hFRUJhallDSEF3REN3TkFJRDhnUGFJaE0wRUFJUVFEUUVRQUFBQUFBQUR3UHlFeUFuOGpBRUVRYXlJQ0lBUkJBM1FpRFNBQUtBS1VDMm9yQXdBNUF3Z2dBa1FBQUFBQUFBQUFBRGtEQUNBQ0t3TUlJQUlyQXdCa0N3UkFJRE1nQUNnQ3ZBd2dCRUVDZEdvb0FnQWdEV29yQXdDZ0lUSUxJQVJCQW5RaUJTQUFLQUxrREdvb0FnQWdEV29nTWprREFDQUVRUUZxSWdRaEF5QUVJQVpJQkVBRFFBSjhJd0JCRUdzaUFpQUFLQUtVQ3lBTmFpc0RBRGtEQ0NBQ1JBQUFBQUFBQUFBQU9RTUFSQUFBQUFBQUFBQUFJQUlyQXdnZ0Fpc0RBR1JGRFFBYUl3QkJFR3NpQ2lBRFFRTjBJZ0lnQUNnQ2xBdHFLd01BT1FNSUlBcEVBQUFBQUFBQUFBQTVBd0JFQUFBQUFBQUFBQUFnQ2lzRENDQUtLd01BWkVVTkFCb2dBQ2dDdkF3Z0JXb29BZ0FnQW1vckF3QUxJVEVnQUNnQzVBd2dCV29vQWdBZ0EwRURkR29nTVRrREFDQURRUUZxSWdNZ0JrY05BQXNMSUFRZ0JrY05BQXNnR1NBWktBSUFRUUZxTmdJQUlCOUJBQ0FHUVFFZ0ZTQUJFRXdOQWlBOVJBQUFBQUFBQUNSQW9pRTlEQUFMQUFzQ2Z5TUFRUkJySWdKRUFBQUFBQUFBQUFBNUF3Z2dBaUErbjBRQUFBQUFBR3I0UUtKRUZsYm5ucThEd2p5aVJBQUFBQUFBQVBBL29qa0RBQ0FDS3dNSUlBSXJBd0JqQzBIZExpQUJFQ0lnR1NBWktBSUFRUUZxTmdJQUlCOUJBQ0FHUVFFZ0ZTQUJFRXdOQUFOQUlCa2dHU2dDQUVFQmFqWUNBQ0E5UkFBQUFBQUFBQ1JBb2lFOUlCOUJBQ0FHUVFFZ0ZTQUJFRXhGRFFBTEN3SkFBa0FDUUFKQUFrQURRQUpBSUNZZ0pTQUdJQWNnSXlBa0lDRWdGU0FCRUhoQkFDRUxBa0FnSUVVRVFBTkFJd0JCRUdzaUJDQUxRUU4wSWdVZ0FDZ0NsQXRxS3dNQU9RTUlJQVJFQUFBQUFBQUFBQUE1QXdBZ0FDZ0NyQTBnQldvaEFnSjhJQVFyQXdnZ0JDc0RBR1FFUUNBQ1FvQ0FnSUNBZ0lENFB6Y0RBQ0FBS0FMMEN5QUZhaXNEQUpvTUFRc2dBa0lBTndNQVJBQUFBQUFBQUFBQUN5RXhJQUFvQXBRTUlBVnFJREU1QXdBZ0MwRUJhaUlMSUFaSERRQUxRUUFoQkFOQUlBUWlBa0VEZENJTUlBQW9BcXdOYWlJRklBVXJBd0FnQWtFQ2RDSU5JQUFvQXVRTWFpZ0NBQ0FNYWlzREFLTTVBd0FDUUNBQ1FRRnFJZ1FnQms0TkFDQUFLQUtzRFNJS0lBUkJBM1FpQTJvaUJTQUZLd01BSUFvZ0RHb3JBd0FpTVNBQUtBTGtEQ0FOYWlnQ0FDQURhaXNEQUtLaE9RTUFJQUpCQW1vaUF5QUdSZzBBQTBBZ0EwRURkQ0lGSUFBb0Fxd05haUlDSUFJckF3QWdNU0FBS0FMa0RDQU5haWdDQUNBRmFpc0RBS0toT1FNQUlBTkJBV29pQXlBR1J3MEFDd3NnQkNBR1J3MEFDMEVBSVFRRFFDQUVJZ0pCQTNRaURDQUFLQUtVREdvaUJTQUZLd01BSUFKQkFuUWlEU0FBS0FMa0RHb29BZ0FnREdvckF3Q2pPUU1BQWtBZ0FrRUJhaUlFSUFaT0RRQWdBQ2dDbEF3aUNpQUVRUU4wSWdOcUlnVWdCU3NEQUNBS0lBeHFLd01BSWpFZ0FDZ0M1QXdnRFdvb0FnQWdBMm9yQXdDaW9Ua0RBQ0FDUVFKcUlnTWdCa1lOQUFOQUlBTkJBM1FpQlNBQUtBS1VER29pQWlBQ0t3TUFJREVnQUNnQzVBd2dEV29vQWdBZ0JXb3JBd0Npb1RrREFDQURRUUZxSWdNZ0JrY05BQXNMSUFRZ0JrY05BQXNnQUNnQ3JBMGhBa1FBQUFBQUFBQUFBQ0V5UVFBaEEwUUFBQUFBQUFBQUFDRXpBMEFnQWlBRFFRTjBJZ1JxS3dNQUlqRWdNYUloTVNBeUlBQW9BcXdOSWdJZ0JHb3JBd0FnQkNBQUtBS1VEQ0lGYWlzREFLS2dJVElnTXlBeG9DRXpJQU5CQVdvaUF5QUdSdzBBQ3lBRklBVXJBd0FnTWlBem95SXhJQUlyQXdDaW9Ua0RBRUVCSVFNZ0JrRUJSd1JBQTBBZ0EwRURkQ0lGSUFBb0FwUU1haUlDSUFJckF3QWdNU0FBS0FLc0RTQUZhaXNEQUtLaE9RTUFJQU5CQVdvaUF5QUdSdzBBQ3dzZ0NDRUVBMEFnQUNnQzVBd2dCRUVDZEdvb0FnQWhEQ0FBS0FLVURDSU5JQVJCQTNRaUNtb2lCU3NEQUNFeUlBZ2dCQ0lEU2dSQUEwQWdNaUFNSUFOQkFXb2lBMEVEZENJQ2Fpc0RBQ0FDSUExcUt3TUFvcUVoTWlBRElBaEhEUUFMQ3lBRklESWdDaUFNYWlzREFLTTVBd0JCQUNFRElBUkJBRW9oQWtRQUFBQUFBQUFBQUNFeUlBUkJBV3NoQkVFQUlRc2dBZzBBQ3dOQUlESWdBQ2dDbEF3Z0EwRURkR29yQXdBaU1hQWhNaU1BUVJCcklnSWdNVGtEQ0NBQ1JBQUFBQUFBQUFBQU9RTUFJQXNnQWlzRENDQUNLd01BWW1vaEN5QURRUUZxSWdNZ0JrY05BQXNDUUNBTFJRMEFJd0JCRUdzaUFpQXlPUU1JSUFKRUFBQUFBQUFBQUFBNUF3QWdBaXNEQ0NBQ0t3TUFaRVVOQUNBeUlBdTNveUV4UVFBaEF3TkFBbjhqQUVFUWF5SUZJQU5CQTNRaUFpQUFLQUtVREdvckF3QTVBd2dnQlVRQUFBQUFBQUFBQURrREFDQUZLd01JSUFVckF3QmlDd1JBSUFBb0FwUU1JQUpxSWdJZ0Fpc0RBQ0F4b1RrREFBc2dBMEVCYWlJRElBWkhEUUFMQzBRQUFBQUFBQUFBQUNFeVFRQWhBd05BSURJZ0FDZ0NsQXdnQTBFRGRHb3JBd0FpTVNBeG9xQWhNaUFEUVFGcUlnTWdCa2NOQUF0RW1tUit4UTRiVVVvaE0wRi9JUUpCQUNFRElES2ZJVUFEUUFKL0l3QkJFR3NpQkNBRFFRTjBJZ1VnQUNnQ2xBeHFLd01BT1FNSUlBUkVBQUFBQUFBQUFBQTVBd0FnQkNzRENDQUVLd01BWXdzRVFDQURJQUlDZnlBQUtBS1VDeUFGYWlzREFDQUFLQUtVRENBRmFpc0RBSm9nTXhDQUFTSXhJVElqQUVFUWF5SUNJREk1QXdnZ0FpQXpPUU1BSUFJckF3Z2dBaXNEQUdNTEd5RUNJREVoTXdzZ0EwRUJhaUlESUFaSERRQUxRUUFoQXlNQVFSQnJJZ1VnUURrRENDQUZSQUFBQUFBQUFBQUFPUU1BSUFVckF3Z2dCU3NEQUdFTkFnTkFJQU5CQTNRaUJTQUFLQUswQzJvZ0FDZ0NsQXNnQldvckF3QWdBQ2dDbEF3Z0JXb3JBd0NnT1FNQUlBTkJBV29pQXlBR1J3MEFDd3dCQzBRQUFBQUFBQUFBQUNGQUl3QkJFR3NpQWtRQUFBQUFBQUFBQURrRENDQUNSQUFBQUFBQUFBQUFPUU1BSUFJckF3Z2dBaXNEQUdFTkJFRi9JUUpFbW1SK3hRNGJVVW9oTXdzZ0FFSUFOd1B3Q2lBVklBY2dBUkFsUVFBaEF5QVVCRUFEUUNBQUtBTE1EU0FEUVFOMGFrSUFOd01BSUFOQkFXb2lBeUFIUncwQUN3dEJBQ0VESUFaQkFFb0VRQU5BSUFBb0Fzd05JQUFvQXFBS0lBTkJBblJxS0FJQUlCQkJBV29nQUNnQ3RBc2dBMEVEZEdvckF3QVFRQ0FEUVFGcUlnTWdCa2NOQUFzTElBQkNBRGNEOEFwQkFDRURSQUFBQUFBQUFBQUFJVElnRkFSQUEwQWdBQ0F5SUFOQkEzUWlCU0FBS0FMTURXb3JBd0FpTVNBeG9rUUFBQUFBQUFEZ1A2SWdBQ2dDM0FjZ0JXb3JBd0Nqb0NJeU9RUHdDaUFEUVFGcUlnTWdCMGNOQUFzTElDRXJBd0FoTVNNQVFSQnJJZ1VnTWprRENDQUZJREU1QXdBZ0JTc0RDQ0FGS3dNQVpnMEFRUUFoQXlBelJBQUFBQUFBQVBBL0lETkVBQUFBQUFBQThEOWpHeUV5SUNCRkJFQURRQ0FEUVFOMElnVWdBQ2dDbEF0cUt3TUFJRElnQUNnQ2xBd2dCV29yQXdDaW9DSXhSQUFBQUFBQUFBQUFJREZFQUFBQUFBQUFBQUJrR3lFeElBQW9BclFMSUFWcUlERTVBd0FnQTBFQmFpSURJQVpIRFFBTEN5TUFRUkJySWdVZ01qa0RDQ0FGSURNNUF3QWdCU3NEQ0NBRkt3TUFZU0VGQWtBZ0FrRUFTQTBBSUFWRkRRQWdBQ2dDdEFzZ0FrRURkR3BDQURjREFBdEJBQ0VDUVFBaEF5QWdEUUlEUUVFQUlRc0NmeU1BUVJCcklnUWdBMEVEZENJRklBQW9BclFMYWlzREFEa0RDQ0FFUkFBQUFBQUFBQUFBT1FNQUlBUXJBd2dnQkNzREFHRUxCRUFqQUVFUWF5SUVJQUFvQXBRTElBVnFLd01BT1FNSUlBUkVBQUFBQUFBQUFBQTVBd0FnQkNzRENDQUVLd01BWWlFTEN5QUFLQUtVRHlBRGFpQUxPZ0FBSUFKQkFYRUVmMEVCQlNBQUtBS1VEeUFEYWkwQUFFRUFSd3NoQWlBRFFRRnFJZ01nQmtjTkFBc2dBQ2dDbEF0QkFTQUFLQUswQ3lBSVFRRnFFQ2NnQWtVTkFDTUFRUkJySWdJZ1FEa0RDQ0FDUkx1OTE5bmZmTXM5T1FNQUlBSXJBd2dnQWlzREFHVU5BQ0FmSUFZZ0tpQVZJQUVRbXdJTUFRc0xRUUFoQzBFQUlRTWdJQTBCQTBBZ0MwRUJjVVVFUUFKL1FRRWdBMEVEZENJQ0lBQW9BdFFMYWlzREFDSXhSQUFBQUFBQUFBQUFaQTBBR2tGL0lERkVBQUFBQUFBQUFBQmpEUUFhUVFBTElnVUNmMEVCSUFBb0FwUUxJQUpxS3dNQUlqRkVBQUFBQUFBQUFBQmtEUUFhUVg4Z01VUUFBQUFBQUFBQUFHTU5BQnBCQUFzaUFrY2hDeUFEUVFGcUlnTWdCa2NOQVNBQ0lBVkdEUU1NQkF0QkFTRUxJQU5CQVdvaUF5QUdSdzBBQ3d3Q0N5QUFLQUtVQzBFQklBQW9BclFMSUFoQkFXb1FKd3NnQ1NBSktBSVVRUUZxTmdJVUlBa29BaFJCQVVvTkFnd0JDeUFKUVFBMkFoUUxJQWtnQ1NnQ0dFRUJhallDR0NBSktBSVlRUXBIRFFFTEN5QUdRUUZPQkVCQkFDRURBMEFnQTBFRGRDSUNJQUFvQXZRVmFpQUFLQUtVQ3lBQ2Fpc0RBRGtEQUNBRFFRRnFJZ01nQmtjTkFBc0xJQlFFUUVFQUlRTURRQ0FBS0FLY0J5QURRUU4wYWtJQU53TUFJQU5CQVdvaUF5QUhSdzBBQ3dzZ0JrRUJTQVIvUVFBRlFRQWhBd05BSUFBb0Fwd0hJQUFvQXFBS0lBTkJBblJxS0FJQUlCQkJBV29nQUNnQzlCVWdBMEVEZEdvckF3QVFRQ0FEUVFGcUlnTWdCa2NOQUFzZ0Jnc2hCUUpBQWtBQ1FBSkFJQlFFUUVFQUlRTkVBQUFBQUFBQUFBQWhNZ05BSURJZ0EwRURkQ0lDSUFBb0Fwd0hhaXNEQUVRQUFBQUFBQUR3UHlBQUtBSzhCeUFDYWlzREFDSXhBbjhqQUVFUWF5SUNJREU1QXdnZ0FrUUFBQUFBQUFBQUFEa0RBQ0FDS3dNSUlBSXJBd0JoQ3h1am1TSXhJREVnTW1NYklUSWdBMEVCYWlJRElBZEhEUUFMQW44Z0FDc0RzQVVoTVNNQVFSQnJJZ0lnTWprRENDQUNJREU1QXdBZ0Fpc0RDQ0FDS3dNQVpRc0VRQ0FISVFJTUFndEVBQUFBQUFBQUFBQWhNMEVBSVFNZ0ZBMENEQU1MUVFBaEFrUUFBQUFBQUFBQUFDRXlRUUFoQTBRQUFBQUFBQUFBQUNFelJBQUFBQUFBQUFBQUlURWdBQ3NEc0FVaFB5TUFRUkJySWdSRUFBQUFBQUFBQUFBNUF3Z2dCQ0EvT1FNQUlBUXJBd2dnQkNzREFHVkZEUU1MSUFBckE1QUZJVEVnQ1VFQU5nSU1JQWtnQ1NnQ0VFRUJhallDRUNBQVFjQVhhaUlCSUFFb0FnQkJBV28yQWdBZ05pQXhvaUUyREFRTEEwQWdBMEVEZENJRklBQW9BcHdIYWlJQ0lBSXJBd0NhSUFBb0F0d0hJQVZxS3dNQW96a0RBQ0FEUVFGcUlnTWdCMGNOQUF0QkFDRURJQlJGRFFBZ0FDZ0NuQWNoQWtRQUFBQUFBQUFBQUNFeEEwQWdBaUFEUVFOMElnVnFLd01BSWpnZ09LSWhPQ0F4SUFBb0Fwd0hJZ0lnQldvckF3QWdBQ2dDb0Fvb0FnQWdCV29yQXdDaW9DRXhJRE1nT0tBaE15QURRUUZxSWdNZ0IwY05BQXNnQnlJQ0lRTU1BUXNnQnlFQ1JBQUFBQUFBQUFBQUlURUxBbjhqQUVFUWF5SUZJRE9mSWpzNUF3Z2dCVVFBQUFBQUFBQUFBRGtEQUNBRkt3TUlJQVVyQXdCa0MwSEdMaUFCRUNKQkFDRVRJQWxCQURZQ0NDQTZJRHVqSVRrZ0JpQWlSZ1JBSUFBb0F1Z0ZJUnRCQVNFWUlBTWhCU0F4SVRnTUFRc2dBQ2dDN0FVaEd5QURJUVVnTVNFNFFRQWhHQXNnQUNnQzNBWkJBU0FBS0FLOEJpQVFRUUZxRUNjZ0FDZ0MzQVlnQUNnQ25BY2dFRUVCYWlBNUVFQWdBRUhBQm1vZ0FFR2tDR29nQUVHQUFXb2dBRUhFQ0dvZ0FFR2dBV29nQnhDWEFpQUFRZEFKYWlnQ0FDQU9RUUowYWlnQ0FFRUJJQUFvQXR3R0lCQkJBV29RSnlBQUtBS1VBa0VCSUFBb0F0d0dJQkJCQVdvUUp5QUFJQUJCK0FGcUVFc2dBRUVBT2dEcUFpQUFRUUU3QWVnQ1FRTU1BUXNnQmtFQklBWkJBVW9iSVFZZ0FFSFFDV29vQWdBb0FnQkJBU0FBS0FLOEJpQUhRUUZySWdGQkFXb1FKeUFBS0FLVUFrRUJJQUFvQXJ3R0lBRkJBV29RSnlBQUlBQkIrQUZxRUVzZ0FFRUFPZ0RxQWlBQVFRRTdBZWdDUVFBTE5nTHdBeUFBS0FLUUJDQUhOZ0lBSUFBb0FwQUVJQkUyQWdRZ0FDZ0NrQVFnRnpZQ0NDQUFLQUtRQkNBYU5nSU1JQUFvQXBBRUlCdzJBaEFnQUNnQ2tBUWdCVFlDRkNBQUtBS1FCQ0FDTmdJWUlBQW9BcEFFSUJZMkFod2dBQ2dDa0FRZ0NTZ0NFRFlDSUNBQUtBS1FCQ0FPTmdJa0lBQW9BcEFFSUFZMkFpZ2dBQ2dDa0FRZ0NTZ0NERFlDTENBQUtBS1FCQ0FKS0FJSU5nSXdJQUFvQXBBRUlCczJBalFnQUNnQ3NBUWdIam9BQUNBQUtBS3dCQ0FTT2dBQklBQW9BckFFSUJNNkFBSWdBQ2dDc0FRZ0dEb0FBeUFBS0FMUUJDQTBPUU1BSUFBb0F0QUVJRFk1QXdnZ0FDZ0MwQVFnT1RrREVDQUFLQUxRQkNBNk9RTVlJQUFvQXRBRUlEczVBeUFnQUNnQzBBUWdPRGtES0NBQUtBTFFCQ0F5T1FNd0lBQW9BdEFFSUR3NUF6Z2dBQ2dDMEFRZ056a0RRQ0FBS0FMUUJDQTFPUU5JUVFFTElRQWdDVUVnYWlRQUlBQUwrZ29DQ1g4RWZBSi9JQUFvQXV3Q0lnSkJBRWdFUUVRQUFBQUFBS0NJd0NFTVJBQUFBQUFBZ0ZKQUlRdEVBQUFBQUFEZ2IwQWhEVUhSQUNFR1FmTjRJUWRCNlhnaEJVSG5BaUVKUVVZTUFRc2dBQ2dDekFNaUF5c0RFQ0VNSUFNckF3Z2hDeUFES3dNQUlRMGdBQ2dDakFNaUF5Z0NFQ0VHSUFNb0Fnd2hCeUFES0FJSUlRVWdBeWdDQUNFSklBTW9BZ1FMSVFNQ2Z3SkFBbjhDUUFKQUFrQUNRQUpBQWtBZ0FnNEVBUUlEQkFBTElBQkNBRGNEd0JjZ0FFRUFPZ0NnQ0NBQVFRQTZBT29DSUFCQkFEc0I2QUlnQUVISUYycENBRGNEQUNBQVFkQVhha0lBTndNQUlBQkIyQmRxUWdBM0F3QWdBRUhnRjJwQ0FEY0RBQ0FBUWVnWGFrRUFOZ0lBUVFBZ0FDZ0NBQTBIR2lBQUtBTDBBU0VHSUFBb0F2QUJJUWNnQUNnQ0JDRUZBbjhqQUVFUWF5SUNJQUFyQXhnNUF3Z2dBa1FBQUFBQUFBQUFBRGtEQUNBQ0t3TUlJQUlyQXdCaUN3UkFJQUJCNEJacUlBVWdBUkFsSUFCQm9CZHFJQVlnQjJwQkFXb2lBaUFCRUNVZ0FFR0FGMm9nQWlBQkVDVUxJQUJCOUFOcVFRNGdBUkFxSUFCQmxBUnFRUVFnQVJBcUlBQkJ0QVJxUVFvZ0FSQXFJQUJCZnpZQzhBTU1CQXRCQVNFQ0lBQkJ2QmRxS0FJQVFRRWdBQ2dDdkFJZ0JpQUhha0VCYWhBbklBQW9BcFFDUVFFZ0FFSDhGbW9vQWdBZ0JSQW5JQUFvQXBRQ0lBTkJBM1JxSUFzNUF3QU1CUXNnQUVHY0Yyb2lDQ2dDQUVFQklBQW9BcndDSUFZZ0Iyb2lBa0VCYWhBbklBTkJBM1FpQkNBQUtBTGtBaWdDQUdvZ0FDZ0N5QUlnQ0NnQ0FDQUNRUUZxRUNjZ0FDZ0M1QUlvQWdBZ0JHb2dBQ2dDeUFJZ0FFRzhGMm9vQWdBZ0FrRUJhaENWQVNBQUtBTGtBaWdDQUNBRWFpQUFLQUxJQWlBQ1FRRnFSQUFBQUFBQUFQQS9JQXNnREtHaklnMFFOQ0FBSUFBb0FzZ1hRUUpxTmdMSUYwRUJEQU1MSUFCQkFUc0I2QUlNQVFzZ0FFSElGMm9pQWlBQ0tBSUFRUUZxTmdJQUMwRUFJQUFnQVJDQkFrVU5BaHBCQXlFQ0l3QkJFR3NpQkNBQUt3TVlPUU1JSUFSRUFBQUFBQUFBQUFBNUF3QWdCQ3NEQ0NBRUt3TUFZUTBCSUFBdEFPZ0NSUTBCSUFCQmdBSTdBZWdDUVFBaEF5QUFRZndXYWlnQ0FFRUJJQUFvQXBRQ0lBVVFKMEVBQ3lFQ0EwQUNRQUpBQWtBQ1FDQUNSUVJBSUFWQkFXc2hCQ0FESUFWT0RRRWdBMEVEZENJQ0lBQkIvQlpxS0FJQWFpc0RBQ0lOSUFBckF4Z2dBQ2dDUENBQ2Fpc0RBS0lpQzZFaERBSkFJQUFvQXB3QklBTnFMUUFBUlEwQUlBQW9BbHdnQW1vckF3QWhEaU1BUVJCcklnSWdERGtEQ0NBQ0lBNDVBd0FnQWlzRENDQUNLd01BWTBVTkFDQUFLQUpjSUFOQkEzUnFLd01BSVF3TElBMGdDNkFoQ3dKQUlBQW9BcndCSUFOcUxRQUFSUTBBSUFOQkEzUWlDQ0FBS0FKOGFpc0RBQ0VPSXdCQkVHc2lBaUFMT1FNSUlBSWdEamtEQUNBQ0t3TUlJQUlyQXdCa1JRMEFJQUFvQW53Z0NHb3JBd0FoQ3dzQ2Z5TUFRUkJySWdJZ0REa0RDQ0FDSUFzNUF3QWdBaXNEQ0NBQ0t3TUFaUXRCaHl3Z0FSQWlJd0JCRUdzaUFpQU1PUU1JSUFJZ0N6a0RBQ0FDS3dNSUlBSXJBd0JpRFFKQkFDRUpJQVlnQjJvaUJFRUFTQTBFSUFSQkFXb2hDVUVBSVFJZ0EwRURkQ0VJQTBBZ0FDZ0M1QUlnQWtFQ2RHb29BZ0FnQ0dwQ0FEY0RBQ0FDSUFSSElRb2dBa0VCYWlFQ0lBb05BQXNNQkFzZ0EwRUJhaUVEREFJTElBQW9BcFFDUVFFZ0FFSDhGbW9vQWdBZ0JFRUJhaEFuUVFJaEFnd0VDMEVBSVFJZ0FDZ0NsQUpCQVNBQUtBTDhGaUFFUVFGcUVDY2dBQ2dDbEFJZ0EwRURkR29nRERrREFBd0RDMEVBSVFJTUFRdEJBU0VDREFBTEFBc2dBQ0FDTmdMc0FpQUFLQUtNQXlBSk5nSUFJQUFvQW93RElBTTJBZ1FnQUNnQ2pBTWdCVFlDQ0NBQUtBS01BeUFITmdJTUlBQW9Bb3dESUFZMkFoQWdBQ2dDekFNZ0RUa0RBQ0FBS0FMTUF5QUxPUU1JSUFBb0Fzd0RJQXc1QXhCQkFRc0x5QXNDQ0g4QmZpTUFRWUFDYXlJSUpBQkJLQkFwSWdkQkFEWUNBRUhjekFCQkFEWUNBQ0FJUVFocUVEcEIzTXdBS0FJQUlRUkIzTXdBUVFBMkFnQkJmeUVGUVFRaENRSkFBa0FDUUNBRVJRMEFRZURNQUNnQ0FDSUdSUTBBSUFRb0FnQWdCMEVFRUNFaUJVVU5BU0FHRUFFTEVBQWhCQ0FGUVFGSEJFQWdDRUhnQUdwQkFTQUhRUVFRTlNFSEVBQWhDVUVBSVFRTEEwQUNRQUpBQWtBQ1FDQUVCRUJCREJBR0lRdEIzTXdBUVFBMkFnQkJMQ0FMSUFnb0FrUVFCQnBCM013QUtBSUFJUVJCM013QVFRQTJBZ0JCZnlFRklBUkZEUUpCNE13QUtBSUFJZ1pGRFFJZ0JDZ0NBQ0FISUFrUUlTSUZEUUVNQnd0QjNNd0FRUUEyQWdBZ0NDQUlRZUFBYWpZQ1BFSGN6QUFvQWdBaEJFSGN6QUJCQURZQ0FFRi9JUVVnQkVVTkEwSGd6QUFvQWdBaUJrVU5BeUFFS0FJQUlBY2dDUkFoSWdVTkFnd0ZDeUFHRUFFTEVBQWhCQ0FGUVFGR0RRSWdDMEhJRjBFdEVBVUFDeUFHRUFFTEVBQWhCQ0FGUVFGR0RRQWdBMUJGQkVCQjNNd0FRUUEyQWdBZ0NFRUlhaUFERUVOQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZBa0FnQkVVTkFFSGd6QUFvQWdBaUJrVU5BQ0FFS0FJQUlBY2dDUkFoSWdWRkRRTWdCaEFCQ3hBQUlRUWdCVUVCUmcwQkN5QUFLQUlFSVF0QjNNd0FRUUEyQWdBZ0FiMGlERUlnaUNBTUlBZ29BZ2hCQVVZYlFvQ0F3UDhIZzBLQWdNRC9CMUloQ2tIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUVGL0lRVUNRQ0FFUlEwQVFlRE1BQ2dDQUNJR1JRMEFJQVFvQWdBZ0J5QUpFQ0VpQlVVTkF5QUdFQUVMRUFBaEJDQUZRUUZHRFFCQjNNd0FRUUEyQWdCQndBQWdDa0dFS3lBSVFRaHFFQU5CM013QUtBSUFJUVJCM013QVFRQTJBZ0JCZnlFRkFrQWdCRVVOQUVIZ3pBQW9BZ0FpQmtVTkFDQUVLQUlBSUFjZ0NSQWhJZ1ZGRFFNZ0JoQUJDeEFBSVFRZ0JVRUJSZzBBUWR6TUFFRUFOZ0lBSXdCQkVHc2lCQ0FCT1FNSUlBUkVBQUFBQUFBQUFBQTVBd0FnQkNzRENDQUVLd01BWkNFS1Fkek1BQ2dDQUNFRVFkek1BRUVBTmdJQVFYOGhCUUpBSUFSRkRRQkI0TXdBS0FJQUlnWkZEUUFnQkNnQ0FDQUhJQWtRSVNJRlJRMERJQVlRQVFzUUFDRUVJQVZCQVVZTkFFSGN6QUJCQURZQ0FFSEFBQ0FLUWFvcklBaEJDR29RQTBIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUVGL0lRVUNRQ0FFUlEwQVFlRE1BQ2dDQUNJR1JRMEFJQVFvQWdBZ0J5QUpFQ0VpQlVVTkF5QUdFQUVMRUFBaEJDQUZRUUZHRFFCQjNNd0FRUUEyQWdBZ0FyMGlERUlnaUNBTUlBZ29BZ2hCQVVZYlFvQ0F3UDhIZzBLQWdNRC9CMUloQ2tIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUVGL0lRVUNRQ0FFUlEwQVFlRE1BQ2dDQUNJR1JRMEFJQVFvQWdBZ0J5QUpFQ0VpQlVVTkF5QUdFQUVMRUFBaEJDQUZRUUZHRFFCQjNNd0FRUUEyQWdCQndBQWdDa0hGS3lBSVFRaHFFQU5CM013QUtBSUFJUVJCM013QVFRQTJBZ0JCZnlFRkFrQWdCRVVOQUVIZ3pBQW9BZ0FpQmtVTkFDQUVLQUlBSUFjZ0NSQWhJZ1ZGRFFNZ0JoQUJDeEFBSVFRZ0JVRUJSZzBBUWR6TUFFRUFOZ0lBSXdCQkVHc2lCQ0FDT1FNSUlBUkVBQUFBQUFBQUFBQTVBd0FnQkNzRENDQUVLd01BWmlFS1Fkek1BQ2dDQUNFRVFkek1BRUVBTmdJQVFYOGhCUUpBSUFSRkRRQkI0TXdBS0FJQUlnWkZEUUFnQkNnQ0FDQUhJQWtRSVNJRlJRMERJQVlRQVFzUUFDRUVJQVZCQVVZTkFFSGN6QUJCQURZQ0FFSEFBQ0FLUWV3cklBaEJDR29RQTBIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUVGL0lRVUNRQ0FFUlEwQVFlRE1BQ2dDQUNJR1JRMEFJQVFvQWdBZ0J5QUpFQ0VpQlVVTkF5QUdFQUVMRUFBaEJDQUZRUUZHRFFBZ0N5QUJPUU9BQlNBTElBSTVBOWdGSUF0QkFEWUNBRUhjekFCQkFEWUNBRUU3SUFoQkNHb1FDRUhjekFBb0FnQWhCRUhjekFCQkFEWUNBRUYvSVFVQ1FDQUVSUTBBUWVETUFDZ0NBQ0lHUlEwQUlBUW9BZ0FnQnlBSkVDRWlCVVVOQWlBR0VBRUxFQUFoQkNBRlFRRkdEUUFMSUFjUUppQUlRWUFDYWlRQUR3c2dCQ0FHRUFJQUN5QUVJQVlRQWdBTHVnRUNBMzhCZmlBQktBSUFJQUFvQWdST1FZNHFJQUlRSWlBQUtBSUVRUUZPQkVBRFFDQUZRUU4wSWdNZ0FTZ0NIR29yQXdDOUlnWkNJSWdnQmlBQ0tBSUFRUUZHRzBLQWdNRC9CNE5DZ0lEQS93ZFNRYWtxSUFJUUlnSi9Jd0JCRUdzaUJDQUJLQUljSUFOcUt3TUFPUU1JSUFSRUFBQUFBQUFBQUFBNUF3QWdCQ3NEQ0NBRUt3TUFZZ3RCM0NvZ0FoQWlJQUFvQWp3Z0Eyb2dBU2dDSENBRGFpc0RBSms1QXdBZ0JVRUJhaUlGSUFBb0FnUklEUUFMQ3d1REJnRUlmeU1BUVlBQ2F5SUhKQUJCS0JBcElnWkJBRFlDQUVIY3pBQkJBRFlDQUNBSFFRaHFFRHBCM013QUtBSUFJUU5CM013QVFRQTJBZ0JCZnlFRVFRUWhDQUpBQWtBZ0EwVU5BRUhnekFBb0FnQWlCVVVOQUNBREtBSUFJQVpCQkJBaElnUkZEUUVnQlJBQkN4QUFJUU1nQkVFQlJ3UkFJQWRCNEFCcVFRRWdCa0VFRURVaEJoQUFJUWhCQUNFREN3TkFBa0FDUUFKQUFrQWdBd1JBUVF3UUJpRUZRZHpNQUVFQU5nSUFRU3dnQlNBSEtBSkVFQVFhUWR6TUFDZ0NBQ0VEUWR6TUFFRUFOZ0lBUVg4aEJDQURSUTBDUWVETUFDZ0NBQ0lKUlEwQ0lBTW9BZ0FnQmlBSUVDRWlCQTBCSUFNZ0NSQUNBQXRCM013QVFRQTJBZ0FnQnlBSFFlQUFhallDUEVIY3pBQW9BZ0FoQTBIY3pBQkJBRFlDQUVGL0lRUWdBMFVOQTBIZ3pBQW9BZ0FpQlVVTkF5QURLQUlBSUFZZ0NCQWhJZ1FOQWd3RkN5QUpFQUVMRUFBaEF5QUVRUUZHRFFJZ0JVSElGMEV0RUFVQUN5QUZFQUVMRUFBaEF5QUVRUUZHRFFBZ0FsQkZCRUJCM013QVFRQTJBZ0FnQjBFSWFpQUNFRU5CM013QUtBSUFJUU5CM013QVFRQTJBZ0JCZnlFRUFrQWdBMFVOQUVIZ3pBQW9BZ0FpQlVVTkFDQURLQUlBSUFZZ0NCQWhJZ1JGRFFNZ0JSQUJDeEFBSVFNZ0JFRUJSZzBCQ3lBQUtBSUVJUWxCM013QVFRQTJBZ0FnQVNnQ0JDRUtRZHpNQUNnQ0FDRURRZHpNQUVFQU5nSUFRWDhoQkFKQUlBTkZEUUJCNE13QUtBSUFJZ1ZGRFFBZ0F5Z0NBQ0FHSUFnUUlTSUVSUTBDSUFVUUFRc1FBQ0VESUFSQkFVWU5BRUhjekFCQkFEWUNBRUhKQUNBSklBb2dCMEVJYWhBRFFkek1BQ2dDQUNFRFFkek1BRUVBTmdJQVFYOGhCQUpBSUFORkRRQkI0TXdBS0FJQUlnVkZEUUFnQXlnQ0FDQUdJQWdRSVNJRVJRMENJQVVRQVFzUUFDRURJQVJCQVVZTkFFSGN6QUJCQURZQ0FFRTdJQWRCQ0dvUUNFSGN6QUFvQWdBaEEwSGN6QUJCQURZQ0FFRi9JUVFDUUNBRFJRMEFRZURNQUNnQ0FDSUZSUTBBSUFNb0FnQWdCaUFJRUNFaUJFVU5BaUFGRUFFTEVBQWhBeUFFUVFGR0RRQUxJQVlRSmlBSFFZQUNhaVFBRHdzZ0F5QUZFQUlBQzRBS0FnaC9BWDRqQUVHQUFtc2lDQ1FBUVNnUUtTSUhRUUEyQWdCQjNNd0FRUUEyQWdBZ0NFRUlhaEE2UWR6TUFDZ0NBQ0VFUWR6TUFFRUFOZ0lBUVg4aEJVRUVJUWtDUUFKQUFrQWdCRVVOQUVIZ3pBQW9BZ0FpQmtVTkFDQUVLQUlBSUFkQkJCQWhJZ1ZGRFFFZ0JoQUJDeEFBSVFRZ0JVRUJSd1JBSUFoQjRBQnFRUUVnQjBFRUVEVWhCeEFBSVFsQkFDRUVDd05BQWtBQ1FBSkFBa0FnQkFSQVFRd1FCaUVLUWR6TUFFRUFOZ0lBUVN3Z0NpQUlLQUpFRUFRYVFkek1BQ2dDQUNFRVFkek1BRUVBTmdJQVFYOGhCU0FFUlEwQ1FlRE1BQ2dDQUNJR1JRMENJQVFvQWdBZ0J5QUpFQ0VpQlEwQkRBY0xRZHpNQUVFQU5nSUFJQWdnQ0VIZ0FHbzJBanhCM013QUtBSUFJUVJCM013QVFRQTJBZ0JCZnlFRklBUkZEUU5CNE13QUtBSUFJZ1pGRFFNZ0JDZ0NBQ0FISUFrUUlTSUZEUUlNQlFzZ0JoQUJDeEFBSVFRZ0JVRUJSZzBDSUFwQnlCZEJMUkFGQUFzZ0JoQUJDeEFBSVFRZ0JVRUJSZzBBSUFOUVJRUkFRZHpNQUVFQU5nSUFJQWhCQ0dvZ0F4QkRRZHpNQUNnQ0FDRUVRZHpNQUVFQU5nSUFRWDhoQlFKQUlBUkZEUUJCNE13QUtBSUFJZ1pGRFFBZ0JDZ0NBQ0FISUFrUUlTSUZSUTBESUFZUUFRc1FBQ0VFSUFWQkFVWU5BUXNnQUNnQ0JDRUtRZHpNQUVFQU5nSUFJQUc5SWd4Q0lJZ2dEQ0FJS0FJSVFRRkdHMEtBZ01EL0I0TkNnSURBL3dkU0lRdEIzTXdBS0FJQUlRUkIzTXdBUVFBMkFnQkJmeUVGQWtBZ0JFVU5BRUhnekFBb0FnQWlCa1VOQUNBRUtBSUFJQWNnQ1JBaElnVkZEUU1nQmhBQkN4QUFJUVFnQlVFQlJnMEFRZHpNQUVFQU5nSUFRY0FBSUF0QnF5a2dDRUVJYWhBRFFkek1BQ2dDQUNFRVFkek1BRUVBTmdJQVFYOGhCUUpBSUFSRkRRQkI0TXdBS0FJQUlnWkZEUUFnQkNnQ0FDQUhJQWtRSVNJRlJRMERJQVlRQVFzUUFDRUVJQVZCQVVZTkFFSGN6QUJCQURZQ0FDTUFRUkJySWdRZ0FUa0RDQ0FFUkFBQUFBQUFBQUFBT1FNQUlBUXJBd2dnQkNzREFHWWhDMEhjekFBb0FnQWhCRUhjekFCQkFEWUNBRUYvSVFVQ1FDQUVSUTBBUWVETUFDZ0NBQ0lHUlEwQUlBUW9BZ0FnQnlBSkVDRWlCVVVOQXlBR0VBRUxFQUFoQkNBRlFRRkdEUUJCM013QVFRQTJBZ0JCd0FBZ0MwSFRLU0FJUVFocUVBTkIzTXdBS0FJQUlRUkIzTXdBUVFBMkFnQkJmeUVGQWtBZ0JFVU5BRUhnekFBb0FnQWlCa1VOQUNBRUtBSUFJQWNnQ1JBaElnVkZEUU1nQmhBQkN4QUFJUVFnQlVFQlJnMEFRZHpNQUVFQU5nSUFRWDhoQlVIQUFDQUNRWDl6UVI5MlFlOHBJQWhCQ0dvUUEwSGN6QUFvQWdBaEJFSGN6QUJCQURZQ0FBSkFJQVJGRFFCQjRNd0FLQUlBSWdaRkRRQWdCQ2dDQUNBSElBa1FJU0lGUlEwRElBWVFBUXNRQUNFRUlBVkJBVVlOQUVIY3pBQkJBRFlDQUNNQVFSQnJJZ1FnQVRrRENDQUVSQUFBQUFBQUFBQUFPUU1BSUFRckF3Z2dCQ3NEQUdFaEMwSGN6QUFvQWdBaEJFSGN6QUJCQURZQ0FFRi9JUVVDUUNBRVJRMEFRZURNQUNnQ0FDSUdSUTBBSUFRb0FnQWdCeUFKRUNFaUJVVU5BeUFHRUFFTEVBQWhCQ0FGUVFGR0RRQWdDaUFDTmdJUUlBb2dBVVNON2JXZzk4YXdQaUFCSUFzYklBSWJPUU1JUWR6TUFFRUFOZ0lBUVRzZ0NFRUlhaEFJUWR6TUFDZ0NBQ0VFUWR6TUFFRUFOZ0lBUVg4aEJRSkFJQVJGRFFCQjRNd0FLQUlBSWdaRkRRQWdCQ2dDQUNBSElBa1FJU0lGUlEwQ0lBWVFBUXNRQUNFRUlBVkJBVVlOQUFzZ0J4QW1JQWhCZ0FKcUpBQVBDeUFFSUFZUUFnQUxJQVFnQmhBQ0FBdWFDQUVIZnlNQVFZQUNheUlISkFCQktCQXBJZ2hCQURZQ0FFSGN6QUJCQURZQ0FDQUhRUWhxRURwQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZRUVFoQ2dKQUFrQUNRQ0FFUlEwQVFlRE1BQ2dDQUNJR1JRMEFJQVFvQWdBZ0NFRUVFQ0VpQlVVTkFTQUdFQUVMRUFBaEJDQUZRUUZIQkVBZ0IwSGdBR3BCQVNBSVFRUVFOU0VJRUFBaENrRUFJUVFMQTBBQ1FBSkFBa0FDUUNBRUJFQkJEQkFHSVFsQjNNd0FRUUEyQWdCQkxDQUpJQWNvQWtRUUJCcEIzTXdBS0FJQUlRUkIzTXdBUVFBMkFnQkJmeUVGSUFSRkRRSkI0TXdBS0FJQUlnWkZEUUlnQkNnQ0FDQUlJQW9RSVNJRkRRRU1Cd3RCM013QVFRQTJBZ0FnQnlBSFFlQUFhallDUEVIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUVGL0lRVWdCRVVOQTBIZ3pBQW9BZ0FpQmtVTkF5QUVLQUlBSUFnZ0NoQWhJZ1VOQWd3RkN5QUdFQUVMRUFBaEJDQUZRUUZHRFFJZ0NVSElGMEV0RUFVQUN5QUdFQUVMRUFBaEJDQUZRUUZHRFFBZ0ExQkZCRUJCM013QVFRQTJBZ0FnQjBFSWFpQURFRU5CM013QUtBSUFJUVJCM013QVFRQTJBZ0JCZnlFRkFrQWdCRVVOQUVIZ3pBQW9BZ0FpQmtVTkFDQUVLQUlBSUFnZ0NoQWhJZ1ZGRFFNZ0JoQUJDeEFBSVFRZ0JVRUJSZzBCQ3lBQUtBSUVJUWxCM013QVFRQTJBZ0JCZnlFRlFjQUFJQUZCZjNOQkgzWkJneWtnQjBFSWFoQURRZHpNQUNnQ0FDRUVRZHpNQUVFQU5nSUFBa0FnQkVVTkFFSGd6QUFvQWdBaUJrVU5BQ0FFS0FJQUlBZ2dDaEFoSWdWRkRRTWdCaEFCQ3hBQUlRUWdCVUVCUmcwQVFkek1BRUVBTmdJQVFYOGhCVUhBQUNBQ1FYOXpRUjkyUVpjcElBZEJDR29RQTBIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUFKQUlBUkZEUUJCNE13QUtBSUFJZ1pGRFFBZ0JDZ0NBQ0FJSUFvUUlTSUZSUTBESUFZUUFRc1FBQ0VFSUFWQkFVWU5BQ0FKSUFJMkF2UUJJQWtnQVRZQzhBRkIzTXdBUVFBMkFnQkJ4QUFnQ1VHZ0Ftb2dBU0FDYWtFQmFpQUhRUWhxRUFOQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZBa0FnQkVVTkFFSGd6QUFvQWdBaUJrVU5BQ0FFS0FJQUlBZ2dDaEFoSWdWRkRRTWdCaEFCQ3hBQUlRUWdCVUVCUmcwQUlBa29BZ1FoQkNBSktBTDBBU0VGSUFrb0F2QUJJUVpCM013QVFRQTJBZ0JCeFFBZ0NVSEFBbW9nQlNBR2FrRUJhaUFFSUFkQkNHb1FFa0hjekFBb0FnQWhCRUhjekFCQkFEWUNBRUYvSVFVQ1FDQUVSUTBBUWVETUFDZ0NBQ0lHUlEwQUlBUW9BZ0FnQ0NBS0VDRWlCVVVOQWlBR0VBRUxFQUFoQkNBRlFRRkdEUUJCM013QVFRQTJBZ0JCT3lBSFFRaHFFQWhCM013QUtBSUFJUVJCM013QVFRQTJBZ0JCZnlFRkFrQWdCRVVOQUVIZ3pBQW9BZ0FpQmtVTkFDQUVLQUlBSUFnZ0NoQWhJZ1ZGRFFJZ0JoQUJDeEFBSVFRZ0JVRUJSZzBBQ3lBSUVDWWdCMEdBQW1va0FBOExJQVFnQmhBQ0FBc2dCQ0FHRUFJQUMrOEJBUUovSUFBb0FpQWlBU0FBS0FJY0lnSkhCRUFEUUNBQlFRUnJJZ0VvQWdBUUJ5QUJJQUpIRFFBTEN5QUFJQUkyQWlBZ0FDZ0NMQ0lCSUFBb0FpZ2lBa2NFUUFOQUlBRkJCR3NpQVNnQ0FCQUhJQUVnQWtjTkFBc0xJQUFnQWpZQ0xDQUFLQUk0SWdFZ0FDZ0NOQ0lDUndSQUEwQWdBVUVFYXlJQktBSUFFQWNnQVNBQ1J3MEFDd3NnQUNBQ05nSTRJQUFvQWtRaUFTQUFLQUpBSWdKSEJFQURRQ0FCUVFScklnRW9BZ0FRQnlBQklBSkhEUUFMQ3lBQUlBSTJBa1FnQUNnQ1VDSUJJQUFvQWt3aUFrY0VRQU5BSUFGQkJHc2lBU2dDQUJBSElBRWdBa2NOQUFzTElBQWdBallDVUF1WEFRSUJmd0YrSUFNUVJpQUFRUUJLUWM0bUlBUVFJaUFCS0FJQUlBQk9RZUFtSUFRUUlpQUJJQUFnQkJCUVFmb21JQVFRSWlBQ3ZTSUdRaUNJSUFZZ0JDZ0NBRUVCUmh0Q2dJREEvd2VEUW9DQXdQOEhVa0dxSnlBRUVDSUNmeU1BUVJCcklnVWdBamtEQ0NBRlJBQUFBQUFBQUFBQU9RTUFJQVVyQXdnZ0JTc0RBR1FMUWRVbklBUVFJaUFBSUFFZ0FpQURJQVFRZVF1SEJnRUhmeU1BUVlBQ2F5SUpKQUJCS0JBcElnaEJBRFlDQUVIY3pBQkJBRFlDQUNBSlFRaHFFRHBCM013QUtBSUFJUVZCM013QVFRQTJBZ0JCZnlFR1FRUWhDZ0pBQWtBZ0JVVU5BRUhnekFBb0FnQWlCMFVOQUNBRktBSUFJQWhCQkJBaElnWkZEUUVnQnhBQkN4QUFJUVVnQmtFQlJ3UkFJQWxCNEFCcVFRRWdDRUVFRURVaENCQUFJUXBCQUNFRkN3TkFBa0FDUUFKQUFrQWdCUVJBUVF3UUJpRUhRZHpNQUVFQU5nSUFRU3dnQnlBSktBSkVFQVFhUWR6TUFDZ0NBQ0VGUWR6TUFFRUFOZ0lBUVg4aEJpQUZSUTBDUWVETUFDZ0NBQ0lMUlEwQ0lBVW9BZ0FnQ0NBS0VDRWlCZzBCSUFVZ0N4QUNBQXRCM013QVFRQTJBZ0FnQ1NBSlFlQUFhallDUEVIY3pBQW9BZ0FoQlVIY3pBQkJBRFlDQUVGL0lRWWdCVVVOQTBIZ3pBQW9BZ0FpQjBVTkF5QUZLQUlBSUFnZ0NoQWhJZ1lOQWd3RkN5QUxFQUVMRUFBaEJTQUdRUUZHRFFJZ0IwSElGMEV0RUFVQUN5QUhFQUVMRUFBaEJTQUdRUUZHRFFBZ0JGQkZCRUJCM013QVFRQTJBZ0FnQ1VFSWFpQUVFRU5CM013QUtBSUFJUVZCM013QVFRQTJBZ0JCZnlFR0FrQWdCVVVOQUVIZ3pBQW9BZ0FpQjBVTkFDQUZLQUlBSUFnZ0NoQWhJZ1pGRFFNZ0J4QUJDeEFBSVFVZ0JrRUJSZzBCQzBIY3pBQkJBRFlDQUNBQktBSUVJUXRCM013QUtBSUFJUVZCM013QVFRQTJBZ0JCZnlFR0FrQWdCVVVOQUVIZ3pBQW9BZ0FpQjBVTkFDQUZLQUlBSUFnZ0NoQWhJZ1pGRFFJZ0J4QUJDeEFBSVFVZ0JrRUJSZzBBSUFNb0FnUWhCVUhjekFCQkFEWUNBRUhEQUNBQUlBc2dBaUFGSUFsQkNHb1FGa0hjekFBb0FnQWhCVUhjekFCQkFEWUNBRUYvSVFZQ1FDQUZSUTBBUWVETUFDZ0NBQ0lIUlEwQUlBVW9BZ0FnQ0NBS0VDRWlCa1VOQWlBSEVBRUxFQUFoQlNBR1FRRkdEUUJCM013QVFRQTJBZ0JCT3lBSlFRaHFFQWhCM013QUtBSUFJUVZCM013QVFRQTJBZ0JCZnlFR0FrQWdCVVVOQUVIZ3pBQW9BZ0FpQjBVTkFDQUZLQUlBSUFnZ0NoQWhJZ1pGRFFJZ0J4QUJDeEFBSVFVZ0JrRUJSZzBBQ3lBSUVDWWdDVUdBQW1va0FBOExJQVVnQnhBQ0FBdjdDUUVKZnlNQVFZQUNheUlJSkFCQktCQXBJZ2RCQURZQ0FFSGN6QUJCQURZQ0FDQUlRUWhxRURwQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZRUVFoQ1FKQUFrQWdCRVVOQUVIZ3pBQW9BZ0FpQmtVTkFDQUVLQUlBSUFkQkJCQWhJZ1ZGRFFFZ0JoQUJDeEFBSVFRZ0JVRUJSd1JBSUFoQjRBQnFRUUVnQjBFRUVEVWhCeEFBSVFsQkFDRUVDd05BQWtBQ1FBSkFBa0FnQkFSQVFRd1FCaUVHUWR6TUFFRUFOZ0lBUVN3Z0JpQUlLQUpFRUFRYVFkek1BQ2dDQUNFRVFkek1BRUVBTmdJQVFYOGhCU0FFUlEwQ1FlRE1BQ2dDQUNJS1JRMENJQVFvQWdBZ0J5QUpFQ0VpQlEwQklBUWdDaEFDQUF0QjNNd0FRUUEyQWdBZ0NDQUlRZUFBYWpZQ1BFSGN6QUFvQWdBaEJFSGN6QUJCQURZQ0FFRi9JUVVnQkVVTkEwSGd6QUFvQWdBaUJrVU5BeUFFS0FJQUlBY2dDUkFoSWdVTkFnd0ZDeUFLRUFFTEVBQWhCQ0FGUVFGR0RRSWdCa0hJRjBFdEVBVUFDeUFHRUFFTEVBQWhCQ0FGUVFGR0RRQWdBMUJGQkVCQjNNd0FRUUEyQWdBZ0NFRUlhaUFERUVOQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZBa0FnQkVVTkFFSGd6QUFvQWdBaUJrVU5BQ0FFS0FJQUlBY2dDUkFoSWdWRkRRTWdCaEFCQ3hBQUlRUWdCVUVCUmcwQkMwSGN6QUJCQURZQ0FDQUJLQUlFSVFwQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZBa0FnQkVVTkFFSGd6QUFvQWdBaUJrVU5BQ0FFS0FJQUlBY2dDUkFoSWdWRkJFQU1Bd3NnQmhBQkN4QUFJUVFnQlVFQlJnMEFJQUlvQWdRaEMwSGN6QUJCQURZQ0FFRS9JQXNRQ0VIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUVGL0lRVUNRQ0FFUlEwQVFlRE1BQ2dDQUNJR1JRMEFJQVFvQWdBZ0J5QUpFQ0VpQlVVTkFpQUdFQUVMRUFBaEJDQUZRUUZHRFFCQjNNd0FRUUEyQWdCQndBQWdBRUVBU2tIMUpTQUlRUWhxRUFOQjNNd0FLQUlBSVFSQjNNd0FRUUEyQWdCQmZ5RUZBa0FnQkVVTkFFSGd6QUFvQWdBaUJrVU5BQ0FFS0FJQUlBY2dDUkFoSWdWRkRRSWdCaEFCQ3hBQUlRUWdCVUVCUmcwQUlBb29BZ0FoQkVIY3pBQkJBRFlDQUVIQUFDQUFJQVJNUVlZbUlBaEJDR29RQTBIY3pBQW9BZ0FoQkVIY3pBQkJBRFlDQUVGL0lRVUNRQ0FFUlEwQVFlRE1BQ2dDQUNJR1JRMEFJQVFvQWdBZ0J5QUpFQ0VpQlVVTkFpQUdFQUVMRUFBaEJDQUZRUUZHRFFCQjNNd0FRUUEyQWdCQndRQWdDaUFBSUFoQkNHb1FIU0VNUWR6TUFDZ0NBQ0VFUWR6TUFFRUFOZ0lBUVg4aEJRSkFJQVJGRFFCQjRNd0FLQUlBSWdaRkRRQWdCQ2dDQUNBSElBa1FJU0lGUlEwQ0lBWVFBUXNRQUNFRUlBVkJBVVlOQUVIY3pBQkJBRFlDQUVIQUFDQU1RWjhtSUFoQkNHb1FBMEhjekFBb0FnQWhCRUhjekFCQkFEWUNBRUYvSVFVQ1FDQUVSUTBBUWVETUFDZ0NBQ0lHUlEwQUlBUW9BZ0FnQnlBSkVDRWlCVVVOQWlBR0VBRUxFQUFoQkNBRlFRRkdEUUJCM013QVFRQTJBZ0JCd2dBZ0FDQUtSQUFBQUFBQUFBQUFJQXNnQ0VFSWFoQVdRZHpNQUNnQ0FDRUVRZHpNQUVFQU5nSUFRWDhoQlFKQUlBUkZEUUJCNE13QUtBSUFJZ1pGRFFBZ0JDZ0NBQ0FISUFrUUlTSUZSUTBDSUFZUUFRc1FBQ0VFSUFWQkFVWU5BRUhjekFCQkFEWUNBRUU3SUFoQkNHb1FDRUhjekFBb0FnQWhCRUhjekFCQkFEWUNBRUYvSVFVQ1FDQUVSUTBBUWVETUFDZ0NBQ0lHUlEwQUlBUW9BZ0FnQnlBSkVDRWlCVVVOQWlBR0VBRUxFQUFoQkNBRlFRRkdEUUFMSUFjUUppQUlRWUFDYWlRQUR3c2dCQ0FHRUFJQUMyVUJBWDhnQUJDTkFpQUFRWUFpTmdJQUlBQWdBQ2dDQkNJQk5nSUlJQUFnQVVFb2FqWUNKQ0FBSUFGQkpHbzJBaUFnQUNBQlFTQnFOZ0ljSUFBZ0FVRVlhallDR0NBQUlBRkJFR28yQWhRZ0FDQUJRUWhxTmdJUUlBQWdBVUVFYWpZQ0RDQUFDK3dIQVFkL0l3QkJnQUpySWdVa0FFRW9FQ2tpQkVFQU5nSUFJQUJCOENFMkFnQkIzTXdBUVFBMkFnQWdCVUVJYWhBNlFkek1BQ2dDQUNFQlFkek1BRUVBTmdJQVFYOGhBa0VFSVFZQ1FBSkFJQUZGRFFCQjRNd0FLQUlBSWdORkRRQWdBU2dDQUNBRVFRUVFJU0lDUlEwQklBTVFBUXNRQUNFQklBSkJBVWNFUUNBRlFlQUFha0VCSUFSQkJCQTFJUVFRQUNFR1FRQWhBUXNEUUFKQUFrQUNRQUpBQWtBQ1FDQUJCRUFnQUNnQ0JDSUNSUTBHUWR6TUFFRUFOZ0lBSXdCQkVHc2lBU0FDTmdJTUlBRWdBU2dDRERZQ0NDQUJJQUVvQWdnMkFneEIzTXdBS0FJQUlRRkIzTXdBUVFBMkFnQkJmeUVDSUFGRkRRSkI0TXdBS0FJQUlnTkZEUUlnQVNnQ0FDQUVJQVlRSVNJQ0RRRU1DQXRCM013QVFRQTJBZ0FnQlNBRlFlQUFhallDUEVIY3pBQW9BZ0FoQVVIY3pBQkJBRFlDQUVGL0lRSWdBVVVOQTBIZ3pBQW9BZ0FpQTBVTkF5QUJLQUlBSUFRZ0JoQWhJZ0lOQWd3SEN5QURFQUVMRUFBaEFTQUNRUUZIRFFJTUJBc2dBeEFCQ3hBQUlRRWdBa0VCUmcwQ0lBQkJBRFlDQkVIY3pBQkJBRFlDQUVFNVFUQWdCVUVJYWhBRUlRSkIzTXdBS0FJQUlRRkIzTXdBUVFBMkFnQkJmeUVEQWtBZ0FVVU5BRUhnekFBb0FnQWlCMFVOQUNBQktBSUFJQVFnQmhBaElnTkZCRUFnQVNBSEVBSUFDeUFIRUFFTEVBQWhBU0FEUVFGR0RRSWdBQ0FDTmdJRUlBSkNBRGNES0NBQ1FnQTNBeUFnQWtJQU53TVlJQUpDQURjREVDQUNRZ0EzQXdnZ0FrSUFOd01BSUFBb0FnUWhBa0hjekFCQkFEWUNBQ01BUVJCcklnRWdBallDRENBQklBRW9BZ3cyQWdnZ0FTQUJLQUlJTmdJTVFkek1BQ2dDQUNFQlFkek1BRUVBTmdJQVFYOGhBZ0pBSUFGRkRRQkI0TXdBS0FJQUlnTkZEUUFnQVNnQ0FDQUVJQVlRSVNJQ1JRMEVJQU1RQVFzUUFDRUJJQUpCQVVZTkFrSGN6QUJCQURZQ0FFRTdJQVZCQ0dvUUNFSGN6QUFvQWdBaEFVSGN6QUJCQURZQ0FFRi9JUUlDUUNBQlJRMEFRZURNQUNnQ0FDSURSUTBBSUFFb0FnQWdCQ0FHRUNFaUFrVU5CQ0FERUFFTEVBQWhBU0FDUVFGR0RRSWdCQkFtSUFWQmdBSnFKQUFQQ3lBQUtBSUVJUUZCM013QVFRQTJBZ0FnQVJCQlFkek1BQ2dDQUNFQlFkek1BRUVBTmdJQVFYOGhBZ0pBSUFGRkRRQkI0TXdBS0FJQUlnTkZEUUFnQVNnQ0FDQUVJQVlRSVNJQ1JRMERJQU1RQVFzUUFDRUJJQUpCQVVZTkFRc2dBRUVBTmdJRVFRd1FCaUVEUWR6TUFFRUFOZ0lBUVN3Z0F5QUZLQUpFRUFRYVFkek1BQ2dDQUNFQlFkek1BRUVBTmdJQVFYOGhBZ0pBSUFGRkRRQkI0TXdBS0FJQUlnZEZEUUFnQVNnQ0FDQUVJQVlRSVNJQ1JRUkFJQUVnQnhBQ0FBc2dCeEFCQ3hBQUlRRWdBa0VCUmcwQUN5QURRY2dYUVMwUUJRQUxJQUVnQXhBQ0FBdEhBUUYvSUFCQjRDRTJBZ0FnQUVINEFHb1FSQm9nQUVIRUFHb1FVUm9nQUVFWWFoQkVHaUFBUWRBaE5nSUFJQUFvQWdRaUFRUkFJQUVRUmlBQUtBSUVFRUVMSUFBUUpnczRBUUYvSUFBb0FrUWlBaUFBS0FKSVJ3UkFJQUlnQVNnQ0FDSUJOZ0lBSUFFUURTQUFJQUpCQkdvMkFrUVBDeUFBUVVCcklBRVFTZ3QwQVFGL0lBQVFsZ0lnQUVIZ0lUWUNBQ0FBSUFBb0FnUWlBVUdZQW1vMkFoUWdBQ0FCUWVvQ2FqWUNFQ0FBSUFGQjZBSnFOZ0lNSUFBZ0FVSHBBbW8yQWdnZ0FFRVlhaUFCUWFBQ2FoQmtJQUJCeEFCcUlBQW9BZ1JCd0FKcUVJd0JJQUJCK0FCcUlBQW9BZ1JCK0FGcUVHUWdBQXNsQVFGL0lBQkIwQ0UyQWdBZ0FDZ0NCQ0lCQkVBZ0FSQkdJQUFvQWdRUVFRc2dBQkFtQ3lNQkFYOGdBRUhRSVRZQ0FDQUFLQUlFSWdFRVFDQUJFRVlnQUNnQ0JCQkJDeUFBQzRjQ0FRRi9Jd0JCRUdzaUF5QUFOZ0lNSUFNZ0F5Z0NERFlDQ0NBRElBTW9BZ2cyQWd3Z0FFRVFha0VESUFFZ0FoQWtJQUJCTUdwQkF5QUJJQUlRSkNBQVFkQUFha0VESUFFZ0FoQWtJQUJCOEFCcVFRTWdBU0FDRUNRZ0FFR1FBV3BCQXlBQklBSVFKQ0FBUWJBQmFpQUJJQUlRTGlBQVFkZ0JhaUFCSUFJUUxpQUFRWUFDYWlBQklBSVFMaUFBUWFnQ2FrRURJQUVnQWhBa0lBQkJ5QUpxUVFNZ0FTQUNFQ1FnQUVIb0FtcEJBaUFCSUFJUUpDQUFRWWdEYWtFRElBRWdBaEFrSUFCQnFBTnFRUU1nQVNBQ0VDUWdBRUhJQTJwQkF5QUJJQUlRSkNBQVFlZ0RhaUFCSUFJUUxpQUFRWkFFYWtFQklBRWdBaEFrSUFCQnNBUnFJQUVnQWhDWUFndXJBUUVCZnlNQVFSQnJJZ0VnQURZQ0RDQUJJQUVvQWd3MkFnZ2dBU0FCS0FJSU5nSU1JQUJCRUdvUUl5QUFRVEJxRUNNZ0FFSFFBR29RSXlBQVFmQUFhaEFqSUFCQmtBRnFFQ01nQUVHd0FXb1FNaUFBUWRnQmFoQXlJQUJCZ0FKcUVESWdBRUdvQW1vUUl5QUFRY2dDYWhBaklBQkI2QUpxRUNNZ0FFR0lBMm9RSXlBQVFhZ0RhaEFqSUFCQnlBTnFFQ01nQUVIb0Eyb1FNaUFBUVpBRWFoQWpJQUJCc0FScUVKb0NDN2tFQVFGL0l3QkJFR3NpQXlBQU5nSU1JQU1nQXlnQ0REWUNDQ0FESUFNb0FnZzJBZ3dnQUVFZ2FrRURJQUVnQWhBa0lBQkJRR3RCQXlBQklBSVFKQ0FBUWVBQWFrRURJQUVnQWhBa0lBQkJnQUZxUVFFZ0FTQUNFQ1FnQUVHZ0FXcEJBU0FCSUFJUUpDQUFRY2dCYWlBQklBSVFMaUFBUWZnQmFrRURJQUVnQWhBa0lBQkJvQUpxUVFNZ0FTQUNFQ1FnQUVIQUFtb2dBU0FDRUM0Z0FFSHNBbW9nQVNBQ0VHY2dBRUh3QTJvZ0FTQUNFR2NqQUVFUWF5SURJQUJCOUFScU5nSU1JQU1nQXlnQ0REWUNDQ0FESUFNb0FnZzJBZ3dnQUVHQUJtcEJBeUFCSUFJUUpDQUFRYUFHYWtFRElBRWdBaEFrSUFCQndBWnFRUU1nQVNBQ0VDUWdBRUhnQm1wQkF5QUJJQUlRSkNBQVFZQUhha0VESUFFZ0FoQWtJQUJCb0FkcVFRTWdBU0FDRUNRZ0FFSEFCMnBCQXlBQklBSVFKQ0FBUWVBSGFrRURJQUVnQWhBa0lBQkJnQWhxUVFNZ0FTQUNFQ1FnQUVHa0NHcEJBeUFCSUFJUUpDQUFRY1FJYWtFRElBRWdBaEFrSUFCQjVBaHFJQUVnQWhBdUlBQkJqQWxxUVFNZ0FTQUNFQ1FnQUVHc0NXb2dBU0FDRUM0Z0FFSFVDV29nQVNBQ0VDNGdBRUg4Q1dvZ0FTQUNFQzRnQUVHa0NtcEJBeUFCSUFJUUpDQUFRY1FLYWtFRElBRWdBaEFrSUFCQjZBcHFJQUVnQWhDVEFpQUFRZGdWYWtFRElBRWdBaEFrSUFCQitCVnFRUU1nQVNBQ0VDUWdBRUdZRm1vZ0FTQUNFQzRnQUVIQUZtcEJBaUFCSUFJUUpDQUFRZUFXYWtFRElBRWdBaEFrSUFCQmdCZHFRUU1nQVNBQ0VDUWdBRUdnRjJwQkF5QUJJQUlRSkF1Z0J3RUhmeU1BUVlBQ2F5SUZKQUJCS0JBcElnUkJBRFlDQUNBQVFkQWhOZ0lBUWR6TUFFRUFOZ0lBSUFWQkNHb1FPa0hjekFBb0FnQWhBVUhjekFCQkFEWUNBRUYvSVFKQkJDRUdBa0FDUUNBQlJRMEFRZURNQUNnQ0FDSURSUTBBSUFFb0FnQWdCRUVFRUNFaUFrVU5BU0FERUFFTEVBQWhBU0FDUVFGSEJFQWdCVUhnQUdwQkFTQUVRUVFRTlNFRUVBQWhCa0VBSVFFTEEwQUNRQUpBQWtBQ1FBSkFBa0FnQVFSQUlBQW9BZ1FpQVVVTkJrSGN6QUJCQURZQ0FFRTNJQUVRQ0VIY3pBQW9BZ0FoQVVIY3pBQkJBRFlDQUVGL0lRSWdBVVVOQWtIZ3pBQW9BZ0FpQTBVTkFpQUJLQUlBSUFRZ0JoQWhJZ0lOQVF3SUMwSGN6QUJCQURZQ0FDQUZJQVZCNEFCcU5nSThRZHpNQUNnQ0FDRUJRZHpNQUVFQU5nSUFRWDhoQWlBQlJRMERRZURNQUNnQ0FDSURSUTBESUFFb0FnQWdCQ0FHRUNFaUFnMENEQWNMSUFNUUFRc1FBQ0VCSUFKQkFVY05BZ3dFQ3lBREVBRUxFQUFoQVNBQ1FRRkdEUUlnQUVFQU5nSUVRZHpNQUVFQU5nSUFRVGxCOEJjZ0JVRUlhaEFFSVFOQjNNd0FLQUlBSVFGQjNNd0FRUUEyQWdCQmZ5RUNBa0FnQVVVTkFFSGd6QUFvQWdBaUIwVU5BQ0FCS0FJQUlBUWdCaEFoSWdKRkJFQWdBU0FIRUFJQUN5QUhFQUVMRUFBaEFTQUNRUUZHRFFJZ0FDQUROZ0lFSUFOQkFFSHdGeEF6R2lBQUtBSUVJUUZCM013QVFRQTJBZ0JCT2lBQklBVkJDR3BCQUJBRFFkek1BQ2dDQUNFQlFkek1BRUVBTmdJQVFYOGhBZ0pBSUFGRkRRQkI0TXdBS0FJQUlnTkZEUUFnQVNnQ0FDQUVJQVlRSVNJQ1JRMEVJQU1RQVFzUUFDRUJJQUpCQVVZTkFrSGN6QUJCQURZQ0FFRTdJQVZCQ0dvUUNFSGN6QUFvQWdBaEFVSGN6QUJCQURZQ0FFRi9JUUlDUUNBQlJRMEFRZURNQUNnQ0FDSURSUTBBSUFFb0FnQWdCQ0FHRUNFaUFrVU5CQ0FERUFFTEVBQWhBU0FDUVFGR0RRSWdCQkFtSUFWQmdBSnFKQUFQQ3lBQUtBSUVJUUZCM013QVFRQTJBZ0FnQVJCQlFkek1BQ2dDQUNFQlFkek1BRUVBTmdJQVFYOGhBZ0pBSUFGRkRRQkI0TXdBS0FJQUlnTkZEUUFnQVNnQ0FDQUVJQVlRSVNJQ1JRMERJQU1RQVFzUUFDRUJJQUpCQVVZTkFRc2dBRUVBTmdJRVFRd1FCaUVEUWR6TUFFRUFOZ0lBUVN3Z0F5QUZLQUpFRUFRYVFkek1BQ2dDQUNFQlFkek1BRUVBTmdJQVFYOGhBZ0pBSUFGRkRRQkI0TXdBS0FJQUlnZEZEUUFnQVNnQ0FDQUVJQVlRSVNJQ1JRUkFJQUVnQnhBQ0FBc2dCeEFCQ3hBQUlRRWdBa0VCUmcwQUN5QURRY2dYUVMwUUJRQUxJQUVnQXhBQ0FBdklBZ0lEZndKOEFrQWdCVUVCU0EwQUEwQUNRQ0FDS0FJY0lBZHFMUUFBUlEwQUlBUW9BaHdnQjJvdEFBQUVRQ0FIUVFOMElnWWdBU2dDSEdvckF3QWhDU0FES0FJY0lBWnFLd01BSVFvakFFRVFheUlHSUFrNUF3Z2dCaUFLT1FNQUlBWXJBd2dnQmlzREFHUU5BeUFDS0FJY0lBZHFMUUFBUlEwQkN5QUhRUU4wSWdZZ0FDZ0NIR29yQXdBaENTQUJLQUljSUFacUt3TUFJUW9qQUVFUWF5SUlJQWs1QXdnZ0NDQUtPUU1BSUFnckF3Z2dDQ3NEQUdORkRRQWdBQ2dDSENBR2FpQUJLQUljSUFacUt3TUFPUU1BQ3dKQUlBUW9BaHdnQjJvdEFBQkZEUUFnQjBFRGRDSUdJQUFvQWh4cUt3TUFJUWtnQXlnQ0hDQUdhaXNEQUNFS0l3QkJFR3NpQ0NBSk9RTUlJQWdnQ2prREFDQUlLd01JSUFnckF3QmtSUTBBSUFBb0Fod2dCbW9nQXlnQ0hDQUdhaXNEQURrREFBc2dCMEVCYWlJSElBVkhEUUFMQ3d2cUFnRUJmeU1BUVJCcklnTWdBRFlDRENBRElBTW9BZ3cyQWdnZ0F5QURLQUlJTmdJTUlBQkJER29nQVNBQ0VDNGdBRUUwYWtFRElBRWdBaEFrSUFCQjFBQnFRUUVnQVNBQ0VDUWdBRUdFQVdwQkF5QUJJQUlRSkNBQVFhUUJha0VESUFFZ0FoQWtJQUJCeEFGcUlBRWdBaEF1SUFCQjdBRnFJQUVnQWhBdUlBQkJsQUpxSUFFZ0FoQXVJQUJCdkFKcVFRTWdBU0FDRUNRZ0FFSGNBbXBCQXlBQklBSVFKQ0FBUWZ3Q2FrRURJQUVnQWhBa0lBQkJuQU5xUVFNZ0FTQUNFQ1FnQUVHOEEycEJBeUFCSUFJUUpDQUFRZHdEYWtFRElBRWdBaEFrSUFCQi9BTnFRUU1nQVNBQ0VDUWdBRUdjQkdwQkF5QUJJQUlRSkNBQVFid0Vha0VESUFFZ0FoQWtJQUJCM0FScVFRTWdBU0FDRUNRZ0FFSDhCR3BCQXlBQklBSVFKQ0FBUVp3RmFrRURJQUVnQWhBa0lBQkJ2QVZxUVFNZ0FTQUNFQ1FnQUVIY0JXcEJBeUFCSUFJUUpDQUFRZndGYWtFRElBRWdBaEFrSUFCQm5BWnFRUUlnQVNBQ0VDUUxPQUVCZnlBQUtBSTRJZ0lnQUNnQ1BFY0VRQ0FDSUFFb0FnQWlBVFlDQUNBQkVBMGdBQ0FDUVFScU5nSTREd3NnQUVFMGFpQUJFRW9MNGdFQkFYOGpBRUVRYXlJQklBQTJBZ3dnQVNBQktBSU1OZ0lJSUFFZ0FTZ0NDRFlDRENBQVFReHFFRElnQUVFMGFoQWpJQUJCMUFCcUVDTWdBRUdFQVdvUUl5QUFRYVFCYWhBaklBQkJ4QUZxRURJZ0FFSHNBV29RTWlBQVFaUUNhaEF5SUFCQnZBSnFFQ01nQUVIY0Ftb1FJeUFBUWZ3Q2FoQWpJQUJCbkFOcUVDTWdBRUc4QTJvUUl5QUFRZHdEYWhBaklBQkIvQU5xRUNNZ0FFR2NCR29RSXlBQVFid0VhaEFqSUFCQjNBUnFFQ01nQUVIOEJHb1FJeUFBUVp3RmFoQWpJQUJCdkFWcUVDTWdBRUhjQldvUUl5QUFRZndGYWhBaklBQkJuQVpxRUNNTC9nWUNDWDhCZkNNQVFTQnJJZ1lrQUNBQlFRQktRZjRmSUFRUUlpQUFLQUlBSUFGT1FhSWdJQVFRSWlBQUtBSUVJQUZPUWNzZ0lBUVFJaUFDS0FJQUlBRk9RZlFnSUFRUUlpQUdRUUEyQWh3Q1FDQUJRUUZJRFFBRFFDQUNLQUljSUFWcUxRQUFCRUFnQmlBR0tBSWNRUUZxTmdJY0N5QUZRUUZxSWdVZ0FVY05BQXNnQmlnQ0hDSUZSUTBBSUFFZ0JVWUVRQ0FCUVFGSURRRkJBQ0VFQTBBZ0JFRUNkQ0lDSUFBb0FpUnFLQUlBSUFSQkEzUnFRb0NBZ0lDQWdJRDRQemNEQUNBRVFRRnFJZ1FoQlNBQklBUktCRUFEUUNBQUtBSWtJQUpxS0FJQUlBVkJBM1JxUWdBM0F3QWdCVUVCYWlJRklBRkhEUUFMQ3lBQklBUkhEUUFMREFFTElBTWdBU0FFRUNVZ0FVRUJTQTBBSUFGQkFXc2lDVUVEZENFTElBbEJBblFoREFOQUFrQWdBaWdDSENBSGFpMEFBRVVOQUNBSElBbEdCRUJCQUNFRklBa0VRQU5BSUFBb0FpUWdCVUVDZEdvb0FnQWdDMnBDQURjREFDQUZRUUZxSWdVZ0NVY05BQXNMSUFBb0FpUWdER29vQWdBZ0MycENnSUNBZ0lDQWdQZy9Od01BREFFTElBZEJBV29pQkNFRklBRWdCRW9pQ0FSQUEwQWdCVUVEZENJS0lBTW9BaHhxSUFBb0FpUWdCMEVDZEdvb0FnQWdDbW9yQXdBNUF3QWdCVUVCYWlJRklBRkhEUUFMQzBFQUlRVWdCd1JBQTBBZ0FDZ0NKQ0FGUVFKMGFpZ0NBQ0FIUVFOMGFrSUFOd01BSUFWQkFXb2lCU0FIUncwQUN3c2dCMEVDZENJS0lBQW9BaVJxS0FJQUlBZEJBM1JxUW9DQWdJQ0FnSUQ0UHpjREFDQUVJUVVnQ0VVTkFBTkFJQUFvQWlRZ0Ntb29BZ0FnQlVFRGRHcENBRGNEQUNBRlFRRnFJZ1VnQVVjTkFBc2dDRVVOQUFOQUl3QkJFR3NpQ0NBRVFRTjBJZ1VnQXlnQ0hHb3JBd0E1QXdnZ0NFUUFBQUFBQUFBQUFEa0RBQUpBSUFnckF3Z2dDQ3NEQUdFTkFDQUVRUUowSWdnZ0FDZ0NKR29vQWdBZ0JXb3JBd0FnQXlnQ0hDQUZhaXNEQUNBR1FSQnFJQVpCQ0dvZ0JoQk5JQUFvQWlRZ0NHb29BZ0FnQldvZ0Jpc0RBRGtEQUNBREtBSWNJQVZxUWdBM0F3QWdCQ0lGSUFsT0RRQURRQ0FHSUFWQkFXb2lCVUVEZENJS0lBQW9BaVFnQ0dvb0FnQnFJZzByQXdBaURqa0RBQ0FOSUE0Z0Jpc0RFS0lnQXlnQ0hDQUthaXNEQUNJT0lBWXJBd2lpb0RrREFDQURLQUljSUFwcUlBNGdCaXNERUtJZ0Jpc0RDQ0FHS3dNQW9xRTVBd0FnQlNBSlNBMEFDd3NnQkVFQmFpSUVJQUZIRFFBTEN5QUhRUUZxSWdjZ0FVY05BQXNMSUFaQklHb2tBQXVkQlFJRGZ3VjhJQUpDQURjREFBSkFJQUZCQWs0RVFFRUJJUU1EUUNBQklBTkhJUVFnQUNnQ0hDQURRUU4wYWlzREFKa2lDQ0FHSUFZZ0NHTWJJUVlnQTBFQmFpRURJQVFOQUFzQ1FBSi9Jd0JCRUdzaUF5QUdPUU1JSUFORUFBQUFBQUFBQUFBNUF3QWdBeXNEQ0NBREt3TUFZUXNFUUVRQUFBQUFBQUR3UHlFSkRBRUxSTWlLaGpHb0NOTUVJUWtDZnlNQVFSQnJJZ01nQmprRENDQURSTWlLaGpHb0NOTUVPUU1BSUFNckF3Z2dBeXNEQUdVTEJFQWdBQ2dDSEVFSWFrRUJJQUZFWDFuM0lVWG1DbnNRTkNBR1JGOVo5eUZGNWdwN29pRUdEQUVMUkY5Wjl5RkY1Z3A3SVFrQ2Z5TUFRUkJySWdNZ0Jqa0RDQ0FEUkY5Wjl5RkY1Z3A3T1FNQUlBTXJBd2dnQXlzREFHWkZDd1JBUkFBQUFBQUFBUEEvSVFrTUFRc2dBQ2dDSEVFSWFrRUJJQUZFeUlxR01hZ0kwd1FRTkNBR1JNaUtoakdvQ05NRW9pRUdDeUFBS0FJY0t3TUlJUWdDZndKL0l3QkJFR3NpQXlBR09RTUlJQU5FQUFBQUFBQUFBQUE1QXdBZ0F5c0RDQ0FES3dNQVlnc0VRRUVDSVFNRFFDQUhJQUFvQWh3Z0EwRURkR29yQXdBZ0JxTWlCeUFIb3FBaEJ5QUJJQU5ISVFVZ0EwRUJhaUVESUFVTkFBc2dCaUFIbjZJaEJ3c2pBRUVRYXlJRUlBYzVBd2dnQkVRQUFBQUFBQUFBQURrREFDQUVLd01JSUFRckF3QmhDd1JBSUFKQ0FEY0RBQXdDQ3lBQ0lBZ2dDSmtpQmlBSG1TSUtJQVlnQ21RYklnYWpJZ29nQ3FJZ0J5QUdveUlISUFlaW9KOGdCcHFpSWdhYUlBWUNmeU1BUVJCcklnSWdDRGtEQ0NBQ1JBQUFBQUFBQUFBQU9RTUFJQUlyQXdnZ0Fpc0RBR01MR3lJR0lBaWhJQWFqT1FNQUlBQW9BaHhCRUdwQkFTQUJRUUZyUkFBQUFBQUFBUEEvSUFnZ0JxR2pFRFFnQUNnQ0hDQUdPUU1JREFFTElBSkNBRGNEQUE4TElBQW9BaHdpQUNBSklBQXJBd2lpT1FNSUN6Z0JBWDhnQUNnQ0xDSUNJQUFvQWpCSEJFQWdBaUFCS0FJQUlnRTJBZ0FnQVJBTklBQWdBa0VFYWpZQ0xBOExJQUJCS0dvZ0FSQktDNUFEQWdOL0FYd0NRQ0FBUVFGSURRQUNRQ0FCUVFGT0JFQWpBRUVRYXlJSFJBQUFBQUFBQVBBL09RTUlJQWRFQUFBQUFBQUFBQUE1QXdBZ0J5c0RDQ0FIS3dNQVlnMEJDMEVBSVFFQ2Z5TUFRUkJySWdKRUFBQUFBQUFBQUFBNUF3Z2dBa1FBQUFBQUFBQUFBRGtEQUNBQ0t3TUlJQUlyQXdCaUN3UkFBMEFnQmlnQ0hDQUJRUU4wYWlJQ0lBSXJBd0JFQUFBQUFBQUFBQUNpT1FNQUlBRkJBV29pQVNBQVJ3MEFEQU1MQUFzRFFDQUdLQUljSUFGQkEzUnFRZ0EzQXdBZ0FVRUJhaUlCSUFCSERRQUxEQUVMQWtBZ0FFRUpTQTBBSUFGQkNVZ05BQXNnQVNBRWFrRUJheUVJUVFBaEFRTkFJQUlvQWlRZ0FTQURha0VDZEdvb0FnQWdCRUVEZEdwQkFTQUZLQUljUVFocVFRRWdDQ0FFYTBFQmFoQXNSQUFBQUFBQUFQQS9vaUVLSXdCQkVHc2lCMFFBQUFBQUFBQUFBRGtEQ0NBSFJBQUFBQUFBQUFBQU9RTUFJQWNyQXdnZ0J5c0RBR0VoQnlBR0tBSWNJQUZCQTNScUlna2dCd1I4SUFvRklBb2dDU3NEQUVRQUFBQUFBQUFBQUtLZ0N6a0RBQ0FCUVFGcUlnRWdBRWNOQUFzTEM1SUJBUUYvQWtBZ0FFRUJTQTBBSUFGQkFVZ05BQUpBSUFCQkNVZ05BQ0FCUVFsSURRQUxJQUFnQVNBQ0lBTWdCQ0FGSUFZZ0J4Q29BZzBBSUFFZ0JHcEJBV3NoQ0VFQUlRRURRQ0FDS0FJa0lBRWdBMnBCQW5ScUtBSUFJQVJCQTNScUlBY29BaHhCQ0dvZ0NDQUVhMEVCYWlBR0tBSWNJQUZCQTNScUt3TUFJQVdpRUVBZ0FVRUJhaUlCSUFCSERRQUxDd3RBQVFGL0l3QkJFR3NpQVNBQU5nSU1JQUVnQVNnQ0REWUNDQ0FCSUFFb0FnZzJBZ3dnQUVHWXBLbUxCallDQ0NBQVFlV0JCallDQkNBQVFjUTROZ0lBQy9RU0FocC9GM3dDZnlNQVFSQnJJZzhnQXprRENDQVBSQUFBQUFBQUFBQUFPUU1BSUE4ckF3Z2dEeXNEQUdJTFFaWWRJQTRRSWdKQUlBQkJBVWdOQUNBQlJRMEFJQU5FQUFBQUFBQUFBQUNpSVQ4Z0FVRUJheUVhSUFCQkFXc2hHeUFDSUFWcVFRRnJJU0VnQVVFQlNDRWlBMEFnRkVFRWFpRWNJQ0pGQkVBZ0ZFRURjaUVkSUF3Z0ZHb2lGa0VEYWlFZUlCWkJBbW9oSHlBV1FRRnFJU0FnQmlBVWFpSVlRUU5xSVNNZ0dFRUNhaUVrSUJoQkFXb2hKVUVBSVJjRFFDQVhJZzlCQkdvaEZ3SkFBa0FnQUNBY1NBMEFJQUVnRjBnTkFBSkFJQUpCQVVnRVFFUUFBQUFBQUFBQUFDRXBSQUFBQUFBQUFBQUFJU3hFQUFBQUFBQUFBQUFoTFVRQUFBQUFBQUFBQUNFdVJBQUFBQUFBQUFBQUlTOUVBQUFBQUFBQUFBQWhNRVFBQUFBQUFBQUFBQ0V4UkFBQUFBQUFBQUFBSVRKRUFBQUFBQUFBQUFBaE0wUUFBQUFBQUFBQUFDRTBSQUFBQUFBQUFBQUFJVFZFQUFBQUFBQUFBQUFoTmtRQUFBQUFBQUFBQUNFM1JBQUFBQUFBQUFBQUlUaEVBQUFBQUFBQUFBQWhPVVFBQUFBQUFBQUFBQ0U2REFFTElBY29BaVFnQ0NBUGFrRUNkR29pRGlnQ0FDRVpJQTRvQWd3aEZTQU9LQUlJSVNZZ0RpZ0NCQ0VuSUFRb0FpUWhLRVFBQUFBQUFBQUFBQ0U2UVFBaEVDQUpJUTRnQlNFUlJBQUFBQUFBQUFBQUlUbEVBQUFBQUFBQUFBQWhPRVFBQUFBQUFBQUFBQ0UzUkFBQUFBQUFBQUFBSVRaRUFBQUFBQUFBQUFBaE5VUUFBQUFBQUFBQUFDRTBSQUFBQUFBQUFBQUFJVE5FQUFBQUFBQUFBQUFoTWtRQUFBQUFBQUFBQUNFeFJBQUFBQUFBQUFBQUlUQkVBQUFBQUFBQUFBQWhMMFFBQUFBQUFBQUFBQ0V1UkFBQUFBQUFBQUFBSVMxRUFBQUFBQUFBQUFBaExFUUFBQUFBQUFBQUFDRXBBMEFnTXlBb0lCRkJBblJxS0FJQUloSWdKVUVEZEdvckF3QWlPeUFWSUE1QkEzUWlFMm9yQXdBaUtxS2dJVE1nTkNBN0lCTWdKbW9yQXdBaUs2S2dJVFFnTnlBU0lCaEJBM1JxS3dNQUlqd2dLcUtnSVRjZ09DQThJQ3Vpb0NFNElDa2dFaUFqUVFOMGFpc0RBQ0k5SUNxaW9DRXBJQ3dnUFNBcm9xQWhMQ0F2SUJJZ0pFRURkR29yQXdBaVBpQXFvcUFoTHlBd0lENGdLNktnSVRBZ0xTQVRJQ2RxS3dNQUlpb2dQYUtnSVMwZ0xpQVRJQmxxS3dNQUlpc2dQYUtnSVM0Z01TQXFJRDZpb0NFeElESWdLeUErb3FBaE1pQTFJRHNnS3FLZ0lUVWdOaUE3SUN1aW9DRTJJRGtnUENBcW9xQWhPU0E2SUR3Z0s2S2dJVG9nRGtFQmFpRU9JQkZCQVdvaEVTQVFRUUZxSWhBZ0FrY05BQXNMQW44akFFRVFheUlPSUFvNUF3Z2dEa1FBQUFBQUFBQUFBRGtEQUNBT0t3TUlJQTRyQXdCaEN3UkFJQTBnRDJwQkEzUWlEaUFXUVFKMElnOGdDeWdDSkdvb0FnQnFJRG9nQTZJNUF3QWdEa0VJYWlJUklBc29BaVFnRDJvb0FnQnFJRGtnQTZJNUF3QWdEa0VRYWlJU0lBc29BaVFnRDJvb0FnQnFJRGdnQTZJNUF3QWdEa0VZYWlJVElBc29BaVFnRDJvb0FnQnFJRGNnQTZJNUF3QWdJRUVDZENJUElBc29BaVJxS0FJQUlBNXFJRFlnQTZJNUF3QWdDeWdDSkNBUGFpZ0NBQ0FSYWlBMUlBT2lPUU1BSUFzb0FpUWdEMm9vQWdBZ0Vtb2dOQ0FEb2prREFDQUxLQUlrSUE5cUtBSUFJQk5xSURNZ0E2STVBd0FnSDBFQ2RDSVBJQXNvQWlScUtBSUFJQTVxSURJZ0E2STVBd0FnQ3lnQ0pDQVBhaWdDQUNBUmFpQXhJQU9pT1FNQUlBc29BaVFnRDJvb0FnQWdFbW9nTUNBRG9qa0RBQ0FMS0FJa0lBOXFLQUlBSUJOcUlDOGdBNkk1QXdBZ0RpQWVRUUowSWc4Z0N5Z0NKR29vQWdCcUlDNGdBNkk1QXdBZ0N5Z0NKQ0FQYWlnQ0FDQVJhaUF0SUFPaU9RTUFJQXNvQWlRZ0Qyb29BZ0FnRW1vZ0xDQURvamtEQUNBTEtBSWtJQTlxS0FJQUlCTnFJQ2tnQTZJNUF3QU1BZ3NnRFNBUGFrRURkQ0lPSUJaQkFuUWlEeUFMS0FJa2FpZ0NBR29pRVNBNklBT2lJQkVyQXdBZ0NxS2dPUU1BSUE1QkNHb2lFU0FMS0FJa0lBOXFLQUlBYWlJU0lEa2dBNklnRWlzREFDQUtvcUE1QXdBZ0RrRVFhaUlTSUFzb0FpUWdEMm9vQWdCcUloTWdPQ0FEb2lBVEt3TUFJQXFpb0RrREFDQU9RUmhxSWhNZ0N5Z0NKQ0FQYWlnQ0FHb2lEeUEzSUFPaUlBOHJBd0FnQ3FLZ09RTUFJQ0JCQW5RaUR5QUxLQUlrYWlnQ0FDQU9haUlRSURZZ0E2SWdFQ3NEQUNBS29xQTVBd0FnQ3lnQ0pDQVBhaWdDQUNBUmFpSVFJRFVnQTZJZ0VDc0RBQ0FLb3FBNUF3QWdDeWdDSkNBUGFpZ0NBQ0FTYWlJUUlEUWdBNklnRUNzREFDQUtvcUE1QXdBZ0N5Z0NKQ0FQYWlnQ0FDQVRhaUlQSURNZ0E2SWdEeXNEQUNBS29xQTVBd0FnSDBFQ2RDSVBJQXNvQWlScUtBSUFJQTVxSWhBZ01pQURvaUFRS3dNQUlBcWlvRGtEQUNBTEtBSWtJQTlxS0FJQUlCRnFJaEFnTVNBRG9pQVFLd01BSUFxaW9Ea0RBQ0FMS0FJa0lBOXFLQUlBSUJKcUloQWdNQ0FEb2lBUUt3TUFJQXFpb0RrREFDQUxLQUlrSUE5cUtBSUFJQk5xSWc4Z0x5QURvaUFQS3dNQUlBcWlvRGtEQUNBT0lCNUJBblFpRHlBTEtBSWthaWdDQUdvaURpQXVJQU9pSUE0ckF3QWdDcUtnT1FNQUlBc29BaVFnRDJvb0FnQWdFV29pRGlBdElBT2lJQTRyQXdBZ0NxS2dPUU1BSUFzb0FpUWdEMm9vQWdBZ0Vtb2lEaUFzSUFPaUlBNHJBd0FnQ3FLZ09RTUFJQXNvQWlRZ0Qyb29BZ0FnRTJvaURpQXBJQU9pSUE0ckF3QWdDcUtnT1FNQURBRUxJQm9nRDBFRGNpSU9JQTRnR2tvYklSSWdHeUFkSUJzZ0hVZ2JJaGtnRkVnTkFDQVVJUTREUUNBT0lSRUNRQ0FQSUJKS0RRQWdEQ0FSYWlFVElBOGhEaUFDQkVBZ0JpQVJhaUVWQTBCRUFBQUFBQUFBQUFBaEtRSi9Jd0JCRUdzaUVDQURPUU1JSUJCRUFBQUFBQUFBQUFBNUF3QWdFQ3NEQ0NBUUt3TUFZZ3NFUUNBRUtBSWtJQVZCQW5ScUtBSUFJQlZCQTNScUlBUW9BZ2dnQnlnQ0pDQUlJQTVxUVFKMGFpZ0NBQ0FKUVFOMGFrRUJJQ0VnQld0QkFXb1FMQ0VwQ3dKQUFuOGpBRUVRYXlJUUlBbzVBd2dnRUVRQUFBQUFBQUFBQURrREFDQVFLd01JSUJBckF3QmhDd1JBSUFzb0FpUWdFMEVDZEdvb0FnQWdEU0FPYWtFRGRHb2dLU0FEb2prREFBd0JDeUFMS0FJa0lCTkJBblJxS0FJQUlBMGdEbXBCQTNScUloQWdLU0FEb2lBUUt3TUFJQXFpb0RrREFBc2dEaUFTUnlFUUlBNUJBV29oRGlBUURRQUxEQUVMQTBBakFFRVFheUlRSUFvNUF3Z2dFRVFBQUFBQUFBQUFBRGtEQUNBUUt3TUlJQkFyQXdCaElSQWdDeWdDSkNBVFFRSjBhaWdDQUNBTklBNXFRUU4wYWlJVklCQUVmQ0EvQlNBL0lCVXJBd0FnQ3FLZ0N6a0RBQ0FPSUJKR0lSQWdEa0VCYWlFT0lCQkZEUUFMQ3lBUlFRRnFJUTRnRVNBWlJ3MEFDd3NnQVNBWFNnMEFDd3NnSENJVUlBQklEUUFMQ3d1QUV3SWJmeGQ4QW44akFFRVFheUlQSUFNNUF3Z2dEMFFBQUFBQUFBQUFBRGtEQUNBUEt3TUlJQThyQXdCaUMwR1dIU0FPRUNJQ1FDQUFRUUZJRFFBZ0FVVU5BQ0FEUkFBQUFBQUFBQUFBb2lGQUlBRkJBV3NoR2lBQVFRRnJJUnNnQWlBRmFrRUJheUVoSUFGQkFVZ2hJZ05BSUJSQkJHb2hIQ0FpUlFSQUlCUkJBM0loSFNBTUlCUnFJaFpCQTJvaEhpQVdRUUpxSVI4Z0ZrRUJhaUVnSUFZZ0ZHb2lHVUVEYWlFaklCbEJBbW9oSkNBWlFRRnFJU1ZCQUNFWEEwQWdGeUlQUVFScUlSY0NRQUpBSUFBZ0hFZ05BQ0FCSUJkSURRQUNRQ0FDUVFGSUJFQkVBQUFBQUFBQUFBQWhLa1FBQUFBQUFBQUFBQ0V0UkFBQUFBQUFBQUFBSVM1RUFBQUFBQUFBQUFBaEwwUUFBQUFBQUFBQUFDRXdSQUFBQUFBQUFBQUFJVEZFQUFBQUFBQUFBQUFoTWtRQUFBQUFBQUFBQUNFelJBQUFBQUFBQUFBQUlUUkVBQUFBQUFBQUFBQWhOVVFBQUFBQUFBQUFBQ0UyUkFBQUFBQUFBQUFBSVRkRUFBQUFBQUFBQUFBaE9FUUFBQUFBQUFBQUFDRTVSQUFBQUFBQUFBQUFJVHBFQUFBQUFBQUFBQUFoT3d3QkN5QUpJQTlxSWhKQkEyb2hGU0FTUVFKcUlTWWdFa0VCYWlFbklBY29BaVFoS0NBRUtBSWtJU2xFQUFBQUFBQUFBQUFoTzBFQUlSZ2dDQ0VPSUFVaEVVUUFBQUFBQUFBQUFDRTZSQUFBQUFBQUFBQUFJVGxFQUFBQUFBQUFBQUFoT0VRQUFBQUFBQUFBQUNFM1JBQUFBQUFBQUFBQUlUWkVBQUFBQUFBQUFBQWhOVVFBQUFBQUFBQUFBQ0UwUkFBQUFBQUFBQUFBSVRORUFBQUFBQUFBQUFBaE1rUUFBQUFBQUFBQUFDRXhSQUFBQUFBQUFBQUFJVEJFQUFBQUFBQUFBQUFoTDBRQUFBQUFBQUFBQUNFdVJBQUFBQUFBQUFBQUlTMUVBQUFBQUFBQUFBQWhLZ05BSURRZ0tTQVJRUUowYWlnQ0FDSVRJQ1ZCQTNScUt3TUFJandnS0NBT1FRSjBhaWdDQUNJUUlCVkJBM1JxS3dNQUlpdWlvQ0UwSURVZ1BDQVFJQ1pCQTNScUt3TUFJaXlpb0NFMUlEZ2dFeUFaUVFOMGFpc0RBQ0k5SUN1aW9DRTRJRGtnUFNBc29xQWhPU0FxSUJNZ0kwRURkR29yQXdBaVBpQXJvcUFoS2lBdElENGdMS0tnSVMwZ01DQVRJQ1JCQTNScUt3TUFJajhnSzZLZ0lUQWdNU0EvSUN5aW9DRXhJQzRnRUNBblFRTjBhaXNEQUNJcklENmlvQ0V1SUM4Z0VDQVNRUU4wYWlzREFDSXNJRDZpb0NFdklESWdLeUEvb3FBaE1pQXpJQ3dnUDZLZ0lUTWdOaUE4SUN1aW9DRTJJRGNnUENBc29xQWhOeUE2SUQwZ0s2S2dJVG9nT3lBOUlDeWlvQ0U3SUE1QkFXb2hEaUFSUVFGcUlSRWdHRUVCYWlJWUlBSkhEUUFMQ3dKL0l3QkJFR3NpRGlBS09RTUlJQTVFQUFBQUFBQUFBQUE1QXdBZ0Rpc0RDQ0FPS3dNQVlRc0VRQ0FOSUE5cVFRTjBJZzRnRmtFQ2RDSVBJQXNvQWlScUtBSUFhaUE3SUFPaU9RTUFJQTVCQ0dvaUVTQUxLQUlrSUE5cUtBSUFhaUE2SUFPaU9RTUFJQTVCRUdvaUVpQUxLQUlrSUE5cUtBSUFhaUE1SUFPaU9RTUFJQTVCR0dvaUV5QUxLQUlrSUE5cUtBSUFhaUE0SUFPaU9RTUFJQ0JCQW5RaUR5QUxLQUlrYWlnQ0FDQU9haUEzSUFPaU9RTUFJQXNvQWlRZ0Qyb29BZ0FnRVdvZ05pQURvamtEQUNBTEtBSWtJQTlxS0FJQUlCSnFJRFVnQTZJNUF3QWdDeWdDSkNBUGFpZ0NBQ0FUYWlBMElBT2lPUU1BSUI5QkFuUWlEeUFMS0FJa2FpZ0NBQ0FPYWlBeklBT2lPUU1BSUFzb0FpUWdEMm9vQWdBZ0VXb2dNaUFEb2prREFDQUxLQUlrSUE5cUtBSUFJQkpxSURFZ0E2STVBd0FnQ3lnQ0pDQVBhaWdDQUNBVGFpQXdJQU9pT1FNQUlBNGdIa0VDZENJUElBc29BaVJxS0FJQWFpQXZJQU9pT1FNQUlBc29BaVFnRDJvb0FnQWdFV29nTGlBRG9qa0RBQ0FMS0FJa0lBOXFLQUlBSUJKcUlDMGdBNkk1QXdBZ0N5Z0NKQ0FQYWlnQ0FDQVRhaUFxSUFPaU9RTUFEQUlMSUEwZ0QycEJBM1FpRGlBV1FRSjBJZzhnQ3lnQ0pHb29BZ0JxSWhFZ095QURvaUFSS3dNQUlBcWlvRGtEQUNBT1FRaHFJaEVnQ3lnQ0pDQVBhaWdDQUdvaUVpQTZJQU9pSUJJckF3QWdDcUtnT1FNQUlBNUJFR29pRWlBTEtBSWtJQTlxS0FJQWFpSVRJRGtnQTZJZ0V5c0RBQ0FLb3FBNUF3QWdEa0VZYWlJVElBc29BaVFnRDJvb0FnQnFJZzhnT0NBRG9pQVBLd01BSUFxaW9Ea0RBQ0FnUVFKMElnOGdDeWdDSkdvb0FnQWdEbW9pRUNBM0lBT2lJQkFyQXdBZ0NxS2dPUU1BSUFzb0FpUWdEMm9vQWdBZ0VXb2lFQ0EySUFPaUlCQXJBd0FnQ3FLZ09RTUFJQXNvQWlRZ0Qyb29BZ0FnRW1vaUVDQTFJQU9pSUJBckF3QWdDcUtnT1FNQUlBc29BaVFnRDJvb0FnQWdFMm9pRHlBMElBT2lJQThyQXdBZ0NxS2dPUU1BSUI5QkFuUWlEeUFMS0FJa2FpZ0NBQ0FPYWlJUUlETWdBNklnRUNzREFDQUtvcUE1QXdBZ0N5Z0NKQ0FQYWlnQ0FDQVJhaUlRSURJZ0E2SWdFQ3NEQUNBS29xQTVBd0FnQ3lnQ0pDQVBhaWdDQUNBU2FpSVFJREVnQTZJZ0VDc0RBQ0FLb3FBNUF3QWdDeWdDSkNBUGFpZ0NBQ0FUYWlJUElEQWdBNklnRHlzREFDQUtvcUE1QXdBZ0RpQWVRUUowSWc4Z0N5Z0NKR29vQWdCcUlnNGdMeUFEb2lBT0t3TUFJQXFpb0RrREFDQUxLQUlrSUE5cUtBSUFJQkZxSWc0Z0xpQURvaUFPS3dNQUlBcWlvRGtEQUNBTEtBSWtJQTlxS0FJQUlCSnFJZzRnTFNBRG9pQU9Ld01BSUFxaW9Ea0RBQ0FMS0FJa0lBOXFLQUlBSUJOcUlnNGdLaUFEb2lBT0t3TUFJQXFpb0RrREFBd0JDeUFhSUE5QkEzSWlEaUFPSUJwS0d5RVNJQnNnSFNBYklCMUlHeUlZSUJSSURRQWdGQ0VPQTBBZ0RpRVJBa0FnRHlBU1NnMEFJQXdnRVdvaEV5QVBJUTRnQWdSQUlBWWdFV29oRlFOQVJBQUFBQUFBQUFBQUlTb0NmeU1BUVJCckloQWdBemtEQ0NBUVJBQUFBQUFBQUFBQU9RTUFJQkFyQXdnZ0VDc0RBR0lMQkVBZ0JDZ0NKQ0FGUVFKMGFpZ0NBQ0FWUVFOMGFpQUVLQUlJSUFjb0FpUWdDRUVDZEdvb0FnQWdDU0FPYWtFRGRHb2dCeWdDQ0NBaElBVnJRUUZxRUN3aEtnc0NRQUovSXdCQkVHc2lFQ0FLT1FNSUlCQkVBQUFBQUFBQUFBQTVBd0FnRUNzRENDQVFLd01BWVFzRVFDQUxLQUlrSUJOQkFuUnFLQUlBSUEwZ0RtcEJBM1JxSUNvZ0E2STVBd0FNQVFzZ0N5Z0NKQ0FUUVFKMGFpZ0NBQ0FOSUE1cVFRTjBhaUlRSUNvZ0E2SWdFQ3NEQUNBS29xQTVBd0FMSUE0Z0VrY2hFQ0FPUVFGcUlRNGdFQTBBQ3d3QkN3TkFJd0JCRUdzaUVDQUtPUU1JSUJCRUFBQUFBQUFBQUFBNUF3QWdFQ3NEQ0NBUUt3TUFZU0VRSUFzb0FpUWdFMEVDZEdvb0FnQWdEU0FPYWtFRGRHb2lGU0FRQkh3Z1FBVWdRQ0FWS3dNQUlBcWlvQXM1QXdBZ0RpQVNSaUVRSUE1QkFXb2hEaUFRUlEwQUN3c2dFVUVCYWlFT0lCRWdHRWNOQUFzTElBRWdGMG9OQUFzTElCd2lGQ0FBU0EwQUN3c0xrUk1DSFg4WGZBSi9Jd0JCRUdzaUR5QURPUU1JSUE5RUFBQUFBQUFBQUFBNUF3QWdEeXNEQ0NBUEt3TUFZZ3RCbGgwZ0RoQWlBa0FnQUVFQlNBMEFJQUZGRFFBZ0EwUUFBQUFBQUFBQUFLSWhRaUFCUVFGcklSb2dBRUVCYXlFYklBSWdCbXBCQVdzaElTQUJRUUZJSVNJRFFDQVVRUVJxSVJ3Z0lrVUVRQ0FVUVFOeUlSMGdEQ0FVYWlJV1FRTnFJUjRnRmtFQ2FpRWZJQlpCQVdvaElDQUZJQlJxSWhoQkEyb2hJeUFZUVFKcUlTUWdHRUVCYWlFbFFRQWhGd05BSUJjaUQwRUVhaUVYQWtBQ1FDQUFJQnhJRFFBZ0FTQVhTQTBBQWtBZ0FrRUJTQVJBUkFBQUFBQUFBQUFBSVN4RUFBQUFBQUFBQUFBaEwwUUFBQUFBQUFBQUFDRXdSQUFBQUFBQUFBQUFJVEZFQUFBQUFBQUFBQUFoTWtRQUFBQUFBQUFBQUNFelJBQUFBQUFBQUFBQUlUUkVBQUFBQUFBQUFBQWhOVVFBQUFBQUFBQUFBQ0UyUkFBQUFBQUFBQUFBSVRkRUFBQUFBQUFBQUFBaE9FUUFBQUFBQUFBQUFDRTVSQUFBQUFBQUFBQUFJVHBFQUFBQUFBQUFBQUFoTzBRQUFBQUFBQUFBQUNFOFJBQUFBQUFBQUFBQUlUME1BUXNnQkNnQ0pDSU9JQ05CQW5ScUtBSUFJUmtnRGlBa1FRSjBhaWdDQUNFVklBY29BaVFnQ0NBUGFrRUNkR29pRVNnQ0FDRW1JQTRnSlVFQ2RHb29BZ0FoSnlBT0lCaEJBblJxS0FJQUlTZ2dFU2dDRENFcElCRW9BZ2doS2lBUktBSUVJU3RFQUFBQUFBQUFBQUFoUFVFQUlSQWdDU0VPSUFZaEVVUUFBQUFBQUFBQUFDRThSQUFBQUFBQUFBQUFJVHRFQUFBQUFBQUFBQUFoT2tRQUFBQUFBQUFBQUNFNVJBQUFBQUFBQUFBQUlUaEVBQUFBQUFBQUFBQWhOMFFBQUFBQUFBQUFBQ0UyUkFBQUFBQUFBQUFBSVRWRUFBQUFBQUFBQUFBaE5FUUFBQUFBQUFBQUFDRXpSQUFBQUFBQUFBQUFJVEpFQUFBQUFBQUFBQUFoTVVRQUFBQUFBQUFBQUNFd1JBQUFBQUFBQUFBQUlTOUVBQUFBQUFBQUFBQWhMQU5BSURZZ0p5QVJRUU4wSWhKcUt3TUFJajRnS1NBT1FRTjBJaE5xS3dNQUlpMmlvQ0UySURjZ1BpQVRJQ3BxS3dNQUlpNmlvQ0UzSURvZ0VpQW9haXNEQUNJL0lDMmlvQ0U2SURzZ1B5QXVvcUFoT3lBc0lCSWdHV29yQXdBaVFDQXRvcUFoTENBdklFQWdMcUtnSVM4Z01pQVNJQlZxS3dNQUlrRWdMYUtnSVRJZ015QkJJQzZpb0NFeklEQWdFeUFyYWlzREFDSXRJRUNpb0NFd0lERWdFeUFtYWlzREFDSXVJRUNpb0NFeElEUWdMU0JCb3FBaE5DQTFJQzRnUWFLZ0lUVWdPQ0ErSUMyaW9DRTRJRGtnUGlBdW9xQWhPU0E4SUQ4Z0xhS2dJVHdnUFNBL0lDNmlvQ0U5SUE1QkFXb2hEaUFSUVFGcUlSRWdFRUVCYWlJUUlBSkhEUUFMQ3dKL0l3QkJFR3NpRGlBS09RTUlJQTVFQUFBQUFBQUFBQUE1QXdBZ0Rpc0RDQ0FPS3dNQVlRc0VRQ0FOSUE5cVFRTjBJZzRnRmtFQ2RDSVBJQXNvQWlScUtBSUFhaUE5SUFPaU9RTUFJQTVCQ0dvaUVTQUxLQUlrSUE5cUtBSUFhaUE4SUFPaU9RTUFJQTVCRUdvaUVpQUxLQUlrSUE5cUtBSUFhaUE3SUFPaU9RTUFJQTVCR0dvaUV5QUxLQUlrSUE5cUtBSUFhaUE2SUFPaU9RTUFJQ0JCQW5RaUR5QUxLQUlrYWlnQ0FDQU9haUE1SUFPaU9RTUFJQXNvQWlRZ0Qyb29BZ0FnRVdvZ09DQURvamtEQUNBTEtBSWtJQTlxS0FJQUlCSnFJRGNnQTZJNUF3QWdDeWdDSkNBUGFpZ0NBQ0FUYWlBMklBT2lPUU1BSUI5QkFuUWlEeUFMS0FJa2FpZ0NBQ0FPYWlBMUlBT2lPUU1BSUFzb0FpUWdEMm9vQWdBZ0VXb2dOQ0FEb2prREFDQUxLQUlrSUE5cUtBSUFJQkpxSURNZ0E2STVBd0FnQ3lnQ0pDQVBhaWdDQUNBVGFpQXlJQU9pT1FNQUlBNGdIa0VDZENJUElBc29BaVJxS0FJQWFpQXhJQU9pT1FNQUlBc29BaVFnRDJvb0FnQWdFV29nTUNBRG9qa0RBQ0FMS0FJa0lBOXFLQUlBSUJKcUlDOGdBNkk1QXdBZ0N5Z0NKQ0FQYWlnQ0FDQVRhaUFzSUFPaU9RTUFEQUlMSUEwZ0QycEJBM1FpRGlBV1FRSjBJZzhnQ3lnQ0pHb29BZ0JxSWhFZ1BTQURvaUFSS3dNQUlBcWlvRGtEQUNBT1FRaHFJaEVnQ3lnQ0pDQVBhaWdDQUdvaUVpQThJQU9pSUJJckF3QWdDcUtnT1FNQUlBNUJFR29pRWlBTEtBSWtJQTlxS0FJQWFpSVRJRHNnQTZJZ0V5c0RBQ0FLb3FBNUF3QWdEa0VZYWlJVElBc29BaVFnRDJvb0FnQnFJZzhnT2lBRG9pQVBLd01BSUFxaW9Ea0RBQ0FnUVFKMElnOGdDeWdDSkdvb0FnQWdEbW9pRUNBNUlBT2lJQkFyQXdBZ0NxS2dPUU1BSUFzb0FpUWdEMm9vQWdBZ0VXb2lFQ0E0SUFPaUlCQXJBd0FnQ3FLZ09RTUFJQXNvQWlRZ0Qyb29BZ0FnRW1vaUVDQTNJQU9pSUJBckF3QWdDcUtnT1FNQUlBc29BaVFnRDJvb0FnQWdFMm9pRHlBMklBT2lJQThyQXdBZ0NxS2dPUU1BSUI5QkFuUWlEeUFMS0FJa2FpZ0NBQ0FPYWlJUUlEVWdBNklnRUNzREFDQUtvcUE1QXdBZ0N5Z0NKQ0FQYWlnQ0FDQVJhaUlRSURRZ0E2SWdFQ3NEQUNBS29xQTVBd0FnQ3lnQ0pDQVBhaWdDQUNBU2FpSVFJRE1nQTZJZ0VDc0RBQ0FLb3FBNUF3QWdDeWdDSkNBUGFpZ0NBQ0FUYWlJUElESWdBNklnRHlzREFDQUtvcUE1QXdBZ0RpQWVRUUowSWc4Z0N5Z0NKR29vQWdCcUlnNGdNU0FEb2lBT0t3TUFJQXFpb0RrREFDQUxLQUlrSUE5cUtBSUFJQkZxSWc0Z01DQURvaUFPS3dNQUlBcWlvRGtEQUNBTEtBSWtJQTlxS0FJQUlCSnFJZzRnTHlBRG9pQU9Ld01BSUFxaW9Ea0RBQ0FMS0FJa0lBOXFLQUlBSUJOcUlnNGdMQ0FEb2lBT0t3TUFJQXFpb0RrREFBd0JDeUFhSUE5QkEzSWlEaUFPSUJwS0d5RVNJQnNnSFNBYklCMUlHeUlaSUJSSURRQWdGQ0VPQTBBZ0RpRVJBa0FnRHlBU1NnMEFJQXdnRVdvaEV5QVBJUTRnQWdSQUlBVWdFV29oRlFOQVJBQUFBQUFBQUFBQUlTd0NmeU1BUVJCckloQWdBemtEQ0NBUVJBQUFBQUFBQUFBQU9RTUFJQkFyQXdnZ0VDc0RBR0lMQkVBZ0JDZ0NKQ0FWUVFKMGFpZ0NBQ0FHUVFOMGFrRUJJQWNvQWlRZ0NDQU9ha0VDZEdvb0FnQWdDVUVEZEdwQkFTQWhJQVpyUVFGcUVDd2hMQXNDUUFKL0l3QkJFR3NpRUNBS09RTUlJQkJFQUFBQUFBQUFBQUE1QXdBZ0VDc0RDQ0FRS3dNQVlRc0VRQ0FMS0FJa0lCTkJBblJxS0FJQUlBMGdEbXBCQTNScUlDd2dBNkk1QXdBTUFRc2dDeWdDSkNBVFFRSjBhaWdDQUNBTklBNXFRUU4wYWlJUUlDd2dBNklnRUNzREFDQUtvcUE1QXdBTElBNGdFa2NoRUNBT1FRRnFJUTRnRUEwQUN3d0JDd05BSXdCQkVHc2lFQ0FLT1FNSUlCQkVBQUFBQUFBQUFBQTVBd0FnRUNzRENDQVFLd01BWVNFUUlBc29BaVFnRTBFQ2RHb29BZ0FnRFNBT2FrRURkR29pRlNBUUJId2dRZ1VnUWlBVkt3TUFJQXFpb0FzNUF3QWdEaUFTUmlFUUlBNUJBV29oRGlBUVJRMEFDd3NnRVVFQmFpRU9JQkVnR1VjTkFBc0xJQUVnRjBvTkFBc0xJQndpRkNBQVNBMEFDd3NMblJNQ0huOFhmQUovSXdCQkVHc2lEeUFET1FNSUlBOUVBQUFBQUFBQUFBQTVBd0FnRHlzRENDQVBLd01BWWd0QmxoMGdEaEFpQWtBZ0FFRUJTQTBBSUFGRkRRQWdBMFFBQUFBQUFBQUFBS0loUXlBQlFRRnJJUm9nQUVFQmF5RWJJQUlnQm1wQkFXc2hJU0FCUVFGSUlTSURRQ0FVUVFScUlSd2dJa1VFUUNBVVFRTnlJUjBnRENBVWFpSVdRUU5xSVI0Z0ZrRUNhaUVmSUJaQkFXb2hJQ0FGSUJScUlobEJBMm9oSXlBWlFRSnFJU1FnR1VFQmFpRWxRUUFoRndOQUlCY2lEMEVFYWlFWEFrQUNRQ0FBSUJ4SURRQWdBU0FYU0EwQUFrQWdBa0VCU0FSQVJBQUFBQUFBQUFBQUlTMUVBQUFBQUFBQUFBQWhNRVFBQUFBQUFBQUFBQ0V4UkFBQUFBQUFBQUFBSVRKRUFBQUFBQUFBQUFBaE0wUUFBQUFBQUFBQUFDRTBSQUFBQUFBQUFBQUFJVFZFQUFBQUFBQUFBQUFoTmtRQUFBQUFBQUFBQUNFM1JBQUFBQUFBQUFBQUlUaEVBQUFBQUFBQUFBQWhPVVFBQUFBQUFBQUFBQ0U2UkFBQUFBQUFBQUFBSVR0RUFBQUFBQUFBQUFBaFBFUUFBQUFBQUFBQUFDRTlSQUFBQUFBQUFBQUFJVDRNQVFzZ0NTQVBhaUlTUVFOcUlSVWdFa0VDYWlFbUlCSkJBV29oSnlBRUtBSWtJZzRnSTBFQ2RHb29BZ0FoS0NBT0lDUkJBblJxS0FJQUlTa2dEaUFsUVFKMGFpZ0NBQ0VxSUE0Z0dVRUNkR29vQWdBaEt5QUhLQUlrSVN4RUFBQUFBQUFBQUFBaFBrRUFJUmdnQ0NFT0lBWWhFVVFBQUFBQUFBQUFBQ0U5UkFBQUFBQUFBQUFBSVR4RUFBQUFBQUFBQUFBaE8wUUFBQUFBQUFBQUFDRTZSQUFBQUFBQUFBQUFJVGxFQUFBQUFBQUFBQUFoT0VRQUFBQUFBQUFBQUNFM1JBQUFBQUFBQUFBQUlUWkVBQUFBQUFBQUFBQWhOVVFBQUFBQUFBQUFBQ0UwUkFBQUFBQUFBQUFBSVRORUFBQUFBQUFBQUFBaE1rUUFBQUFBQUFBQUFDRXhSQUFBQUFBQUFBQUFJVEJFQUFBQUFBQUFBQUFoTFFOQUlEY2dLaUFSUVFOMEloTnFLd01BSWo4Z0xDQU9RUUowYWlnQ0FDSVFJQlZCQTNScUt3TUFJaTZpb0NFM0lEZ2dQeUFRSUNaQkEzUnFLd01BSWkraW9DRTRJRHNnRXlBcmFpc0RBQ0pBSUM2aW9DRTdJRHdnUUNBdm9xQWhQQ0F0SUJNZ0tHb3JBd0FpUVNBdW9xQWhMU0F3SUVFZ0w2S2dJVEFnTXlBVElDbHFLd01BSWtJZ0xxS2dJVE1nTkNCQ0lDK2lvQ0UwSURFZ0VDQW5RUU4wYWlzREFDSXVJRUdpb0NFeElESWdFQ0FTUVFOMGFpc0RBQ0l2SUVHaW9DRXlJRFVnTGlCQ29xQWhOU0EySUM4Z1FxS2dJVFlnT1NBL0lDNmlvQ0U1SURvZ1B5QXZvcUFoT2lBOUlFQWdMcUtnSVQwZ1BpQkFJQytpb0NFK0lBNUJBV29oRGlBUlFRRnFJUkVnR0VFQmFpSVlJQUpIRFFBTEN3Si9Jd0JCRUdzaURpQUtPUU1JSUE1RUFBQUFBQUFBQUFBNUF3QWdEaXNEQ0NBT0t3TUFZUXNFUUNBTklBOXFRUU4wSWc0Z0ZrRUNkQ0lQSUFzb0FpUnFLQUlBYWlBK0lBT2lPUU1BSUE1QkNHb2lFU0FMS0FJa0lBOXFLQUlBYWlBOUlBT2lPUU1BSUE1QkVHb2lFaUFMS0FJa0lBOXFLQUlBYWlBOElBT2lPUU1BSUE1QkdHb2lFeUFMS0FJa0lBOXFLQUlBYWlBN0lBT2lPUU1BSUNCQkFuUWlEeUFMS0FJa2FpZ0NBQ0FPYWlBNklBT2lPUU1BSUFzb0FpUWdEMm9vQWdBZ0VXb2dPU0FEb2prREFDQUxLQUlrSUE5cUtBSUFJQkpxSURnZ0E2STVBd0FnQ3lnQ0pDQVBhaWdDQUNBVGFpQTNJQU9pT1FNQUlCOUJBblFpRHlBTEtBSWthaWdDQUNBT2FpQTJJQU9pT1FNQUlBc29BaVFnRDJvb0FnQWdFV29nTlNBRG9qa0RBQ0FMS0FJa0lBOXFLQUlBSUJKcUlEUWdBNkk1QXdBZ0N5Z0NKQ0FQYWlnQ0FDQVRhaUF6SUFPaU9RTUFJQTRnSGtFQ2RDSVBJQXNvQWlScUtBSUFhaUF5SUFPaU9RTUFJQXNvQWlRZ0Qyb29BZ0FnRVdvZ01TQURvamtEQUNBTEtBSWtJQTlxS0FJQUlCSnFJREFnQTZJNUF3QWdDeWdDSkNBUGFpZ0NBQ0FUYWlBdElBT2lPUU1BREFJTElBMGdEMnBCQTNRaURpQVdRUUowSWc4Z0N5Z0NKR29vQWdCcUloRWdQaUFEb2lBUkt3TUFJQXFpb0RrREFDQU9RUWhxSWhFZ0N5Z0NKQ0FQYWlnQ0FHb2lFaUE5SUFPaUlCSXJBd0FnQ3FLZ09RTUFJQTVCRUdvaUVpQUxLQUlrSUE5cUtBSUFhaUlUSUR3Z0E2SWdFeXNEQUNBS29xQTVBd0FnRGtFWWFpSVRJQXNvQWlRZ0Qyb29BZ0JxSWc4Z095QURvaUFQS3dNQUlBcWlvRGtEQUNBZ1FRSjBJZzhnQ3lnQ0pHb29BZ0FnRG1vaUVDQTZJQU9pSUJBckF3QWdDcUtnT1FNQUlBc29BaVFnRDJvb0FnQWdFV29pRUNBNUlBT2lJQkFyQXdBZ0NxS2dPUU1BSUFzb0FpUWdEMm9vQWdBZ0Vtb2lFQ0E0SUFPaUlCQXJBd0FnQ3FLZ09RTUFJQXNvQWlRZ0Qyb29BZ0FnRTJvaUR5QTNJQU9pSUE4ckF3QWdDcUtnT1FNQUlCOUJBblFpRHlBTEtBSWthaWdDQUNBT2FpSVFJRFlnQTZJZ0VDc0RBQ0FLb3FBNUF3QWdDeWdDSkNBUGFpZ0NBQ0FSYWlJUUlEVWdBNklnRUNzREFDQUtvcUE1QXdBZ0N5Z0NKQ0FQYWlnQ0FDQVNhaUlRSURRZ0E2SWdFQ3NEQUNBS29xQTVBd0FnQ3lnQ0pDQVBhaWdDQUNBVGFpSVBJRE1nQTZJZ0R5c0RBQ0FLb3FBNUF3QWdEaUFlUVFKMElnOGdDeWdDSkdvb0FnQnFJZzRnTWlBRG9pQU9Ld01BSUFxaW9Ea0RBQ0FMS0FJa0lBOXFLQUlBSUJGcUlnNGdNU0FEb2lBT0t3TUFJQXFpb0RrREFDQUxLQUlrSUE5cUtBSUFJQkpxSWc0Z01DQURvaUFPS3dNQUlBcWlvRGtEQUNBTEtBSWtJQTlxS0FJQUlCTnFJZzRnTFNBRG9pQU9Ld01BSUFxaW9Ea0RBQXdCQ3lBYUlBOUJBM0lpRGlBT0lCcEtHeUVTSUJzZ0hTQWJJQjFJR3lJWUlCUklEUUFnRkNFT0EwQWdEaUVSQWtBZ0R5QVNTZzBBSUF3Z0VXb2hFeUFQSVE0Z0FnUkFJQVVnRVdvaEZRTkFSQUFBQUFBQUFBQUFJUzBDZnlNQVFSQnJJaEFnQXprRENDQVFSQUFBQUFBQUFBQUFPUU1BSUJBckF3Z2dFQ3NEQUdJTEJFQWdCQ2dDSkNBVlFRSjBhaWdDQUNBR1FRTjBha0VCSUFjb0FpUWdDRUVDZEdvb0FnQWdDU0FPYWtFRGRHb2dCeWdDQ0NBaElBWnJRUUZxRUN3aExRc0NRQUovSXdCQkVHc2lFQ0FLT1FNSUlCQkVBQUFBQUFBQUFBQTVBd0FnRUNzRENDQVFLd01BWVFzRVFDQUxLQUlrSUJOQkFuUnFLQUlBSUEwZ0RtcEJBM1JxSUMwZ0E2STVBd0FNQVFzZ0N5Z0NKQ0FUUVFKMGFpZ0NBQ0FOSUE1cVFRTjBhaUlRSUMwZ0E2SWdFQ3NEQUNBS29xQTVBd0FMSUE0Z0VrY2hFQ0FPUVFGcUlRNGdFQTBBQ3d3QkN3TkFJd0JCRUdzaUVDQUtPUU1JSUJCRUFBQUFBQUFBQUFBNUF3QWdFQ3NEQ0NBUUt3TUFZU0VRSUFzb0FpUWdFMEVDZEdvb0FnQWdEU0FPYWtFRGRHb2lGU0FRQkh3Z1F3VWdReUFWS3dNQUlBcWlvQXM1QXdBZ0RpQVNSaUVRSUE1QkFXb2hEaUFRUlEwQUN3c2dFVUVCYWlFT0lCRWdHRWNOQUFzTElBRWdGMG9OQUFzTElCd2lGQ0FBU0EwQUN3c0xPUUVCZnlBQUtBSlFJZ0lnQUNnQ1ZFY0VRQ0FDSUFFb0FnQWlBVFlDQUNBQkVBMGdBQ0FDUVFScU5nSlFEd3NnQUVITUFHb2dBUkJLQzZ3RUFRRi9Ba0FnQUVVTkFDQUJSUTBBSUFBZ0FTQUNJQU1nQkNBRklBWWdCeUFJSUFrZ0NpQUxJQXdnRFNBT0lBOFFoQUVOQUFKQUlBSUVRQ01BUVJCckloRWdBemtEQ0NBUlJBQUFBQUFBQUFBQU9RTUFJQkVyQXdnZ0VTc0RBR0lOQVFzakFFRVFheUlDSUF3NUF3Z2dBa1FBQUFBQUFBRHdQemtEQUNBQ0t3TUlJQUlyQXdCaERRRUNmeU1BUVJCcklnSWdERGtEQ0NBQ1JBQUFBQUFBQUFBQU9RTUFJQUlyQXdnZ0Fpc0RBR0VMQkVBZ0FFRUJTQTBDSUFGQkFVZ05Ba0VBSVFzRFFDQUxJQTVxSVFSQkFDRUNBMEFnRFNnQ0pDQUVRUUowYWlnQ0FDQUNJQTlxUVFOMGFrSUFOd01BSUFKQkFXb2lBaUFCUncwQUN5QUxRUUZxSWdzZ0FFY05BQXNNQWdzZ0FFRUJTQTBCSUFGQkFVZ05BVUVBSVFRRFFDQUVJQTVxSVFWQkFDRUNBMEFnRFNnQ0pDQUZRUUowYWlnQ0FDQUNJQTlxUVFOMGFpSUdJQVlyQXdBZ0RLSTVBd0FnQWtFQmFpSUNJQUZIRFFBTElBUkJBV29pQkNBQVJ3MEFDd3dCQ3lBSElBdHlSUVJBSUFBZ0FTQUNJQU1nQkNBRklBWWdDQ0FKSUFvZ0RDQU5JQTRnRHlBUUVLUUNDd0pBSUFjTkFDQUxSUTBBSUFBZ0FTQUNJQU1nQkNBRklBWWdDQ0FKSUFvZ0RDQU5JQTRnRHlBUUVLTUNEd3NnQjBFQVJ5RVJBa0FnQjBVTkFDQUxEUUFnQUNBQklBSWdBeUFFSUFVZ0JpQUlJQWtnQ2lBTUlBMGdEaUFQSUJBUW9nSkJBU0VSQ3lBTFJRMEFJQkZGRFFBZ0FDQUJJQUlnQXlBRUlBVWdCaUFJSUFrZ0NpQU1JQTBnRGlBUElCQVFvUUlMQzFJQkFYOENmeU1BUVJCcklnTWdBRGtEQ0NBRElBRTVBd0FnQXlzRENDQURLd01BWlVVTEJFQWdBaUFBQW44akFFRVFheUlESUFBNUF3Z2dBeUFDT1FNQUlBTXJBd2dnQXlzREFHWUxHdzhMSUFFTE1RQWdBQ0FCSUFJb0FpUWdBMEVDZEdvb0FnQWdCRUVEZEdvZ0FpZ0NDQ0FGSUFZb0Fod2dCeWdDSEVFSWFoQ0ZBUXRrQVFGL0FrQWdBRVVOQUNBQlJRMEFJQUpFQUFBQUFBQUFBQUJoRFFBZ0FDQUJJQUlnQXlnQ0pDQUVRUUowYWlnQ0FDQUZRUU4wYWlBREtBSUlJQVlnQnlBSUtBSWtJQWxCQW5ScUtBSUFJQXBCQTNScUlBZ29BZ2dnQ3hDR0FTRU1DeUFNQzFrQkFuOGpBRUVRYXlJREpBQWdBU0FBS0FJRUlnUkJBWFZxSVFFZ0FDZ0NBQ0VBSUFSQkFYRUVRQ0FCS0FJQUlBQnFLQUlBSVFBTElBTWdBallDQ0NBQklBTkJDR29nQUJFREFDQURLQUlJRUFjZ0EwRVFhaVFBQzhrREFRRi9RWXdUUWFRVFFjQVRRUUJCMEJOQkFVSFRFMEVBUWRNVFFRQkJnQWhCMVJOQkFoQWdRWXdUUVFGQjJCTkIwQk5CQTBFRUVCOUJDQkF2SWdCQkFEWUNCQ0FBUVFVMkFnQkJqQk5CaVFoQkJFSGdFMEh3RTBFR0lBQkJBQkFLUVFnUUx5SUFRUUEyQWdRZ0FFRUhOZ0lBUVl3VFFaRUlRUVJCNEJOQjhCTkJCaUFBUVFBUUNrRUlFQzhpQUVFQU5nSUVJQUJCQ0RZQ0FFR01FMEdZQ0VFRFFmZ1RRYUFVUVFrZ0FFRUFFQXBCQ0JBdklnQkJBRFlDQkNBQVFRbzJBZ0JCakJOQnBRaEJBMEg0RTBHZ0ZFRUpJQUJCQUJBS1FRZ1FMeUlBUVFBMkFnUWdBRUVMTmdJQVFZd1RRYklJUVFOQitCTkJvQlJCQ1NBQVFRQVFDa0VJRUM4aUFFRUFOZ0lFSUFCQkREWUNBRUdNRTBHL0NFRURRZmdUUWFBVVFRa2dBRUVBRUFwQkNCQXZJZ0JCQURZQ0JDQUFRUTAyQWdCQmpCTkIxd2hCQTBINEUwR2dGRUVKSUFCQkFCQUtRUWdRTHlJQVFRQTJBZ1FnQUVFT05nSUFRWXdUUWZFSVFRSkJxQlJCc0JSQkR5QUFRUUFRQ2tFSUVDOGlBRUVBTmdJRUlBQkJFRFlDQUVHTUUwSDNDRUVJUWNBVVFlQVVRUkVnQUVFQUVBcEJDQkF2SWdCQkFEWUNCQ0FBUVJJMkFnQkJqQk5CL1FoQkFrSHNGRUgwRkVFVElBQkJBQkFLQ3d2T1FCRUFRWUFJQzdNTVFVeEhURWxDYW5NQWMyVjBkWEJmZUFCelpYUmZlSE1BWVdSa1gyWjFibU4wYVc5dUFHRmtaRjlxWVdOdlltbGhiZ0JoWkdSZlkyRnNiR0poWTJzQVlXUmtYMlZ4ZFdGc2FYUjVYMk52Ym5OMGNtRnBiblFBWVdSa1gybHVaWEYxWVd4cGRIbGZZMjl1YzNSeVlXbHVkQUJ5WlhObGRBQnpiMngyWlFCblpYUmZjM1JoZEhWekFHRnNiRzlqWVhSdmNqeFVQam82WVd4c2IyTmhkR1VvYzJsNlpWOTBJRzRwSUNkdUp5QmxlR05sWldSeklHMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lITnBlbVVBQUFBQUFEUUdBQUFYQUFBQUdBQUFBQmtBQUFBYUFBQUFHd0FBQUJ3QUFBQWRBQUFBSGdBQUFCOEFBQUJPVTNRelgxOHlNVEJmWDJaMWJtTjBhVzl1Tmw5ZlpuVnVZMGxPVTE4MlgxOWlhVzVrU1ZKR2RsQTRRVXhIVEVsQ2FuTlNTMDQyWVd4bmJHbGlNVE55WldGc1h6RmtYMkZ5Y21GNVJWSlRObDlTVGxNMVh6RXpjbVZoYkY4eVpGOWhjbkpoZVVWUWRrVktVelJmVWt0T1UxOHhNbkJzWVdObGFHOXNaR1Z5Y3pSZlgzQm9TVXhwTVVWRlJWSkxUbE5IWDBsTWFUSkZSVVZTUzA1VFIxOUpUR2t6UlVWRlVrdE9VMGRmU1V4cE5FVkZSVVZGUlU1VFh6bGhiR3h2WTJGMGIzSkpVMVJmUlVWR2RsTTRYMU01WDFOQ1gxTkRYMFZGUlFCT1UzUXpYMTh5TVRCZlgyWjFibU4wYVc5dU5sOWZZbUZ6WlVsR2RsSkxUalpoYkdkc2FXSXhNM0psWVd4Zk1XUmZZWEp5WVhsRlVsTXpYMUpPVXpKZk1UTnlaV0ZzWHpKa1gyRnljbUY1UlZCMlJVVkZBQUFBQU9nakFBRFRCUUFBRUNRQUFQZ0VBQUFzQmdBQVRsTjBNMTlmTWpaZlgySnBibVJKVWtaMlVEaEJURWRNU1VKcWMxSkxUalpoYkdkc2FXSXhNM0psWVd4Zk1XUmZZWEp5WVhsRlVsTTBYMUpPVXpOZk1UTnlaV0ZzWHpKa1gyRnljbUY1UlZCMlJVcFRNbDlTUzA1VFh6RXljR3hoWTJWb2IyeGtaWEp6TkY5ZmNHaEpUR2t4UlVWRlVrdE9VMFZmU1V4cE1rVkZSVkpMVGxORlgwbE1hVE5GUlVWU1MwNVRSVjlKVEdrMFJVVkZSVVZGQUU1VGRETmZYekl4T0Y5ZmQyVmhhMTl5WlhOMWJIUmZkSGx3WlVsUVJuWlFPRUZNUjB4SlFtcHpVa3RPTm1Gc1oyeHBZakV6Y21WaGJGOHhaRjloY25KaGVVVlNVelJmVWs1VE0xOHhNM0psWVd4Zk1tUmZZWEp5WVhsRlVIWkZSVVVBQUFEb0l3QUE0QVlBQUJBa0FBQkFCZ0FBUkFjQUFBQUFBQUNFQ0FBQUlBQUFBQ0VBQUFBaUFBQUFJd0FBQUNRQUFBQWxBQUFBSmdBQUFDY0FBQUFvQUFBQVRsTjBNMTlmTWpFd1gxOW1kVzVqZEdsdmJqWmZYMloxYm1OSlRsTmZObDlmWW1sdVpFbFNSblpRT0VGTVIweEpRbXB6VWt0T05tRnNaMnhwWWpFemNtVmhiRjh4WkY5aGNuSmhlVVZTVXpaZlVIWkZTbE0wWDFKTFRsTmZNVEp3YkdGalpXaHZiR1JsY25NMFgxOXdhRWxNYVRGRlJVVlNTMDVUUlY5SlRHa3lSVVZGVWt0T1UwVmZTVXhwTTBWRlJVVkZSVTVUWHpsaGJHeHZZMkYwYjNKSlUwOWZSVVZHZGxNNFgxTTVYMU5CWDBWRlJRQk9VM1F6WDE4eU1UQmZYMloxYm1OMGFXOXVObDlmWW1GelpVbEdkbEpMVGpaaGJHZHNhV0l4TTNKbFlXeGZNV1JmWVhKeVlYbEZVbE16WDFCMlJVVkZBQURvSXdBQU9nZ0FBQkFrQUFDRUJ3QUFmQWdBQUU1VGRETmZYekkyWDE5aWFXNWtTVkpHZGxBNFFVeEhURWxDYW5OU1MwNDJZV3huYkdsaU1UTnlaV0ZzWHpGa1gyRnljbUY1UlZKVE5GOVFka1ZLVXpKZlVrdE9VMTh4TW5Cc1lXTmxhRzlzWkdWeWN6UmZYM0JvU1V4cE1VVkZSVkpMVGxORFgwbE1hVEpGUlVWU1MwNVRRMTlKVEdrelJVVkZSVVZGQUU1VGRETmZYekl4T0Y5ZmQyVmhhMTl5WlhOMWJIUmZkSGx3WlVsUVJuWlFPRUZNUjB4SlFtcHpVa3RPTm1Gc1oyeHBZakV6Y21WaGJGOHhaRjloY25KaGVVVlNVelJmVUhaRlJVVUFBT2dqQUFBT0NRQUFFQ1FBQUpBSUFBQmNDUUFBQUFBQUFJd0pBQUFwQUFBQUtnQUFBRGhCVEVkTVNVSnFjd0FBQU9nakFBQ0FDUUFBbkNNQUFGQTRRVXhIVEVsQ2FuTUFBTWdrQUFDWUNRQUFBQUFBQUl3SkFBQlFTemhCVEVkTVNVSnFjd0RJSkFBQXRBa0FBQUVBQUFDTUNRQUFhV2tBZGdCMmFRQ2tDUUFBQUFBQUFEd2pBQUNrQ1FBQW5DTUFBSndqQUFCMmFXbHBhUUFBQUR3akFBQ2tDUUFBR0FvQUFFNHhNR1Z0YzJOeWFYQjBaVzR6ZG1Gc1JRQUE2Q01BQUFRS0FBQjJhV2xwQUFBQUFEd2pBQUNrQ1FBQWRtbHBBRUhBRkF2bUFsUWpBQUNrQ1FBQW5DTUFBSndqQUFEWUl3QUEyQ01BQU5nakFBRFlJd0FBYVdscGFXbGtaR1JrQUFBQW5DTUFBS1FKQUFCcGFXa0FMUzB0SVNFaElFTlNTVlJKUTBGTUlFVlNVazlTSUNFaElTMHRMU0JsZUdObGNIUnBiMjRnZDJsMGFDQnRaWE56WVdkbElDY2xjeWNnZDJGeklHZGxibVZ5WVhSbFpBb0FBR0ZsWDIxaGJHeHZZeWdwT2lCdmRYUWdiMllnYldWdGIzSjVBR0ZsWDJSaVgybHVhWFFvS1RvZ2JtVm5ZWFJwZG1VZ2MybDZaUUJoWlY5a1lsOXlaV0ZzYkc5aktDazZJRzVsWjJGMGFYWmxJSE5wZW1VQVlXVmZkbVZqZEc5eVgybHVhWFFvS1RvZ2JtVm5ZWFJwZG1VZ2MybDZaUUJoWlY5MlpXTjBiM0pmYzJWMFgyeGxibWQwYUNncE9pQnVaV2RoZEdsMlpTQnphWHBsQUdGbFgyMWhkSEpwZUY5cGJtbDBLQ2s2SUc1bFoyRjBhWFpsSUd4bGJtZDBhQUJoWlY5dFlYUnlhWGhmYzJWMFgyeGxibWQwYUNncE9pQnVaV2RoZEdsMlpTQnNaVzVuZEdnQVFiQVhDK0VscUFzQUFFNDJZV3huYkdsaU9HRndYMlZ5Y205eVJRQUE2Q01BQUxRTEFBQUFBQUFBNEF3QUFEQUFBQUF4QUFBQVFVeEhURWxDT2lCaFpWOTJaV04wYjNKZmQzSmhjSEJsY2lCa1lYUmhkSGx3WlNCamFHVmpheUJtWVdsc1pXUUFRVXhIVEVsQ09pQnpaWFJzWlc1bmRHZ29LU0JsY25KdmNpd2djSFJ5UFQxT1ZVeE1JQ2hoY25KaGVTQjNZWE1nYm05MElHTnZjbkpsWTNSc2VTQnBibWwwYVdGc2FYcGxaQ2tBUVV4SFRFbENPaUJ6WlhSc1pXNW5kR2dvS1NCbGNuSnZjaXdnY0hSeUlHbHpJR1p5YjNwbGJpQndjbTk0ZVNCaGNuSmhlUUFBQUFBQUJBMEFBREFBQUFBeUFBQUFBQUFBQURBTkFBQXpBQUFBTkFBQUFBQUFBQUJVRFFBQU13QUFBRFVBQUFCT05tRnNaMnhwWWpFM1lXVmZkbVZqZEc5eVgzZHlZWEJ3WlhKRkFBQUFBT2dqQUFEQURBQUFUalpoYkdkc2FXSXhNM0psWVd4Zk1XUmZZWEp5WVhsRkFBQUFBQkFrQUFEb0RBQUE0QXdBQUU0MllXeG5iR2xpTVRkaFpWOXRZWFJ5YVhoZmQzSmhjSEJsY2tVQUFBQUE2Q01BQUJBTkFBQk9ObUZzWjJ4cFlqRXpjbVZoYkY4eVpGOWhjbkpoZVVVQUFBQUFFQ1FBQURnTkFBQXdEUUFBQVFBQUFBUUFBQUFJQUFBQUVBQUFBRUZRVTBWU1ZrbHpSbWx1YVhSbFZtVmpkRzl5T2lCcGJuUmxjbTVoYkNCbGNuSnZjaUFvVGp3d0tRQkJVRk5GVWxaSmMwWnBibWwwWlUxaGRISnBlRG9nYVc1MFpYSnVZV3dnWlhKeWIzSWdLRTQ4TUNrQVFWQlRSVkpXU1hOR2FXNXBkR1ZOWVhSeWFYZzZJR2x1ZEdWeWJtRnNJR1Z5Y205eUlDaE5QREFwQUZScGJHVmtVM0JzYVhRNklGUmhjMnRUYVhwbFBESUFWR2xzWldSVGNHeHBkRG9nVkdGemExTnBlbVU4UFZScGJHVlRhWHBsQUZScGJHVmtVM0JzYVhRNklHbHVkR1ZuY21sMGVTQmphR1ZqYXlCbVlXbHNaV1FBVkdsc1pXUlRjR3hwZERvZ2FXNTBaWEp1WVd3Z1pYSnliM0lBUTJoMWJtdHpRMjkxYm5RNklGUmhjMnRUYVhwbFBEQUFRMmgxYm10elEyOTFiblE2SUVOb2RXNXJVMmw2WlR3eEFGSk5ZWFJ5YVhoSFJVMU5TelEwVmpBd09pQnBiblJsY201aGJDQmxjbkp2Y2lBb1FXeHdhR0U5TUNrQVNGRlNUa1JKYm5SbFoyVnlRbUZ6WlRvZ1UzUmhkR1VnYVhNZ2JtOTBJR052Y25KbFkzUnNlU0JwYm1sMGFXRnNhWHBsWkNFQVVrMWhkSEpwZUZKcFoyaDBWRkpUVFRvZ2FXNTBaV2R5YVhSNUlHTm9aV05ySUdaaGFXeGxaQUJTVFdGMGNtbDRUR1ZtZEZSU1UwMVNaV002SUdsdWRHVm5jbWwwZVNCamFHVmpheUJtWVdsc1pXUUFVazFoZEhKcGVGTlpVa3M2SUdsdWRHVm5jbWwwZVNCamFHVmpheUJtWVdsc1pXUUFVazFoZEhKcGVFZEZUVTA2SUdsdVkyOXljbVZqZENCUGNGUjVjR1ZCSUNodGRYTjBJR0psSURBZ2IzSWdNU2tBVWsxaGRISnBlRWRGVFUwNklHbHVZMjl5Y21WamRDQlBjRlI1Y0dWQ0lDaHRkWE4wSUdKbElEQWdiM0lnTVNrQVVrMWhkSEpwZUVkRlRVMDZJR2x1WTI5eVpXTjBJSE5wZW1VZ2IyWWdiM1YwY0hWMElHMWhkSEpwZUNCREFGTlFSRTFoZEhKcGVFTm9iMnhsYzJ0NVZYQmtZWFJsUm1sNFFuVm1PaUJPUEQwd0FGTlFSRTFoZEhKcGVFTm9iMnhsYzJ0NVZYQmtZWFJsUm1sNFFuVm1PaUJTYjNkektFRXBQRTRBVTFCRVRXRjBjbWw0UTJodmJHVnphM2xWY0dSaGRHVkdhWGhDZFdZNklFTnZiSE1vUVNrOFRnQlRVRVJOWVhSeWFYaERhRzlzWlhOcmVWVndaR0YwWlVacGVFSjFaam9nVEdWdVozUm9LRVpwZUNrOFRnQlNUV0YwY21sNFIwVk5UVkpsWXpvZ2FXNTBaV2R5YVhSNUlHTm9aV05ySUdaaGFXeGxaQUFBQUFBQW1CWUFBRkVBQUFCU0FBQUFBQUFBQUxnV0FBQlRBQUFBVkFBQUFBQUFBQURrRmdBQVZRQUFBRllBQUFBQUFBQUFCQmNBQUZVQUFBQlhBQUFBUVV4SFRFbENPaUJsY25KdmNpQnBiaUFuYldsdWJuTnZjSFJwYldsNlpTZ3BKeUFvWm5abFl5QnBjeUJPVlV4TUtRQkJURWRNU1VJNklHVnljbTl5SUdsdUlDZHRhVzV1YzI5d2RHbHRhWHBsSnlBb2MyOXRaU0JrWlhKcGRtRjBhWFpsY3lCM1pYSmxJRzV2ZENCd2NtOTJhV1JsWkQ4cEFFRk1SMHhKUWpvZ1pYSnliM0lnYVc0Z0oyMXBibTV6YjNCMGFXMXBlbVVvS1NjZ0tHcGhZeUJwY3lCT1ZVeE1LUUJUVGs1TVUxTmxkRkJ5YjJKc1pXMDZJRTVFUERBQVUwNU9URk5UWlhSUWNtOWliR1Z0T2lCT1V6d3dBRk5PVGt4VFUyVjBVSEp2WW14bGJUb2dUbEk4UFRBQVUwNU9URk5UWlhSUWNtOWliR1Z0T2lCT1V6NU9VZ0JUVGs1TVUxTmxkRkJ5YjJKc1pXMDZJSEp2ZDNNb1FTazhUbElBVTA1T1RGTlRaWFJRY205aWJHVnRPaUJqYjJ4ektFRXBQRTVFQUZOT1RreFRVMlYwVUhKdllteGxiVG9nYkdWdVozUm9LRUlwUEU1U0FGTk9Ua3hUVTJWMFVISnZZbXhsYlRvZ1FTQmpiMjUwWVdsdWN5QkpUa1l2VGtGT0FGTk9Ua3hUVTJWMFVISnZZbXhsYlRvZ1FpQmpiMjUwWVdsdWN5QkpUa1l2VGtGT0FGTk9Ua3hUUkhKdmNFNU9Rem9nU1dSNFBEQUFVMDVPVEZORWNtOXdUazVET2lCSlpIZytQVTVUSzA1RUFGTk9Ua3hUT2lCcGJuUmxaM0pwZEhrZ1kyaGxZMnNnWm1GcGJHVmtBRTFwYms1VFEzSmxZWFJsT2lCT1BERUFUV2x1VGxORGNtVmhkR1U2SUV4bGJtZDBhQ2hZS1R4T0FFMXBiazVUUTNKbFlYUmxPaUJZSUdOdmJuUmhhVzV6SUdsdVptbHVhWFJsSUc5eUlFNWhUaUIyWVd4MVpYTUFUV2x1VGxORGNtVmhkR1ZHT2lCT1BERUFUV2x1VGxORGNtVmhkR1ZHT2lCTVpXNW5kR2dvV0NrOFRnQk5hVzVPVTBOeVpXRjBaVVk2SUZnZ1kyOXVkR0ZwYm5NZ2FXNW1hVzVwZEdVZ2IzSWdUbUZPSUhaaGJIVmxjd0JOYVc1T1UwTnlaV0YwWlVZNklFUnBabVpUZEdWd0lHbHpJR2x1Wm1sdWFYUmxJRzl5SUU1aFRpRUFUV2x1VGxORGNtVmhkR1ZHT2lCRWFXWm1VM1JsY0NCcGN5QnViMjR0Y0c5emFYUnBkbVVoQUUxcGJrNVRVMlYwVEVNNklFczhNQUJOYVc1T1UxTmxkRXhET2lCRGIyeHpLRU1wUEU0ck1RQk5hVzVPVTFObGRFeERPaUJTYjNkektFTXBQRXNBVFdsdVRsTlRaWFJNUXpvZ1RHVnVaM1JvS0VOVUtUeExBRTFwYms1VFUyVjBURU02SUVNZ1kyOXVkR0ZwYm5NZ2FXNW1hVzVwZEdVZ2IzSWdUbUZPSUhaaGJIVmxjeUVBVFdsdVRsTlRaWFJPVEVNNklFNU1SVU04TUFCTmFXNU9VMU5sZEU1TVF6b2dUa3hKUXp3d0FFMXBiazVUVTJWMFEyOXVaRG9nUlhCeldDQnBjeUJ1YjNRZ1ptbHVhWFJsSUc1MWJXSmxjZ0JOYVc1T1UxTmxkRU52Ym1RNklHNWxaMkYwYVhabElFVndjMWdBVFdsdVRsTlRaWFJEYjI1a09pQnVaV2RoZEdsMlpTQk5ZWGhKZEhNaEFFMXBiazVUVTJWMFUyTmhiR1U2SUV4bGJtZDBhQ2hUS1R4T0FFMXBiazVUVTJWMFUyTmhiR1U2SUZNZ1kyOXVkR0ZwYm5NZ2FXNW1hVzVwZEdVZ2IzSWdUa0ZPSUdWc1pXMWxiblJ6QUUxcGJrNVRVMlYwVTJOaGJHVTZJRk1nWTI5dWRHRnBibk1nZW1WeWJ5QmxiR1Z0Wlc1MGN3Qk5hVzVPVTFObGRFRnNaMjlCUjFNNklGSmhaR2wxY3lCcGN5QnViM1FnWm1sdWFYUmxBRTFwYms1VFUyVjBRV3huYjBGSFV6b2dVbUZrYVhWelBEMHdBRTFwYms1VFUyVjBRV3huYjBGSFV6b2dVR1Z1WVd4MGVTQnBjeUJ1YjNRZ1ptbHVhWFJsQUUxcGJrNVRVMlYwUVd4bmIwRkhVem9nVUdWdVlXeDBlVHd3QUUxcGJrNVRPaUJwYm5SbFozSnBkSGtnWTJobFkyc2dabUZwYkdWa0FFMXBiazVUVW1WemRHRnlkRVp5YjIwNklFeGxibWQwYUNoWUtUeE9BRTFwYms1VFVtVnpkR0Z5ZEVaeWIyMDZJRmdnWTI5dWRHRnBibk1nYVc1bWFXNXBkR1VnYjNJZ1RtRk9JSFpoYkhWbGN5RUFUalpoYkdkc2FXSXhOMTl0YVc1dWMzTjBZWFJsWDI5M2JtVnlSUUFBQUFEb0l3QUFlQllBQUU0MllXeG5iR2xpTVRCdGFXNXVjM04wWVhSbFJRQUFBQkFrQUFDZ0ZnQUFtQllBQUU0MllXeG5iR2xpTVRoZmJXbHVibk55WlhCdmNuUmZiM2R1WlhKRkFBQUE2Q01BQU1RV0FBQk9ObUZzWjJ4cFlqRXhiV2x1Ym5OeVpYQnZjblJGQUFBUUpBQUE3QllBQU9RV0FBQlVVa1JHYVhoV1lYSnBZV0pzWlRvZ2FXNTBaV2R5YVhSNUlHVnljbTl5QUUxcGJrNVRPaUJwYm5SbGNtNWhiQ0JsY25KdmNnQk5hVzVPVXpvZ2FXNTBaV2R5YVhSNUlHVnljbTl5QUUxcGJrNVRVVkE2SUdsdWRHVm5jbWwwZVNCamFHVmpheUJtWVdsc1pXUUFkbTlwWkFCaWIyOXNBR05vWVhJQWMybG5ibVZrSUdOb1lYSUFkVzV6YVdkdVpXUWdZMmhoY2dCemFHOXlkQUIxYm5OcFoyNWxaQ0J6YUc5eWRBQnBiblFBZFc1emFXZHVaV1FnYVc1MEFHeHZibWNBZFc1emFXZHVaV1FnYkc5dVp3Qm1iRzloZEFCa2IzVmliR1VBYzNSa09qcHpkSEpwYm1jQWMzUmtPanBpWVhOcFkxOXpkSEpwYm1jOGRXNXphV2R1WldRZ1kyaGhjajRBYzNSa09qcDNjM1J5YVc1bkFITjBaRG82ZFRFMmMzUnlhVzVuQUhOMFpEbzZkVE15YzNSeWFXNW5BR1Z0YzJOeWFYQjBaVzQ2T25aaGJBQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4amFHRnlQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eHphV2R1WldRZ1kyaGhjajRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhkVzV6YVdkdVpXUWdZMmhoY2o0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4YzJodmNuUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BIVnVjMmxuYm1Wa0lITm9iM0owUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkenhwYm5RK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEhWdWMybG5ibVZrSUdsdWRENEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGJHOXVaejRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhkVzV6YVdkdVpXUWdiRzl1Wno0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4YVc1ME9GOTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eDFhVzUwT0Y5MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4cGJuUXhObDkwUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkengxYVc1ME1UWmZkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhhVzUwTXpKZmRENEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGRXbHVkRE15WDNRK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEdac2IyRjBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eGtiM1ZpYkdVK0FFNVRkRE5mWHpJeE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRkFFNVRkRE5mWHpJeU1WOWZZbUZ6YVdOZmMzUnlhVzVuWDJOdmJXMXZia2xNWWpGRlJVVUE2Q01BQU5JYUFBQnNKQUFBa3hvQUFBQUFBQUFCQUFBQStCb0FBQUFBQUFCT1UzUXpYMTh5TVRKaVlYTnBZMTl6ZEhKcGJtZEphRTVUWHpFeFkyaGhjbDkwY21GcGRITkphRVZGVGxOZk9XRnNiRzlqWVhSdmNrbG9SVVZGUlFBQWJDUUFBQmdiQUFBQUFBQUFBUUFBQVBnYUFBQUFBQUFBVGxOME0xOWZNakV5WW1GemFXTmZjM1J5YVc1blNYZE9VMTh4TVdOb1lYSmZkSEpoYVhSelNYZEZSVTVUWHpsaGJHeHZZMkYwYjNKSmQwVkZSVVVBQUd3a0FBQndHd0FBQUFBQUFBRUFBQUQ0R2dBQUFBQUFBRTVUZEROZlh6SXhNbUpoYzJsalgzTjBjbWx1WjBsRWMwNVRYekV4WTJoaGNsOTBjbUZwZEhOSlJITkZSVTVUWHpsaGJHeHZZMkYwYjNKSlJITkZSVVZGQUFBQWJDUUFBTWdiQUFBQUFBQUFBUUFBQVBnYUFBQUFBQUFBVGxOME0xOWZNakV5WW1GemFXTmZjM1J5YVc1blNVUnBUbE5mTVRGamFHRnlYM1J5WVdsMGMwbEVhVVZGVGxOZk9XRnNiRzlqWVhSdmNrbEVhVVZGUlVVQUFBQnNKQUFBSkJ3QUFBQUFBQUFCQUFBQStCb0FBQUFBQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsalJVVUFBT2dqQUFDQUhBQUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpZVVZGQUFEb0l3QUFxQndBQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1doRlJRQUE2Q01BQU5BY0FBQk9NVEJsYlhOamNtbHdkR1Z1TVRGdFpXMXZjbmxmZG1sbGQwbHpSVVVBQU9nakFBRDRIQUFBVGpFd1pXMXpZM0pwY0hSbGJqRXhiV1Z0YjNKNVgzWnBaWGRKZEVWRkFBRG9Jd0FBSUIwQUFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXbEZSUUFBNkNNQUFFZ2RBQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGxxUlVVQUFPZ2pBQUJ3SFFBQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSmJFVkZBQURvSXdBQW1CMEFBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTVzFGUlFBQTZDTUFBTUFkQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsbVJVVUFBT2dqQUFEb0hRQUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpaRVZGQUFEb0l3QUFFQjRBQUMwcklDQWdNRmd3ZUFBb2JuVnNiQ2tBQUFBQUFBQUFBQkVBQ2dBUkVSRUFBQUFBQlFBQUFBQUFBQWtBQUFBQUN3QUFBQUFBQUFBQUVRQVBDaEVSRVFNS0J3QUJBQWtMQ3dBQUNRWUxBQUFMQUFZUkFBQUFFUkVSQUVHaFBRc2hDd0FBQUFBQUFBQUFFUUFLQ2hFUkVRQUtBQUFDQUFrTEFBQUFDUUFMQUFBTEFFSGJQUXNCREFCQjV6MExGUXdBQUFBQURBQUFBQUFKREFBQUFBQUFEQUFBREFCQmxUNExBUTRBUWFFK0N4VU5BQUFBQkEwQUFBQUFDUTRBQUFBQUFBNEFBQTRBUWM4K0N3RVFBRUhiUGdzZUR3QUFBQUFQQUFBQUFBa1FBQUFBQUFBUUFBQVFBQUFTQUFBQUVoSVNBRUdTUHdzT0VnQUFBQklTRWdBQUFBQUFBQWtBUWNNL0N3RUxBRUhQUHdzVkNnQUFBQUFLQUFBQUFBa0xBQUFBQUFBTEFBQUxBRUg5UHdzQkRBQkJpY0FBQzlBSkRBQUFBQUFNQUFBQUFBa01BQUFBQUFBTUFBQU1BQUF3TVRJek5EVTJOemc1UVVKRFJFVkdMVEJZS3pCWUlEQllMVEI0S3pCNElEQjRBR2x1WmdCSlRrWUFibUZ1QUU1QlRnQXVBSFpsWTNSdmNnQnpkR1E2T21KaFpGOW1kVzVqZEdsdmJsOWpZV3hzQUFBQUFBQUFwQ0FBQUUwQUFBQmJBQUFBWEFBQUFFNVRkRE5mWHpJeE4ySmhaRjltZFc1amRHbHZibDlqWVd4c1JRQVFKQUFBaUNBQUFEUWhBQUJoYkd4dlkyRjBiM0k4VkQ0Nk9tRnNiRzlqWVhSbEtITnBlbVZmZENCdUtTQW5iaWNnWlhoalpXVmtjeUJ0WVhocGJYVnRJSE4xY0hCdmNuUmxaQ0J6YVhwbEFHSmhjMmxqWDNOMGNtbHVad0J6ZEdRNk9tVjRZMlZ3ZEdsdmJnQUFBQUFBTkNFQUFGMEFBQUJlQUFBQVh3QUFBRk4wT1dWNFkyVndkR2x2YmdBQUFBRG9Jd0FBSkNFQUFBQUFBQUJnSVFBQUZnQUFBR0FBQUFCaEFBQUFVM1F4TVd4dloybGpYMlZ5Y205eUFCQWtBQUJRSVFBQU5DRUFBQUFBQUFDVUlRQUFGZ0FBQUdJQUFBQmhBQUFBVTNReE1teGxibWQwYUY5bGNuSnZjZ0FBQUFBUUpBQUFnQ0VBQUdBaEFBQlRkRGwwZVhCbFgybHVabThBQUFBQTZDTUFBS0FoQUFCT01UQmZYMk40ZUdGaWFYWXhNVFpmWDNOb2FXMWZkSGx3WlY5cGJtWnZSUUFBQUFBUUpBQUF1Q0VBQUxBaEFBQk9NVEJmWDJONGVHRmlhWFl4TVRkZlgyTnNZWE56WDNSNWNHVmZhVzVtYjBVQUFBQVFKQUFBNkNFQUFOd2hBQUJPTVRCZlgyTjRlR0ZpYVhZeE1UZGZYM0JpWVhObFgzUjVjR1ZmYVc1bWIwVUFBQUFRSkFBQUdDSUFBTndoQUFCT01UQmZYMk40ZUdGaWFYWXhNVGxmWDNCdmFXNTBaWEpmZEhsd1pWOXBibVp2UlFBUUpBQUFTQ0lBQUR3aUFBQk9NVEJmWDJONGVHRmlhWFl4TWpCZlgyWjFibU4wYVc5dVgzUjVjR1ZmYVc1bWIwVUFBQUFBRUNRQUFIZ2lBQURjSVFBQVRqRXdYMTlqZUhoaFltbDJNVEk1WDE5d2IybHVkR1Z5WDNSdlgyMWxiV0psY2w5MGVYQmxYMmx1Wm05RkFBQUFFQ1FBQUt3aUFBQThJZ0FBQUFBQUFDd2pBQUJqQUFBQVpBQUFBR1VBQUFCbUFBQUFad0FBQUU0eE1GOWZZM2g0WVdKcGRqRXlNMTlmWm5WdVpHRnRaVzUwWVd4ZmRIbHdaVjlwYm1adlJRQVFKQUFBQkNNQUFOd2hBQUIyQUFBQThDSUFBRGdqQUFCRWJnQUE4Q0lBQUVRakFBQmlBQUFBOENJQUFGQWpBQUJqQUFBQThDSUFBRndqQUFCb0FBQUE4Q0lBQUdnakFBQmhBQUFBOENJQUFIUWpBQUJ6QUFBQThDSUFBSUFqQUFCMEFBQUE4Q0lBQUl3akFBQnBBQUFBOENJQUFKZ2pBQUJxQUFBQThDSUFBS1FqQUFCc0FBQUE4Q0lBQUxBakFBQnRBQUFBOENJQUFMd2pBQUJtQUFBQThDSUFBTWdqQUFCa0FBQUE4Q0lBQU5RakFBQUFBQUFBRENJQUFHTUFBQUJvQUFBQVpRQUFBR1lBQUFCcEFBQUFhZ0FBQUdzQUFBQnNBQUFBQUFBQUFGZ2tBQUJqQUFBQWJRQUFBR1VBQUFCbUFBQUFhUUFBQUc0QUFBQnZBQUFBY0FBQUFFNHhNRjlmWTNoNFlXSnBkakV5TUY5ZmMybGZZMnhoYzNOZmRIbHdaVjlwYm1adlJRQUFBQUFRSkFBQU1DUUFBQXdpQUFBQUFBQUF0Q1FBQUdNQUFBQnhBQUFBWlFBQUFHWUFBQUJwQUFBQWNnQUFBSE1BQUFCMEFBQUFUakV3WDE5amVIaGhZbWwyTVRJeFgxOTJiV2xmWTJ4aGMzTmZkSGx3WlY5cGJtWnZSUUFBQUJBa0FBQ01KQUFBRENJQUFBQUFBQUJzSWdBQVl3QUFBSFVBQUFCbEFBQUFaZ0FBQUhZQVFZakxBQXNDTkNZQVFjRExBQXNEWUNoUVwiO2lmKCFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpKXt3YXNtQmluYXJ5RmlsZT1sb2NhdGVGaWxlKHdhc21CaW5hcnlGaWxlKX1mdW5jdGlvbiBnZXRCaW5hcnkoZmlsZSl7dHJ5e2lmKGZpbGU9PXdhc21CaW5hcnlGaWxlJiZ3YXNtQmluYXJ5KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkod2FzbUJpbmFyeSl9dmFyIGJpbmFyeT10cnlQYXJzZUFzRGF0YVVSSShmaWxlKTtpZihiaW5hcnkpe3JldHVybiBiaW5hcnl9aWYocmVhZEJpbmFyeSl7cmV0dXJuIHJlYWRCaW5hcnkoZmlsZSl9ZWxzZXt0aHJvd1wiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWRcIn19Y2F0Y2goZXJyKXthYm9ydChlcnIpfX1mdW5jdGlvbiBnZXRCaW5hcnlQcm9taXNlKCl7aWYoIXdhc21CaW5hcnkmJihFTlZJUk9OTUVOVF9JU19XRUJ8fEVOVklST05NRU5UX0lTX1dPUktFUikpe2lmKHR5cGVvZiBmZXRjaD09PVwiZnVuY3Rpb25cIiYmIWlzRmlsZVVSSSh3YXNtQmluYXJ5RmlsZSkpe3JldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7aWYoIXJlc3BvbnNlW1wib2tcIl0pe3Rocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIit3YXNtQmluYXJ5RmlsZStcIidcIn1yZXR1cm4gcmVzcG9uc2VbXCJhcnJheUJ1ZmZlclwiXSgpfSkuY2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKX0pfWVsc2V7aWYocmVhZEFzeW5jKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3JlYWRBc3luYyh3YXNtQmluYXJ5RmlsZSxmdW5jdGlvbihyZXNwb25zZSl7cmVzb2x2ZShuZXcgVWludDhBcnJheShyZXNwb25zZSkpfSxyZWplY3QpfSl9fX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBnZXRCaW5hcnkod2FzbUJpbmFyeUZpbGUpfSl9ZnVuY3Rpb24gY3JlYXRlV2FzbSgpe3ZhciBpbmZvPXtcImFcIjphc21MaWJyYXJ5QXJnfTtmdW5jdGlvbiByZWNlaXZlSW5zdGFuY2UoaW5zdGFuY2UsbW9kdWxlKXt2YXIgZXhwb3J0cz1pbnN0YW5jZS5leHBvcnRzO01vZHVsZVtcImFzbVwiXT1leHBvcnRzO3dhc21NZW1vcnk9TW9kdWxlW1wiYXNtXCJdW1wiSFwiXTt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcik7d2FzbVRhYmxlPU1vZHVsZVtcImFzbVwiXVtcIkpcIl07cmVtb3ZlUnVuRGVwZW5kZW5jeShcIndhc20taW5zdGFudGlhdGVcIil9YWRkUnVuRGVwZW5kZW5jeShcIndhc20taW5zdGFudGlhdGVcIik7ZnVuY3Rpb24gcmVjZWl2ZUluc3RhbnRpYXRlZFNvdXJjZShvdXRwdXQpe3JlY2VpdmVJbnN0YW5jZShvdXRwdXRbXCJpbnN0YW5jZVwiXSl9ZnVuY3Rpb24gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlcil7cmV0dXJuIGdldEJpbmFyeVByb21pc2UoKS50aGVuKGZ1bmN0aW9uKGJpbmFyeSl7cmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJpbmFyeSxpbmZvKX0pLnRoZW4ocmVjZWl2ZXIsZnVuY3Rpb24ocmVhc29uKXtlcnIoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIityZWFzb24pO2Fib3J0KHJlYXNvbil9KX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFzeW5jKCl7aWYoIXdhc21CaW5hcnkmJnR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZz09PVwiZnVuY3Rpb25cIiYmIWlzRGF0YVVSSSh3YXNtQmluYXJ5RmlsZSkmJiFpc0ZpbGVVUkkod2FzbUJpbmFyeUZpbGUpJiZ0eXBlb2YgZmV0Y2g9PT1cImZ1bmN0aW9uXCIpe3JldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7dmFyIHJlc3VsdD1XZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhyZXNwb25zZSxpbmZvKTtyZXR1cm4gcmVzdWx0LnRoZW4ocmVjZWl2ZUluc3RhbnRpYXRlZFNvdXJjZSxmdW5jdGlvbihyZWFzb24pe2VycihcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcIityZWFzb24pO2VycihcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO3JldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0ZWRTb3VyY2UpfSl9KX1lbHNle3JldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0ZWRTb3VyY2UpfX1pZihNb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl0pe3RyeXt2YXIgZXhwb3J0cz1Nb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl0oaW5mbyxyZWNlaXZlSW5zdGFuY2UpO3JldHVybiBleHBvcnRzfWNhdGNoKGUpe2VycihcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiK2UpO3JldHVybiBmYWxzZX19aW5zdGFudGlhdGVBc3luYygpLmNhdGNoKHJlYWR5UHJvbWlzZVJlamVjdCk7cmV0dXJue319ZnVuY3Rpb24gY2FsbFJ1bnRpbWVDYWxsYmFja3MoY2FsbGJhY2tzKXt3aGlsZShjYWxsYmFja3MubGVuZ3RoPjApe3ZhciBjYWxsYmFjaz1jYWxsYmFja3Muc2hpZnQoKTtpZih0eXBlb2YgY2FsbGJhY2s9PVwiZnVuY3Rpb25cIil7Y2FsbGJhY2soTW9kdWxlKTtjb250aW51ZX12YXIgZnVuYz1jYWxsYmFjay5mdW5jO2lmKHR5cGVvZiBmdW5jPT09XCJudW1iZXJcIil7aWYoY2FsbGJhY2suYXJnPT09dW5kZWZpbmVkKXt3YXNtVGFibGUuZ2V0KGZ1bmMpKCl9ZWxzZXt3YXNtVGFibGUuZ2V0KGZ1bmMpKGNhbGxiYWNrLmFyZyl9fWVsc2V7ZnVuYyhjYWxsYmFjay5hcmc9PT11bmRlZmluZWQ/bnVsbDpjYWxsYmFjay5hcmcpfX19dmFyIEV4Y2VwdGlvbkluZm9BdHRycz17REVTVFJVQ1RPUl9PRkZTRVQ6MCxSRUZDT1VOVF9PRkZTRVQ6NCxUWVBFX09GRlNFVDo4LENBVUdIVF9PRkZTRVQ6MTIsUkVUSFJPV05fT0ZGU0VUOjEzLFNJWkU6MTZ9O2Z1bmN0aW9uIF9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24oc2l6ZSl7cmV0dXJuIF9tYWxsb2Moc2l6ZStFeGNlcHRpb25JbmZvQXR0cnMuU0laRSkrRXhjZXB0aW9uSW5mb0F0dHJzLlNJWkV9ZnVuY3Rpb24gRXhjZXB0aW9uSW5mbyhleGNQdHIpe3RoaXMuZXhjUHRyPWV4Y1B0cjt0aGlzLnB0cj1leGNQdHItRXhjZXB0aW9uSW5mb0F0dHJzLlNJWkU7dGhpcy5zZXRfdHlwZT1mdW5jdGlvbih0eXBlKXtIRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlRZUEVfT0ZGU0VUPj4yXT10eXBlfTt0aGlzLmdldF90eXBlPWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuVFlQRV9PRkZTRVQ+PjJdfTt0aGlzLnNldF9kZXN0cnVjdG9yPWZ1bmN0aW9uKGRlc3RydWN0b3Ipe0hFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuREVTVFJVQ1RPUl9PRkZTRVQ+PjJdPWRlc3RydWN0b3J9O3RoaXMuZ2V0X2Rlc3RydWN0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5ERVNUUlVDVE9SX09GRlNFVD4+Ml19O3RoaXMuc2V0X3JlZmNvdW50PWZ1bmN0aW9uKHJlZmNvdW50KXtIRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlJFRkNPVU5UX09GRlNFVD4+Ml09cmVmY291bnR9O3RoaXMuc2V0X2NhdWdodD1mdW5jdGlvbihjYXVnaHQpe2NhdWdodD1jYXVnaHQ/MTowO0hFQVA4W3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5DQVVHSFRfT0ZGU0VUPj4wXT1jYXVnaHR9O3RoaXMuZ2V0X2NhdWdodD1mdW5jdGlvbigpe3JldHVybiBIRUFQOFt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuQ0FVR0hUX09GRlNFVD4+MF0hPTB9O3RoaXMuc2V0X3JldGhyb3duPWZ1bmN0aW9uKHJldGhyb3duKXtyZXRocm93bj1yZXRocm93bj8xOjA7SEVBUDhbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlJFVEhST1dOX09GRlNFVD4+MF09cmV0aHJvd259O3RoaXMuZ2V0X3JldGhyb3duPWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVA4W3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5SRVRIUk9XTl9PRkZTRVQ+PjBdIT0wfTt0aGlzLmluaXQ9ZnVuY3Rpb24odHlwZSxkZXN0cnVjdG9yKXt0aGlzLnNldF90eXBlKHR5cGUpO3RoaXMuc2V0X2Rlc3RydWN0b3IoZGVzdHJ1Y3Rvcik7dGhpcy5zZXRfcmVmY291bnQoMCk7dGhpcy5zZXRfY2F1Z2h0KGZhbHNlKTt0aGlzLnNldF9yZXRocm93bihmYWxzZSl9O3RoaXMuYWRkX3JlZj1mdW5jdGlvbigpe3ZhciB2YWx1ZT1IRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlJFRkNPVU5UX09GRlNFVD4+Ml07SEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5SRUZDT1VOVF9PRkZTRVQ+PjJdPXZhbHVlKzF9O3RoaXMucmVsZWFzZV9yZWY9ZnVuY3Rpb24oKXt2YXIgcHJldj1IRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlJFRkNPVU5UX09GRlNFVD4+Ml07SEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5SRUZDT1VOVF9PRkZTRVQ+PjJdPXByZXYtMTtyZXR1cm4gcHJldj09PTF9fXZhciBleGNlcHRpb25MYXN0PTA7dmFyIHVuY2F1Z2h0RXhjZXB0aW9uQ291bnQ9MDtmdW5jdGlvbiBfX19jeGFfdGhyb3cocHRyLHR5cGUsZGVzdHJ1Y3Rvcil7dmFyIGluZm89bmV3IEV4Y2VwdGlvbkluZm8ocHRyKTtpbmZvLmluaXQodHlwZSxkZXN0cnVjdG9yKTtleGNlcHRpb25MYXN0PXB0cjt1bmNhdWdodEV4Y2VwdGlvbkNvdW50Kys7dGhyb3cgcHRyfWZ1bmN0aW9uIGdldFNoaWZ0RnJvbVNpemUoc2l6ZSl7c3dpdGNoKHNpemUpe2Nhc2UgMTpyZXR1cm4gMDtjYXNlIDI6cmV0dXJuIDE7Y2FzZSA0OnJldHVybiAyO2Nhc2UgODpyZXR1cm4gMztkZWZhdWx0OnRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIHR5cGUgc2l6ZTogXCIrc2l6ZSl9fWZ1bmN0aW9uIGVtYmluZF9pbml0X2NoYXJDb2Rlcygpe3ZhciBjb2Rlcz1uZXcgQXJyYXkoMjU2KTtmb3IodmFyIGk9MDtpPDI1NjsrK2kpe2NvZGVzW2ldPVN0cmluZy5mcm9tQ2hhckNvZGUoaSl9ZW1iaW5kX2NoYXJDb2Rlcz1jb2Rlc312YXIgZW1iaW5kX2NoYXJDb2Rlcz11bmRlZmluZWQ7ZnVuY3Rpb24gcmVhZExhdGluMVN0cmluZyhwdHIpe3ZhciByZXQ9XCJcIjt2YXIgYz1wdHI7d2hpbGUoSEVBUFU4W2NdKXtyZXQrPWVtYmluZF9jaGFyQ29kZXNbSEVBUFU4W2MrK11dfXJldHVybiByZXR9dmFyIGF3YWl0aW5nRGVwZW5kZW5jaWVzPXt9O3ZhciByZWdpc3RlcmVkVHlwZXM9e307dmFyIHR5cGVEZXBlbmRlbmNpZXM9e307dmFyIGNoYXJfMD00ODt2YXIgY2hhcl85PTU3O2Z1bmN0aW9uIG1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKXtpZih1bmRlZmluZWQ9PT1uYW1lKXtyZXR1cm5cIl91bmtub3duXCJ9bmFtZT1uYW1lLnJlcGxhY2UoL1teYS16QS1aMC05X10vZyxcIiRcIik7dmFyIGY9bmFtZS5jaGFyQ29kZUF0KDApO2lmKGY+PWNoYXJfMCYmZjw9Y2hhcl85KXtyZXR1cm5cIl9cIituYW1lfWVsc2V7cmV0dXJuIG5hbWV9fWZ1bmN0aW9uIGNyZWF0ZU5hbWVkRnVuY3Rpb24obmFtZSxib2R5KXtuYW1lPW1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKTtyZXR1cm4gbmV3IEZ1bmN0aW9uKFwiYm9keVwiLFwicmV0dXJuIGZ1bmN0aW9uIFwiK25hbWUrXCIoKSB7XFxuXCIrJyAgICBcInVzZSBzdHJpY3RcIjsnK1wiICAgIHJldHVybiBib2R5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuXCIrXCJ9O1xcblwiKShib2R5KX1mdW5jdGlvbiBleHRlbmRFcnJvcihiYXNlRXJyb3JUeXBlLGVycm9yTmFtZSl7dmFyIGVycm9yQ2xhc3M9Y3JlYXRlTmFtZWRGdW5jdGlvbihlcnJvck5hbWUsZnVuY3Rpb24obWVzc2FnZSl7dGhpcy5uYW1lPWVycm9yTmFtZTt0aGlzLm1lc3NhZ2U9bWVzc2FnZTt2YXIgc3RhY2s9bmV3IEVycm9yKG1lc3NhZ2UpLnN0YWNrO2lmKHN0YWNrIT09dW5kZWZpbmVkKXt0aGlzLnN0YWNrPXRoaXMudG9TdHJpbmcoKStcIlxcblwiK3N0YWNrLnJlcGxhY2UoL15FcnJvcig6W15cXG5dKik/XFxuLyxcIlwiKX19KTtlcnJvckNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGJhc2VFcnJvclR5cGUucHJvdG90eXBlKTtlcnJvckNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lcnJvckNsYXNzO2Vycm9yQ2xhc3MucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7aWYodGhpcy5tZXNzYWdlPT09dW5kZWZpbmVkKXtyZXR1cm4gdGhpcy5uYW1lfWVsc2V7cmV0dXJuIHRoaXMubmFtZStcIjogXCIrdGhpcy5tZXNzYWdlfX07cmV0dXJuIGVycm9yQ2xhc3N9dmFyIEJpbmRpbmdFcnJvcj11bmRlZmluZWQ7ZnVuY3Rpb24gdGhyb3dCaW5kaW5nRXJyb3IobWVzc2FnZSl7dGhyb3cgbmV3IEJpbmRpbmdFcnJvcihtZXNzYWdlKX12YXIgSW50ZXJuYWxFcnJvcj11bmRlZmluZWQ7ZnVuY3Rpb24gdGhyb3dJbnRlcm5hbEVycm9yKG1lc3NhZ2Upe3Rocm93IG5ldyBJbnRlcm5hbEVycm9yKG1lc3NhZ2UpfWZ1bmN0aW9uIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKG15VHlwZXMsZGVwZW5kZW50VHlwZXMsZ2V0VHlwZUNvbnZlcnRlcnMpe215VHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKXt0eXBlRGVwZW5kZW5jaWVzW3R5cGVdPWRlcGVuZGVudFR5cGVzfSk7ZnVuY3Rpb24gb25Db21wbGV0ZSh0eXBlQ29udmVydGVycyl7dmFyIG15VHlwZUNvbnZlcnRlcnM9Z2V0VHlwZUNvbnZlcnRlcnModHlwZUNvbnZlcnRlcnMpO2lmKG15VHlwZUNvbnZlcnRlcnMubGVuZ3RoIT09bXlUeXBlcy5sZW5ndGgpe3Rocm93SW50ZXJuYWxFcnJvcihcIk1pc21hdGNoZWQgdHlwZSBjb252ZXJ0ZXIgY291bnRcIil9Zm9yKHZhciBpPTA7aTxteVR5cGVzLmxlbmd0aDsrK2kpe3JlZ2lzdGVyVHlwZShteVR5cGVzW2ldLG15VHlwZUNvbnZlcnRlcnNbaV0pfX12YXIgdHlwZUNvbnZlcnRlcnM9bmV3IEFycmF5KGRlcGVuZGVudFR5cGVzLmxlbmd0aCk7dmFyIHVucmVnaXN0ZXJlZFR5cGVzPVtdO3ZhciByZWdpc3RlcmVkPTA7ZGVwZW5kZW50VHlwZXMuZm9yRWFjaChmdW5jdGlvbihkdCxpKXtpZihyZWdpc3RlcmVkVHlwZXMuaGFzT3duUHJvcGVydHkoZHQpKXt0eXBlQ29udmVydGVyc1tpXT1yZWdpc3RlcmVkVHlwZXNbZHRdfWVsc2V7dW5yZWdpc3RlcmVkVHlwZXMucHVzaChkdCk7aWYoIWF3YWl0aW5nRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KGR0KSl7YXdhaXRpbmdEZXBlbmRlbmNpZXNbZHRdPVtdfWF3YWl0aW5nRGVwZW5kZW5jaWVzW2R0XS5wdXNoKGZ1bmN0aW9uKCl7dHlwZUNvbnZlcnRlcnNbaV09cmVnaXN0ZXJlZFR5cGVzW2R0XTsrK3JlZ2lzdGVyZWQ7aWYocmVnaXN0ZXJlZD09PXVucmVnaXN0ZXJlZFR5cGVzLmxlbmd0aCl7b25Db21wbGV0ZSh0eXBlQ29udmVydGVycyl9fSl9fSk7aWYoMD09PXVucmVnaXN0ZXJlZFR5cGVzLmxlbmd0aCl7b25Db21wbGV0ZSh0eXBlQ29udmVydGVycyl9fWZ1bmN0aW9uIHJlZ2lzdGVyVHlwZShyYXdUeXBlLHJlZ2lzdGVyZWRJbnN0YW5jZSxvcHRpb25zKXtvcHRpb25zPW9wdGlvbnN8fHt9O2lmKCEoXCJhcmdQYWNrQWR2YW5jZVwiaW4gcmVnaXN0ZXJlZEluc3RhbmNlKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcInJlZ2lzdGVyVHlwZSByZWdpc3RlcmVkSW5zdGFuY2UgcmVxdWlyZXMgYXJnUGFja0FkdmFuY2VcIil9dmFyIG5hbWU9cmVnaXN0ZXJlZEluc3RhbmNlLm5hbWU7aWYoIXJhd1R5cGUpe3Rocm93QmluZGluZ0Vycm9yKCd0eXBlIFwiJytuYW1lKydcIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyJyl9aWYocmVnaXN0ZXJlZFR5cGVzLmhhc093blByb3BlcnR5KHJhd1R5cGUpKXtpZihvcHRpb25zLmlnbm9yZUR1cGxpY2F0ZVJlZ2lzdHJhdGlvbnMpe3JldHVybn1lbHNle3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHJlZ2lzdGVyIHR5cGUgJ1wiK25hbWUrXCInIHR3aWNlXCIpfX1yZWdpc3RlcmVkVHlwZXNbcmF3VHlwZV09cmVnaXN0ZXJlZEluc3RhbmNlO2RlbGV0ZSB0eXBlRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2lmKGF3YWl0aW5nRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KHJhd1R5cGUpKXt2YXIgY2FsbGJhY2tzPWF3YWl0aW5nRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2RlbGV0ZSBhd2FpdGluZ0RlcGVuZGVuY2llc1tyYXdUeXBlXTtjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbihjYil7Y2IoKX0pfX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9ib29sKHJhd1R5cGUsbmFtZSxzaXplLHRydWVWYWx1ZSxmYWxzZVZhbHVlKXt2YXIgc2hpZnQ9Z2V0U2hpZnRGcm9tU2l6ZShzaXplKTtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHd0KXtyZXR1cm4hIXd0fSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyxvKXtyZXR1cm4gbz90cnVlVmFsdWU6ZmFsc2VWYWx1ZX0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmZ1bmN0aW9uKHBvaW50ZXIpe3ZhciBoZWFwO2lmKHNpemU9PT0xKXtoZWFwPUhFQVA4fWVsc2UgaWYoc2l6ZT09PTIpe2hlYXA9SEVBUDE2fWVsc2UgaWYoc2l6ZT09PTQpe2hlYXA9SEVBUDMyfWVsc2V7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gYm9vbGVhbiB0eXBlIHNpemU6IFwiK25hbWUpfXJldHVybiB0aGlzW1wiZnJvbVdpcmVUeXBlXCJdKGhlYXBbcG9pbnRlcj4+c2hpZnRdKX0sZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX1mdW5jdGlvbiBDbGFzc0hhbmRsZV9pc0FsaWFzT2Yob3RoZXIpe2lmKCEodGhpcyBpbnN0YW5jZW9mIENsYXNzSGFuZGxlKSl7cmV0dXJuIGZhbHNlfWlmKCEob3RoZXIgaW5zdGFuY2VvZiBDbGFzc0hhbmRsZSkpe3JldHVybiBmYWxzZX12YXIgbGVmdENsYXNzPXRoaXMuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7dmFyIGxlZnQ9dGhpcy4kJC5wdHI7dmFyIHJpZ2h0Q2xhc3M9b3RoZXIuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7dmFyIHJpZ2h0PW90aGVyLiQkLnB0cjt3aGlsZShsZWZ0Q2xhc3MuYmFzZUNsYXNzKXtsZWZ0PWxlZnRDbGFzcy51cGNhc3QobGVmdCk7bGVmdENsYXNzPWxlZnRDbGFzcy5iYXNlQ2xhc3N9d2hpbGUocmlnaHRDbGFzcy5iYXNlQ2xhc3Mpe3JpZ2h0PXJpZ2h0Q2xhc3MudXBjYXN0KHJpZ2h0KTtyaWdodENsYXNzPXJpZ2h0Q2xhc3MuYmFzZUNsYXNzfXJldHVybiBsZWZ0Q2xhc3M9PT1yaWdodENsYXNzJiZsZWZ0PT09cmlnaHR9ZnVuY3Rpb24gc2hhbGxvd0NvcHlJbnRlcm5hbFBvaW50ZXIobyl7cmV0dXJue2NvdW50Om8uY291bnQsZGVsZXRlU2NoZWR1bGVkOm8uZGVsZXRlU2NoZWR1bGVkLHByZXNlcnZlUG9pbnRlck9uRGVsZXRlOm8ucHJlc2VydmVQb2ludGVyT25EZWxldGUscHRyOm8ucHRyLHB0clR5cGU6by5wdHJUeXBlLHNtYXJ0UHRyOm8uc21hcnRQdHIsc21hcnRQdHJUeXBlOm8uc21hcnRQdHJUeXBlfX1mdW5jdGlvbiB0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQob2JqKXtmdW5jdGlvbiBnZXRJbnN0YW5jZVR5cGVOYW1lKGhhbmRsZSl7cmV0dXJuIGhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcy5uYW1lfXRocm93QmluZGluZ0Vycm9yKGdldEluc3RhbmNlVHlwZU5hbWUob2JqKStcIiBpbnN0YW5jZSBhbHJlYWR5IGRlbGV0ZWRcIil9dmFyIGZpbmFsaXphdGlvbkdyb3VwPWZhbHNlO2Z1bmN0aW9uIGRldGFjaEZpbmFsaXplcihoYW5kbGUpe31mdW5jdGlvbiBydW5EZXN0cnVjdG9yKCQkKXtpZigkJC5zbWFydFB0cil7JCQuc21hcnRQdHJUeXBlLnJhd0Rlc3RydWN0b3IoJCQuc21hcnRQdHIpfWVsc2V7JCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3MucmF3RGVzdHJ1Y3RvcigkJC5wdHIpfX1mdW5jdGlvbiByZWxlYXNlQ2xhc3NIYW5kbGUoJCQpeyQkLmNvdW50LnZhbHVlLT0xO3ZhciB0b0RlbGV0ZT0wPT09JCQuY291bnQudmFsdWU7aWYodG9EZWxldGUpe3J1bkRlc3RydWN0b3IoJCQpfX1mdW5jdGlvbiBhdHRhY2hGaW5hbGl6ZXIoaGFuZGxlKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIEZpbmFsaXphdGlvbkdyb3VwKXthdHRhY2hGaW5hbGl6ZXI9ZnVuY3Rpb24oaGFuZGxlKXtyZXR1cm4gaGFuZGxlfTtyZXR1cm4gaGFuZGxlfWZpbmFsaXphdGlvbkdyb3VwPW5ldyBGaW5hbGl6YXRpb25Hcm91cChmdW5jdGlvbihpdGVyKXtmb3IodmFyIHJlc3VsdD1pdGVyLm5leHQoKTshcmVzdWx0LmRvbmU7cmVzdWx0PWl0ZXIubmV4dCgpKXt2YXIgJCQ9cmVzdWx0LnZhbHVlO2lmKCEkJC5wdHIpe2NvbnNvbGUud2FybihcIm9iamVjdCBhbHJlYWR5IGRlbGV0ZWQ6IFwiKyQkLnB0cil9ZWxzZXtyZWxlYXNlQ2xhc3NIYW5kbGUoJCQpfX19KTthdHRhY2hGaW5hbGl6ZXI9ZnVuY3Rpb24oaGFuZGxlKXtmaW5hbGl6YXRpb25Hcm91cC5yZWdpc3RlcihoYW5kbGUsaGFuZGxlLiQkLGhhbmRsZS4kJCk7cmV0dXJuIGhhbmRsZX07ZGV0YWNoRmluYWxpemVyPWZ1bmN0aW9uKGhhbmRsZSl7ZmluYWxpemF0aW9uR3JvdXAudW5yZWdpc3RlcihoYW5kbGUuJCQpfTtyZXR1cm4gYXR0YWNoRmluYWxpemVyKGhhbmRsZSl9ZnVuY3Rpb24gQ2xhc3NIYW5kbGVfY2xvbmUoKXtpZighdGhpcy4kJC5wdHIpe3Rocm93SW5zdGFuY2VBbHJlYWR5RGVsZXRlZCh0aGlzKX1pZih0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKXt0aGlzLiQkLmNvdW50LnZhbHVlKz0xO3JldHVybiB0aGlzfWVsc2V7dmFyIGNsb25lPWF0dGFjaEZpbmFsaXplcihPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSx7JCQ6e3ZhbHVlOnNoYWxsb3dDb3B5SW50ZXJuYWxQb2ludGVyKHRoaXMuJCQpfX0pKTtjbG9uZS4kJC5jb3VudC52YWx1ZSs9MTtjbG9uZS4kJC5kZWxldGVTY2hlZHVsZWQ9ZmFsc2U7cmV0dXJuIGNsb25lfX1mdW5jdGlvbiBDbGFzc0hhbmRsZV9kZWxldGUoKXtpZighdGhpcy4kJC5wdHIpe3Rocm93SW5zdGFuY2VBbHJlYWR5RGVsZXRlZCh0aGlzKX1pZih0aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZCYmIXRoaXMuJCQucHJlc2VydmVQb2ludGVyT25EZWxldGUpe3Rocm93QmluZGluZ0Vycm9yKFwiT2JqZWN0IGFscmVhZHkgc2NoZWR1bGVkIGZvciBkZWxldGlvblwiKX1kZXRhY2hGaW5hbGl6ZXIodGhpcyk7cmVsZWFzZUNsYXNzSGFuZGxlKHRoaXMuJCQpO2lmKCF0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKXt0aGlzLiQkLnNtYXJ0UHRyPXVuZGVmaW5lZDt0aGlzLiQkLnB0cj11bmRlZmluZWR9fWZ1bmN0aW9uIENsYXNzSGFuZGxlX2lzRGVsZXRlZCgpe3JldHVybiF0aGlzLiQkLnB0cn12YXIgZGVsYXlGdW5jdGlvbj11bmRlZmluZWQ7dmFyIGRlbGV0aW9uUXVldWU9W107ZnVuY3Rpb24gZmx1c2hQZW5kaW5nRGVsZXRlcygpe3doaWxlKGRlbGV0aW9uUXVldWUubGVuZ3RoKXt2YXIgb2JqPWRlbGV0aW9uUXVldWUucG9wKCk7b2JqLiQkLmRlbGV0ZVNjaGVkdWxlZD1mYWxzZTtvYmpbXCJkZWxldGVcIl0oKX19ZnVuY3Rpb24gQ2xhc3NIYW5kbGVfZGVsZXRlTGF0ZXIoKXtpZighdGhpcy4kJC5wdHIpe3Rocm93SW5zdGFuY2VBbHJlYWR5RGVsZXRlZCh0aGlzKX1pZih0aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZCYmIXRoaXMuJCQucHJlc2VydmVQb2ludGVyT25EZWxldGUpe3Rocm93QmluZGluZ0Vycm9yKFwiT2JqZWN0IGFscmVhZHkgc2NoZWR1bGVkIGZvciBkZWxldGlvblwiKX1kZWxldGlvblF1ZXVlLnB1c2godGhpcyk7aWYoZGVsZXRpb25RdWV1ZS5sZW5ndGg9PT0xJiZkZWxheUZ1bmN0aW9uKXtkZWxheUZ1bmN0aW9uKGZsdXNoUGVuZGluZ0RlbGV0ZXMpfXRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkPXRydWU7cmV0dXJuIHRoaXN9ZnVuY3Rpb24gaW5pdF9DbGFzc0hhbmRsZSgpe0NsYXNzSGFuZGxlLnByb3RvdHlwZVtcImlzQWxpYXNPZlwiXT1DbGFzc0hhbmRsZV9pc0FsaWFzT2Y7Q2xhc3NIYW5kbGUucHJvdG90eXBlW1wiY2xvbmVcIl09Q2xhc3NIYW5kbGVfY2xvbmU7Q2xhc3NIYW5kbGUucHJvdG90eXBlW1wiZGVsZXRlXCJdPUNsYXNzSGFuZGxlX2RlbGV0ZTtDbGFzc0hhbmRsZS5wcm90b3R5cGVbXCJpc0RlbGV0ZWRcIl09Q2xhc3NIYW5kbGVfaXNEZWxldGVkO0NsYXNzSGFuZGxlLnByb3RvdHlwZVtcImRlbGV0ZUxhdGVyXCJdPUNsYXNzSGFuZGxlX2RlbGV0ZUxhdGVyfWZ1bmN0aW9uIENsYXNzSGFuZGxlKCl7fXZhciByZWdpc3RlcmVkUG9pbnRlcnM9e307ZnVuY3Rpb24gZW5zdXJlT3ZlcmxvYWRUYWJsZShwcm90byxtZXRob2ROYW1lLGh1bWFuTmFtZSl7aWYodW5kZWZpbmVkPT09cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZSl7dmFyIHByZXZGdW5jPXByb3RvW21ldGhvZE5hbWVdO3Byb3RvW21ldGhvZE5hbWVdPWZ1bmN0aW9uKCl7aWYoIXByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUuaGFzT3duUHJvcGVydHkoYXJndW1lbnRzLmxlbmd0aCkpe3Rocm93QmluZGluZ0Vycm9yKFwiRnVuY3Rpb24gJ1wiK2h1bWFuTmFtZStcIicgY2FsbGVkIHdpdGggYW4gaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzIChcIithcmd1bWVudHMubGVuZ3RoK1wiKSAtIGV4cGVjdHMgb25lIG9mIChcIitwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlK1wiKSFcIil9cmV0dXJuIHByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJndW1lbnRzLmxlbmd0aF0uYXBwbHkodGhpcyxhcmd1bWVudHMpfTtwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlPVtdO3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbcHJldkZ1bmMuYXJnQ291bnRdPXByZXZGdW5jfX1mdW5jdGlvbiBleHBvc2VQdWJsaWNTeW1ib2wobmFtZSx2YWx1ZSxudW1Bcmd1bWVudHMpe2lmKE1vZHVsZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSl7aWYodW5kZWZpbmVkPT09bnVtQXJndW1lbnRzfHx1bmRlZmluZWQhPT1Nb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZSYmdW5kZWZpbmVkIT09TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGVbbnVtQXJndW1lbnRzXSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcmVnaXN0ZXIgcHVibGljIG5hbWUgJ1wiK25hbWUrXCInIHR3aWNlXCIpfWVuc3VyZU92ZXJsb2FkVGFibGUoTW9kdWxlLG5hbWUsbmFtZSk7aWYoTW9kdWxlLmhhc093blByb3BlcnR5KG51bUFyZ3VtZW50cykpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHJlZ2lzdGVyIG11bHRpcGxlIG92ZXJsb2FkcyBvZiBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyAoXCIrbnVtQXJndW1lbnRzK1wiKSFcIil9TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGVbbnVtQXJndW1lbnRzXT12YWx1ZX1lbHNle01vZHVsZVtuYW1lXT12YWx1ZTtpZih1bmRlZmluZWQhPT1udW1Bcmd1bWVudHMpe01vZHVsZVtuYW1lXS5udW1Bcmd1bWVudHM9bnVtQXJndW1lbnRzfX19ZnVuY3Rpb24gUmVnaXN0ZXJlZENsYXNzKG5hbWUsY29uc3RydWN0b3IsaW5zdGFuY2VQcm90b3R5cGUscmF3RGVzdHJ1Y3RvcixiYXNlQ2xhc3MsZ2V0QWN0dWFsVHlwZSx1cGNhc3QsZG93bmNhc3Qpe3RoaXMubmFtZT1uYW1lO3RoaXMuY29uc3RydWN0b3I9Y29uc3RydWN0b3I7dGhpcy5pbnN0YW5jZVByb3RvdHlwZT1pbnN0YW5jZVByb3RvdHlwZTt0aGlzLnJhd0Rlc3RydWN0b3I9cmF3RGVzdHJ1Y3Rvcjt0aGlzLmJhc2VDbGFzcz1iYXNlQ2xhc3M7dGhpcy5nZXRBY3R1YWxUeXBlPWdldEFjdHVhbFR5cGU7dGhpcy51cGNhc3Q9dXBjYXN0O3RoaXMuZG93bmNhc3Q9ZG93bmNhc3Q7dGhpcy5wdXJlVmlydHVhbEZ1bmN0aW9ucz1bXX1mdW5jdGlvbiB1cGNhc3RQb2ludGVyKHB0cixwdHJDbGFzcyxkZXNpcmVkQ2xhc3Mpe3doaWxlKHB0ckNsYXNzIT09ZGVzaXJlZENsYXNzKXtpZighcHRyQ2xhc3MudXBjYXN0KXt0aHJvd0JpbmRpbmdFcnJvcihcIkV4cGVjdGVkIG51bGwgb3IgaW5zdGFuY2Ugb2YgXCIrZGVzaXJlZENsYXNzLm5hbWUrXCIsIGdvdCBhbiBpbnN0YW5jZSBvZiBcIitwdHJDbGFzcy5uYW1lKX1wdHI9cHRyQ2xhc3MudXBjYXN0KHB0cik7cHRyQ2xhc3M9cHRyQ2xhc3MuYmFzZUNsYXNzfXJldHVybiBwdHJ9ZnVuY3Rpb24gY29uc3ROb1NtYXJ0UHRyUmF3UG9pbnRlclRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsaGFuZGxlKXtpZihoYW5kbGU9PT1udWxsKXtpZih0aGlzLmlzUmVmZXJlbmNlKXt0aHJvd0JpbmRpbmdFcnJvcihcIm51bGwgaXMgbm90IGEgdmFsaWQgXCIrdGhpcy5uYW1lKX1yZXR1cm4gMH1pZighaGFuZGxlLiQkKXt0aHJvd0JpbmRpbmdFcnJvcignQ2Fubm90IHBhc3MgXCInK19lbWJpbmRfcmVwcihoYW5kbGUpKydcIiBhcyBhICcrdGhpcy5uYW1lKX1pZighaGFuZGxlLiQkLnB0cil7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSBcIit0aGlzLm5hbWUpfXZhciBoYW5kbGVDbGFzcz1oYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7dmFyIHB0cj11cGNhc3RQb2ludGVyKGhhbmRsZS4kJC5wdHIsaGFuZGxlQ2xhc3MsdGhpcy5yZWdpc3RlcmVkQ2xhc3MpO3JldHVybiBwdHJ9ZnVuY3Rpb24gZ2VuZXJpY1BvaW50ZXJUb1dpcmVUeXBlKGRlc3RydWN0b3JzLGhhbmRsZSl7dmFyIHB0cjtpZihoYW5kbGU9PT1udWxsKXtpZih0aGlzLmlzUmVmZXJlbmNlKXt0aHJvd0JpbmRpbmdFcnJvcihcIm51bGwgaXMgbm90IGEgdmFsaWQgXCIrdGhpcy5uYW1lKX1pZih0aGlzLmlzU21hcnRQb2ludGVyKXtwdHI9dGhpcy5yYXdDb25zdHJ1Y3RvcigpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaCh0aGlzLnJhd0Rlc3RydWN0b3IscHRyKX1yZXR1cm4gcHRyfWVsc2V7cmV0dXJuIDB9fWlmKCFoYW5kbGUuJCQpe3Rocm93QmluZGluZ0Vycm9yKCdDYW5ub3QgcGFzcyBcIicrX2VtYmluZF9yZXByKGhhbmRsZSkrJ1wiIGFzIGEgJyt0aGlzLm5hbWUpfWlmKCFoYW5kbGUuJCQucHRyKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlIFwiK3RoaXMubmFtZSl9aWYoIXRoaXMuaXNDb25zdCYmaGFuZGxlLiQkLnB0clR5cGUuaXNDb25zdCl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlIFwiKyhoYW5kbGUuJCQuc21hcnRQdHJUeXBlP2hhbmRsZS4kJC5zbWFydFB0clR5cGUubmFtZTpoYW5kbGUuJCQucHRyVHlwZS5uYW1lKStcIiB0byBwYXJhbWV0ZXIgdHlwZSBcIit0aGlzLm5hbWUpfXZhciBoYW5kbGVDbGFzcz1oYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7cHRyPXVwY2FzdFBvaW50ZXIoaGFuZGxlLiQkLnB0cixoYW5kbGVDbGFzcyx0aGlzLnJlZ2lzdGVyZWRDbGFzcyk7aWYodGhpcy5pc1NtYXJ0UG9pbnRlcil7aWYodW5kZWZpbmVkPT09aGFuZGxlLiQkLnNtYXJ0UHRyKXt0aHJvd0JpbmRpbmdFcnJvcihcIlBhc3NpbmcgcmF3IHBvaW50ZXIgdG8gc21hcnQgcG9pbnRlciBpcyBpbGxlZ2FsXCIpfXN3aXRjaCh0aGlzLnNoYXJpbmdQb2xpY3kpe2Nhc2UgMDppZihoYW5kbGUuJCQuc21hcnRQdHJUeXBlPT09dGhpcyl7cHRyPWhhbmRsZS4kJC5zbWFydFB0cn1lbHNle3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSBcIisoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZT9oYW5kbGUuJCQuc21hcnRQdHJUeXBlLm5hbWU6aGFuZGxlLiQkLnB0clR5cGUubmFtZSkrXCIgdG8gcGFyYW1ldGVyIHR5cGUgXCIrdGhpcy5uYW1lKX1icmVhaztjYXNlIDE6cHRyPWhhbmRsZS4kJC5zbWFydFB0cjticmVhaztjYXNlIDI6aWYoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZT09PXRoaXMpe3B0cj1oYW5kbGUuJCQuc21hcnRQdHJ9ZWxzZXt2YXIgY2xvbmVkSGFuZGxlPWhhbmRsZVtcImNsb25lXCJdKCk7cHRyPXRoaXMucmF3U2hhcmUocHRyLF9fZW12YWxfcmVnaXN0ZXIoZnVuY3Rpb24oKXtjbG9uZWRIYW5kbGVbXCJkZWxldGVcIl0oKX0pKTtpZihkZXN0cnVjdG9ycyE9PW51bGwpe2Rlc3RydWN0b3JzLnB1c2godGhpcy5yYXdEZXN0cnVjdG9yLHB0cil9fWJyZWFrO2RlZmF1bHQ6dGhyb3dCaW5kaW5nRXJyb3IoXCJVbnN1cHBvcnRpbmcgc2hhcmluZyBwb2xpY3lcIil9fXJldHVybiBwdHJ9ZnVuY3Rpb24gbm9uQ29uc3ROb1NtYXJ0UHRyUmF3UG9pbnRlclRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsaGFuZGxlKXtpZihoYW5kbGU9PT1udWxsKXtpZih0aGlzLmlzUmVmZXJlbmNlKXt0aHJvd0JpbmRpbmdFcnJvcihcIm51bGwgaXMgbm90IGEgdmFsaWQgXCIrdGhpcy5uYW1lKX1yZXR1cm4gMH1pZighaGFuZGxlLiQkKXt0aHJvd0JpbmRpbmdFcnJvcignQ2Fubm90IHBhc3MgXCInK19lbWJpbmRfcmVwcihoYW5kbGUpKydcIiBhcyBhICcrdGhpcy5uYW1lKX1pZighaGFuZGxlLiQkLnB0cil7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSBcIit0aGlzLm5hbWUpfWlmKGhhbmRsZS4kJC5wdHJUeXBlLmlzQ29uc3Qpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSBcIitoYW5kbGUuJCQucHRyVHlwZS5uYW1lK1wiIHRvIHBhcmFtZXRlciB0eXBlIFwiK3RoaXMubmFtZSl9dmFyIGhhbmRsZUNsYXNzPWhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczt2YXIgcHRyPXVwY2FzdFBvaW50ZXIoaGFuZGxlLiQkLnB0cixoYW5kbGVDbGFzcyx0aGlzLnJlZ2lzdGVyZWRDbGFzcyk7cmV0dXJuIHB0cn1mdW5jdGlvbiBzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gdGhpc1tcImZyb21XaXJlVHlwZVwiXShIRUFQVTMyW3BvaW50ZXI+PjJdKX1mdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9nZXRQb2ludGVlKHB0cil7aWYodGhpcy5yYXdHZXRQb2ludGVlKXtwdHI9dGhpcy5yYXdHZXRQb2ludGVlKHB0cil9cmV0dXJuIHB0cn1mdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9kZXN0cnVjdG9yKHB0cil7aWYodGhpcy5yYXdEZXN0cnVjdG9yKXt0aGlzLnJhd0Rlc3RydWN0b3IocHRyKX19ZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXJfZGVsZXRlT2JqZWN0KGhhbmRsZSl7aWYoaGFuZGxlIT09bnVsbCl7aGFuZGxlW1wiZGVsZXRlXCJdKCl9fWZ1bmN0aW9uIGRvd25jYXN0UG9pbnRlcihwdHIscHRyQ2xhc3MsZGVzaXJlZENsYXNzKXtpZihwdHJDbGFzcz09PWRlc2lyZWRDbGFzcyl7cmV0dXJuIHB0cn1pZih1bmRlZmluZWQ9PT1kZXNpcmVkQ2xhc3MuYmFzZUNsYXNzKXtyZXR1cm4gbnVsbH12YXIgcnY9ZG93bmNhc3RQb2ludGVyKHB0cixwdHJDbGFzcyxkZXNpcmVkQ2xhc3MuYmFzZUNsYXNzKTtpZihydj09PW51bGwpe3JldHVybiBudWxsfXJldHVybiBkZXNpcmVkQ2xhc3MuZG93bmNhc3QocnYpfWZ1bmN0aW9uIGdldEluaGVyaXRlZEluc3RhbmNlQ291bnQoKXtyZXR1cm4gT2JqZWN0LmtleXMocmVnaXN0ZXJlZEluc3RhbmNlcykubGVuZ3RofWZ1bmN0aW9uIGdldExpdmVJbmhlcml0ZWRJbnN0YW5jZXMoKXt2YXIgcnY9W107Zm9yKHZhciBrIGluIHJlZ2lzdGVyZWRJbnN0YW5jZXMpe2lmKHJlZ2lzdGVyZWRJbnN0YW5jZXMuaGFzT3duUHJvcGVydHkoaykpe3J2LnB1c2gocmVnaXN0ZXJlZEluc3RhbmNlc1trXSl9fXJldHVybiBydn1mdW5jdGlvbiBzZXREZWxheUZ1bmN0aW9uKGZuKXtkZWxheUZ1bmN0aW9uPWZuO2lmKGRlbGV0aW9uUXVldWUubGVuZ3RoJiZkZWxheUZ1bmN0aW9uKXtkZWxheUZ1bmN0aW9uKGZsdXNoUGVuZGluZ0RlbGV0ZXMpfX1mdW5jdGlvbiBpbml0X2VtYmluZCgpe01vZHVsZVtcImdldEluaGVyaXRlZEluc3RhbmNlQ291bnRcIl09Z2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudDtNb2R1bGVbXCJnZXRMaXZlSW5oZXJpdGVkSW5zdGFuY2VzXCJdPWdldExpdmVJbmhlcml0ZWRJbnN0YW5jZXM7TW9kdWxlW1wiZmx1c2hQZW5kaW5nRGVsZXRlc1wiXT1mbHVzaFBlbmRpbmdEZWxldGVzO01vZHVsZVtcInNldERlbGF5RnVuY3Rpb25cIl09c2V0RGVsYXlGdW5jdGlvbn12YXIgcmVnaXN0ZXJlZEluc3RhbmNlcz17fTtmdW5jdGlvbiBnZXRCYXNlc3RQb2ludGVyKGNsYXNzXyxwdHIpe2lmKHB0cj09PXVuZGVmaW5lZCl7dGhyb3dCaW5kaW5nRXJyb3IoXCJwdHIgc2hvdWxkIG5vdCBiZSB1bmRlZmluZWRcIil9d2hpbGUoY2xhc3NfLmJhc2VDbGFzcyl7cHRyPWNsYXNzXy51cGNhc3QocHRyKTtjbGFzc189Y2xhc3NfLmJhc2VDbGFzc31yZXR1cm4gcHRyfWZ1bmN0aW9uIGdldEluaGVyaXRlZEluc3RhbmNlKGNsYXNzXyxwdHIpe3B0cj1nZXRCYXNlc3RQb2ludGVyKGNsYXNzXyxwdHIpO3JldHVybiByZWdpc3RlcmVkSW5zdGFuY2VzW3B0cl19ZnVuY3Rpb24gbWFrZUNsYXNzSGFuZGxlKHByb3RvdHlwZSxyZWNvcmQpe2lmKCFyZWNvcmQucHRyVHlwZXx8IXJlY29yZC5wdHIpe3Rocm93SW50ZXJuYWxFcnJvcihcIm1ha2VDbGFzc0hhbmRsZSByZXF1aXJlcyBwdHIgYW5kIHB0clR5cGVcIil9dmFyIGhhc1NtYXJ0UHRyVHlwZT0hIXJlY29yZC5zbWFydFB0clR5cGU7dmFyIGhhc1NtYXJ0UHRyPSEhcmVjb3JkLnNtYXJ0UHRyO2lmKGhhc1NtYXJ0UHRyVHlwZSE9PWhhc1NtYXJ0UHRyKXt0aHJvd0ludGVybmFsRXJyb3IoXCJCb3RoIHNtYXJ0UHRyVHlwZSBhbmQgc21hcnRQdHIgbXVzdCBiZSBzcGVjaWZpZWRcIil9cmVjb3JkLmNvdW50PXt2YWx1ZToxfTtyZXR1cm4gYXR0YWNoRmluYWxpemVyKE9iamVjdC5jcmVhdGUocHJvdG90eXBlLHskJDp7dmFsdWU6cmVjb3JkfX0pKX1mdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9mcm9tV2lyZVR5cGUocHRyKXt2YXIgcmF3UG9pbnRlcj10aGlzLmdldFBvaW50ZWUocHRyKTtpZighcmF3UG9pbnRlcil7dGhpcy5kZXN0cnVjdG9yKHB0cik7cmV0dXJuIG51bGx9dmFyIHJlZ2lzdGVyZWRJbnN0YW5jZT1nZXRJbmhlcml0ZWRJbnN0YW5jZSh0aGlzLnJlZ2lzdGVyZWRDbGFzcyxyYXdQb2ludGVyKTtpZih1bmRlZmluZWQhPT1yZWdpc3RlcmVkSW5zdGFuY2Upe2lmKDA9PT1yZWdpc3RlcmVkSW5zdGFuY2UuJCQuY291bnQudmFsdWUpe3JlZ2lzdGVyZWRJbnN0YW5jZS4kJC5wdHI9cmF3UG9pbnRlcjtyZWdpc3RlcmVkSW5zdGFuY2UuJCQuc21hcnRQdHI9cHRyO3JldHVybiByZWdpc3RlcmVkSW5zdGFuY2VbXCJjbG9uZVwiXSgpfWVsc2V7dmFyIHJ2PXJlZ2lzdGVyZWRJbnN0YW5jZVtcImNsb25lXCJdKCk7dGhpcy5kZXN0cnVjdG9yKHB0cik7cmV0dXJuIHJ2fX1mdW5jdGlvbiBtYWtlRGVmYXVsdEhhbmRsZSgpe2lmKHRoaXMuaXNTbWFydFBvaW50ZXIpe3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodGhpcy5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dGhpcy5wb2ludGVlVHlwZSxwdHI6cmF3UG9pbnRlcixzbWFydFB0clR5cGU6dGhpcyxzbWFydFB0cjpwdHJ9KX1lbHNle3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodGhpcy5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dGhpcyxwdHI6cHRyfSl9fXZhciBhY3R1YWxUeXBlPXRoaXMucmVnaXN0ZXJlZENsYXNzLmdldEFjdHVhbFR5cGUocmF3UG9pbnRlcik7dmFyIHJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkPXJlZ2lzdGVyZWRQb2ludGVyc1thY3R1YWxUeXBlXTtpZighcmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQpe3JldHVybiBtYWtlRGVmYXVsdEhhbmRsZS5jYWxsKHRoaXMpfXZhciB0b1R5cGU7aWYodGhpcy5pc0NvbnN0KXt0b1R5cGU9cmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQuY29uc3RQb2ludGVyVHlwZX1lbHNle3RvVHlwZT1yZWdpc3RlcmVkUG9pbnRlclJlY29yZC5wb2ludGVyVHlwZX12YXIgZHA9ZG93bmNhc3RQb2ludGVyKHJhd1BvaW50ZXIsdGhpcy5yZWdpc3RlcmVkQ2xhc3MsdG9UeXBlLnJlZ2lzdGVyZWRDbGFzcyk7aWYoZHA9PT1udWxsKXtyZXR1cm4gbWFrZURlZmF1bHRIYW5kbGUuY2FsbCh0aGlzKX1pZih0aGlzLmlzU21hcnRQb2ludGVyKXtyZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRvVHlwZS5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dG9UeXBlLHB0cjpkcCxzbWFydFB0clR5cGU6dGhpcyxzbWFydFB0cjpwdHJ9KX1lbHNle3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodG9UeXBlLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSx7cHRyVHlwZTp0b1R5cGUscHRyOmRwfSl9fWZ1bmN0aW9uIGluaXRfUmVnaXN0ZXJlZFBvaW50ZXIoKXtSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGUuZ2V0UG9pbnRlZT1SZWdpc3RlcmVkUG9pbnRlcl9nZXRQb2ludGVlO1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZS5kZXN0cnVjdG9yPVJlZ2lzdGVyZWRQb2ludGVyX2Rlc3RydWN0b3I7UmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlW1wiYXJnUGFja0FkdmFuY2VcIl09ODtSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGVbXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiXT1zaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcjtSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGVbXCJkZWxldGVPYmplY3RcIl09UmVnaXN0ZXJlZFBvaW50ZXJfZGVsZXRlT2JqZWN0O1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVtcImZyb21XaXJlVHlwZVwiXT1SZWdpc3RlcmVkUG9pbnRlcl9mcm9tV2lyZVR5cGV9ZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXIobmFtZSxyZWdpc3RlcmVkQ2xhc3MsaXNSZWZlcmVuY2UsaXNDb25zdCxpc1NtYXJ0UG9pbnRlcixwb2ludGVlVHlwZSxzaGFyaW5nUG9saWN5LHJhd0dldFBvaW50ZWUscmF3Q29uc3RydWN0b3IscmF3U2hhcmUscmF3RGVzdHJ1Y3Rvcil7dGhpcy5uYW1lPW5hbWU7dGhpcy5yZWdpc3RlcmVkQ2xhc3M9cmVnaXN0ZXJlZENsYXNzO3RoaXMuaXNSZWZlcmVuY2U9aXNSZWZlcmVuY2U7dGhpcy5pc0NvbnN0PWlzQ29uc3Q7dGhpcy5pc1NtYXJ0UG9pbnRlcj1pc1NtYXJ0UG9pbnRlcjt0aGlzLnBvaW50ZWVUeXBlPXBvaW50ZWVUeXBlO3RoaXMuc2hhcmluZ1BvbGljeT1zaGFyaW5nUG9saWN5O3RoaXMucmF3R2V0UG9pbnRlZT1yYXdHZXRQb2ludGVlO3RoaXMucmF3Q29uc3RydWN0b3I9cmF3Q29uc3RydWN0b3I7dGhpcy5yYXdTaGFyZT1yYXdTaGFyZTt0aGlzLnJhd0Rlc3RydWN0b3I9cmF3RGVzdHJ1Y3RvcjtpZighaXNTbWFydFBvaW50ZXImJnJlZ2lzdGVyZWRDbGFzcy5iYXNlQ2xhc3M9PT11bmRlZmluZWQpe2lmKGlzQ29uc3Qpe3RoaXNbXCJ0b1dpcmVUeXBlXCJdPWNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlO3RoaXMuZGVzdHJ1Y3RvckZ1bmN0aW9uPW51bGx9ZWxzZXt0aGlzW1widG9XaXJlVHlwZVwiXT1ub25Db25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZTt0aGlzLmRlc3RydWN0b3JGdW5jdGlvbj1udWxsfX1lbHNle3RoaXNbXCJ0b1dpcmVUeXBlXCJdPWdlbmVyaWNQb2ludGVyVG9XaXJlVHlwZX19ZnVuY3Rpb24gcmVwbGFjZVB1YmxpY1N5bWJvbChuYW1lLHZhbHVlLG51bUFyZ3VtZW50cyl7aWYoIU1vZHVsZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSl7dGhyb3dJbnRlcm5hbEVycm9yKFwiUmVwbGFjaW5nIG5vbmV4aXN0YW50IHB1YmxpYyBzeW1ib2xcIil9aWYodW5kZWZpbmVkIT09TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGUmJnVuZGVmaW5lZCE9PW51bUFyZ3VtZW50cyl7TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGVbbnVtQXJndW1lbnRzXT12YWx1ZX1lbHNle01vZHVsZVtuYW1lXT12YWx1ZTtNb2R1bGVbbmFtZV0uYXJnQ291bnQ9bnVtQXJndW1lbnRzfX1mdW5jdGlvbiBkeW5DYWxsTGVnYWN5KHNpZyxwdHIsYXJncyl7dmFyIGY9TW9kdWxlW1wiZHluQ2FsbF9cIitzaWddO3JldHVybiBhcmdzJiZhcmdzLmxlbmd0aD9mLmFwcGx5KG51bGwsW3B0cl0uY29uY2F0KGFyZ3MpKTpmLmNhbGwobnVsbCxwdHIpfWZ1bmN0aW9uIGR5bkNhbGwoc2lnLHB0cixhcmdzKXtpZihzaWcuaW5kZXhPZihcImpcIikhPS0xKXtyZXR1cm4gZHluQ2FsbExlZ2FjeShzaWcscHRyLGFyZ3MpfXJldHVybiB3YXNtVGFibGUuZ2V0KHB0cikuYXBwbHkobnVsbCxhcmdzKX1mdW5jdGlvbiBnZXREeW5DYWxsZXIoc2lnLHB0cil7dmFyIGFyZ0NhY2hlPVtdO3JldHVybiBmdW5jdGlvbigpe2FyZ0NhY2hlLmxlbmd0aD1hcmd1bWVudHMubGVuZ3RoO2Zvcih2YXIgaT0wO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe2FyZ0NhY2hlW2ldPWFyZ3VtZW50c1tpXX1yZXR1cm4gZHluQ2FsbChzaWcscHRyLGFyZ0NhY2hlKX19ZnVuY3Rpb24gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2lnbmF0dXJlLHJhd0Z1bmN0aW9uKXtzaWduYXR1cmU9cmVhZExhdGluMVN0cmluZyhzaWduYXR1cmUpO2Z1bmN0aW9uIG1ha2VEeW5DYWxsZXIoKXtpZihzaWduYXR1cmUuaW5kZXhPZihcImpcIikhPS0xKXtyZXR1cm4gZ2V0RHluQ2FsbGVyKHNpZ25hdHVyZSxyYXdGdW5jdGlvbil9cmV0dXJuIHdhc21UYWJsZS5nZXQocmF3RnVuY3Rpb24pfXZhciBmcD1tYWtlRHluQ2FsbGVyKCk7aWYodHlwZW9mIGZwIT09XCJmdW5jdGlvblwiKXt0aHJvd0JpbmRpbmdFcnJvcihcInVua25vd24gZnVuY3Rpb24gcG9pbnRlciB3aXRoIHNpZ25hdHVyZSBcIitzaWduYXR1cmUrXCI6IFwiK3Jhd0Z1bmN0aW9uKX1yZXR1cm4gZnB9dmFyIFVuYm91bmRUeXBlRXJyb3I9dW5kZWZpbmVkO2Z1bmN0aW9uIGdldFR5cGVOYW1lKHR5cGUpe3ZhciBwdHI9X19fZ2V0VHlwZU5hbWUodHlwZSk7dmFyIHJ2PXJlYWRMYXRpbjFTdHJpbmcocHRyKTtfZnJlZShwdHIpO3JldHVybiBydn1mdW5jdGlvbiB0aHJvd1VuYm91bmRUeXBlRXJyb3IobWVzc2FnZSx0eXBlcyl7dmFyIHVuYm91bmRUeXBlcz1bXTt2YXIgc2Vlbj17fTtmdW5jdGlvbiB2aXNpdCh0eXBlKXtpZihzZWVuW3R5cGVdKXtyZXR1cm59aWYocmVnaXN0ZXJlZFR5cGVzW3R5cGVdKXtyZXR1cm59aWYodHlwZURlcGVuZGVuY2llc1t0eXBlXSl7dHlwZURlcGVuZGVuY2llc1t0eXBlXS5mb3JFYWNoKHZpc2l0KTtyZXR1cm59dW5ib3VuZFR5cGVzLnB1c2godHlwZSk7c2Vlblt0eXBlXT10cnVlfXR5cGVzLmZvckVhY2godmlzaXQpO3Rocm93IG5ldyBVbmJvdW5kVHlwZUVycm9yKG1lc3NhZ2UrXCI6IFwiK3VuYm91bmRUeXBlcy5tYXAoZ2V0VHlwZU5hbWUpLmpvaW4oW1wiLCBcIl0pKX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzcyhyYXdUeXBlLHJhd1BvaW50ZXJUeXBlLHJhd0NvbnN0UG9pbnRlclR5cGUsYmFzZUNsYXNzUmF3VHlwZSxnZXRBY3R1YWxUeXBlU2lnbmF0dXJlLGdldEFjdHVhbFR5cGUsdXBjYXN0U2lnbmF0dXJlLHVwY2FzdCxkb3duY2FzdFNpZ25hdHVyZSxkb3duY2FzdCxuYW1lLGRlc3RydWN0b3JTaWduYXR1cmUscmF3RGVzdHJ1Y3Rvcil7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO2dldEFjdHVhbFR5cGU9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZ2V0QWN0dWFsVHlwZVNpZ25hdHVyZSxnZXRBY3R1YWxUeXBlKTtpZih1cGNhc3Qpe3VwY2FzdD1lbWJpbmRfX3JlcXVpcmVGdW5jdGlvbih1cGNhc3RTaWduYXR1cmUsdXBjYXN0KX1pZihkb3duY2FzdCl7ZG93bmNhc3Q9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZG93bmNhc3RTaWduYXR1cmUsZG93bmNhc3QpfXJhd0Rlc3RydWN0b3I9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZGVzdHJ1Y3RvclNpZ25hdHVyZSxyYXdEZXN0cnVjdG9yKTt2YXIgbGVnYWxGdW5jdGlvbk5hbWU9bWFrZUxlZ2FsRnVuY3Rpb25OYW1lKG5hbWUpO2V4cG9zZVB1YmxpY1N5bWJvbChsZWdhbEZ1bmN0aW9uTmFtZSxmdW5jdGlvbigpe3Rocm93VW5ib3VuZFR5cGVFcnJvcihcIkNhbm5vdCBjb25zdHJ1Y3QgXCIrbmFtZStcIiBkdWUgdG8gdW5ib3VuZCB0eXBlc1wiLFtiYXNlQ2xhc3NSYXdUeXBlXSl9KTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbcmF3VHlwZSxyYXdQb2ludGVyVHlwZSxyYXdDb25zdFBvaW50ZXJUeXBlXSxiYXNlQ2xhc3NSYXdUeXBlP1tiYXNlQ2xhc3NSYXdUeXBlXTpbXSxmdW5jdGlvbihiYXNlKXtiYXNlPWJhc2VbMF07dmFyIGJhc2VDbGFzczt2YXIgYmFzZVByb3RvdHlwZTtpZihiYXNlQ2xhc3NSYXdUeXBlKXtiYXNlQ2xhc3M9YmFzZS5yZWdpc3RlcmVkQ2xhc3M7YmFzZVByb3RvdHlwZT1iYXNlQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGV9ZWxzZXtiYXNlUHJvdG90eXBlPUNsYXNzSGFuZGxlLnByb3RvdHlwZX12YXIgY29uc3RydWN0b3I9Y3JlYXRlTmFtZWRGdW5jdGlvbihsZWdhbEZ1bmN0aW9uTmFtZSxmdW5jdGlvbigpe2lmKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSE9PWluc3RhbmNlUHJvdG90eXBlKXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKFwiVXNlICduZXcnIHRvIGNvbnN0cnVjdCBcIituYW1lKX1pZih1bmRlZmluZWQ9PT1yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keSl7dGhyb3cgbmV3IEJpbmRpbmdFcnJvcihuYW1lK1wiIGhhcyBubyBhY2Nlc3NpYmxlIGNvbnN0cnVjdG9yXCIpfXZhciBib2R5PXJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ3VtZW50cy5sZW5ndGhdO2lmKHVuZGVmaW5lZD09PWJvZHkpe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IoXCJUcmllZCB0byBpbnZva2UgY3RvciBvZiBcIituYW1lK1wiIHdpdGggaW52YWxpZCBudW1iZXIgb2YgcGFyYW1ldGVycyAoXCIrYXJndW1lbnRzLmxlbmd0aCtcIikgLSBleHBlY3RlZCAoXCIrT2JqZWN0LmtleXMocmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkpLnRvU3RyaW5nKCkrXCIpIHBhcmFtZXRlcnMgaW5zdGVhZCFcIil9cmV0dXJuIGJvZHkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSk7dmFyIGluc3RhbmNlUHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYmFzZVByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmNvbnN0cnVjdG9yfX0pO2NvbnN0cnVjdG9yLnByb3RvdHlwZT1pbnN0YW5jZVByb3RvdHlwZTt2YXIgcmVnaXN0ZXJlZENsYXNzPW5ldyBSZWdpc3RlcmVkQ2xhc3MobmFtZSxjb25zdHJ1Y3RvcixpbnN0YW5jZVByb3RvdHlwZSxyYXdEZXN0cnVjdG9yLGJhc2VDbGFzcyxnZXRBY3R1YWxUeXBlLHVwY2FzdCxkb3duY2FzdCk7dmFyIHJlZmVyZW5jZUNvbnZlcnRlcj1uZXcgUmVnaXN0ZXJlZFBvaW50ZXIobmFtZSxyZWdpc3RlcmVkQ2xhc3MsdHJ1ZSxmYWxzZSxmYWxzZSk7dmFyIHBvaW50ZXJDb252ZXJ0ZXI9bmV3IFJlZ2lzdGVyZWRQb2ludGVyKG5hbWUrXCIqXCIscmVnaXN0ZXJlZENsYXNzLGZhbHNlLGZhbHNlLGZhbHNlKTt2YXIgY29uc3RQb2ludGVyQ29udmVydGVyPW5ldyBSZWdpc3RlcmVkUG9pbnRlcihuYW1lK1wiIGNvbnN0KlwiLHJlZ2lzdGVyZWRDbGFzcyxmYWxzZSx0cnVlLGZhbHNlKTtyZWdpc3RlcmVkUG9pbnRlcnNbcmF3VHlwZV09e3BvaW50ZXJUeXBlOnBvaW50ZXJDb252ZXJ0ZXIsY29uc3RQb2ludGVyVHlwZTpjb25zdFBvaW50ZXJDb252ZXJ0ZXJ9O3JlcGxhY2VQdWJsaWNTeW1ib2wobGVnYWxGdW5jdGlvbk5hbWUsY29uc3RydWN0b3IpO3JldHVybltyZWZlcmVuY2VDb252ZXJ0ZXIscG9pbnRlckNvbnZlcnRlcixjb25zdFBvaW50ZXJDb252ZXJ0ZXJdfSl9ZnVuY3Rpb24gaGVhcDMyVmVjdG9yVG9BcnJheShjb3VudCxmaXJzdEVsZW1lbnQpe3ZhciBhcnJheT1bXTtmb3IodmFyIGk9MDtpPGNvdW50O2krKyl7YXJyYXkucHVzaChIRUFQMzJbKGZpcnN0RWxlbWVudD4+MikraV0pfXJldHVybiBhcnJheX1mdW5jdGlvbiBydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyl7d2hpbGUoZGVzdHJ1Y3RvcnMubGVuZ3RoKXt2YXIgcHRyPWRlc3RydWN0b3JzLnBvcCgpO3ZhciBkZWw9ZGVzdHJ1Y3RvcnMucG9wKCk7ZGVsKHB0cil9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NvbnN0cnVjdG9yKHJhd0NsYXNzVHlwZSxhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIsaW52b2tlclNpZ25hdHVyZSxpbnZva2VyLHJhd0NvbnN0cnVjdG9yKXthc3NlcnQoYXJnQ291bnQ+MCk7dmFyIHJhd0FyZ1R5cGVzPWhlYXAzMlZlY3RvclRvQXJyYXkoYXJnQ291bnQscmF3QXJnVHlwZXNBZGRyKTtpbnZva2VyPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGludm9rZXJTaWduYXR1cmUsaW52b2tlcik7dmFyIGFyZ3M9W3Jhd0NvbnN0cnVjdG9yXTt2YXIgZGVzdHJ1Y3RvcnM9W107d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sW3Jhd0NsYXNzVHlwZV0sZnVuY3Rpb24oY2xhc3NUeXBlKXtjbGFzc1R5cGU9Y2xhc3NUeXBlWzBdO3ZhciBodW1hbk5hbWU9XCJjb25zdHJ1Y3RvciBcIitjbGFzc1R5cGUubmFtZTtpZih1bmRlZmluZWQ9PT1jbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkpe2NsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keT1bXX1pZih1bmRlZmluZWQhPT1jbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJnQ291bnQtMV0pe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcmVnaXN0ZXIgbXVsdGlwbGUgY29uc3RydWN0b3JzIHdpdGggaWRlbnRpY2FsIG51bWJlciBvZiBwYXJhbWV0ZXJzIChcIisoYXJnQ291bnQtMSkrXCIpIGZvciBjbGFzcyAnXCIrY2xhc3NUeXBlLm5hbWUrXCInISBPdmVybG9hZCByZXNvbHV0aW9uIGlzIGN1cnJlbnRseSBvbmx5IHBlcmZvcm1lZCB1c2luZyB0aGUgcGFyYW1ldGVyIGNvdW50LCBub3QgYWN0dWFsIHR5cGUgaW5mbyFcIil9Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50LTFdPWZ1bmN0aW9uIHVuYm91bmRUeXBlSGFuZGxlcigpe3Rocm93VW5ib3VuZFR5cGVFcnJvcihcIkNhbm5vdCBjb25zdHJ1Y3QgXCIrY2xhc3NUeXBlLm5hbWUrXCIgZHVlIHRvIHVuYm91bmQgdHlwZXNcIixyYXdBcmdUeXBlcyl9O3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLHJhd0FyZ1R5cGVzLGZ1bmN0aW9uKGFyZ1R5cGVzKXtjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJnQ291bnQtMV09ZnVuY3Rpb24gY29uc3RydWN0b3JfYm9keSgpe2lmKGFyZ3VtZW50cy5sZW5ndGghPT1hcmdDb3VudC0xKXt0aHJvd0JpbmRpbmdFcnJvcihodW1hbk5hbWUrXCIgY2FsbGVkIHdpdGggXCIrYXJndW1lbnRzLmxlbmd0aCtcIiBhcmd1bWVudHMsIGV4cGVjdGVkIFwiKyhhcmdDb3VudC0xKSl9ZGVzdHJ1Y3RvcnMubGVuZ3RoPTA7YXJncy5sZW5ndGg9YXJnQ291bnQ7Zm9yKHZhciBpPTE7aTxhcmdDb3VudDsrK2kpe2FyZ3NbaV09YXJnVHlwZXNbaV1bXCJ0b1dpcmVUeXBlXCJdKGRlc3RydWN0b3JzLGFyZ3VtZW50c1tpLTFdKX12YXIgcHRyPWludm9rZXIuYXBwbHkobnVsbCxhcmdzKTtydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7cmV0dXJuIGFyZ1R5cGVzWzBdW1wiZnJvbVdpcmVUeXBlXCJdKHB0cil9O3JldHVybltdfSk7cmV0dXJuW119KX1mdW5jdGlvbiBuZXdfKGNvbnN0cnVjdG9yLGFyZ3VtZW50TGlzdCl7aWYoIShjb25zdHJ1Y3RvciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm5ld18gY2FsbGVkIHdpdGggY29uc3RydWN0b3IgdHlwZSBcIit0eXBlb2YgY29uc3RydWN0b3IrXCIgd2hpY2ggaXMgbm90IGEgZnVuY3Rpb25cIil9dmFyIGR1bW15PWNyZWF0ZU5hbWVkRnVuY3Rpb24oY29uc3RydWN0b3IubmFtZXx8XCJ1bmtub3duRnVuY3Rpb25OYW1lXCIsZnVuY3Rpb24oKXt9KTtkdW1teS5wcm90b3R5cGU9Y29uc3RydWN0b3IucHJvdG90eXBlO3ZhciBvYmo9bmV3IGR1bW15O3ZhciByPWNvbnN0cnVjdG9yLmFwcGx5KG9iaixhcmd1bWVudExpc3QpO3JldHVybiByIGluc3RhbmNlb2YgT2JqZWN0P3I6b2JqfWZ1bmN0aW9uIGNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSxhcmdUeXBlcyxjbGFzc1R5cGUsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyl7dmFyIGFyZ0NvdW50PWFyZ1R5cGVzLmxlbmd0aDtpZihhcmdDb3VudDwyKXt0aHJvd0JpbmRpbmdFcnJvcihcImFyZ1R5cGVzIGFycmF5IHNpemUgbWlzbWF0Y2ghIE11c3QgYXQgbGVhc3QgZ2V0IHJldHVybiB2YWx1ZSBhbmQgJ3RoaXMnIHR5cGVzIVwiKX12YXIgaXNDbGFzc01ldGhvZEZ1bmM9YXJnVHlwZXNbMV0hPT1udWxsJiZjbGFzc1R5cGUhPT1udWxsO3ZhciBuZWVkc0Rlc3RydWN0b3JTdGFjaz1mYWxzZTtmb3IodmFyIGk9MTtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe2lmKGFyZ1R5cGVzW2ldIT09bnVsbCYmYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uPT09dW5kZWZpbmVkKXtuZWVkc0Rlc3RydWN0b3JTdGFjaz10cnVlO2JyZWFrfX12YXIgcmV0dXJucz1hcmdUeXBlc1swXS5uYW1lIT09XCJ2b2lkXCI7dmFyIGFyZ3NMaXN0PVwiXCI7dmFyIGFyZ3NMaXN0V2lyZWQ9XCJcIjtmb3IodmFyIGk9MDtpPGFyZ0NvdW50LTI7KytpKXthcmdzTGlzdCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2k7YXJnc0xpc3RXaXJlZCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2krXCJXaXJlZFwifXZhciBpbnZva2VyRm5Cb2R5PVwicmV0dXJuIGZ1bmN0aW9uIFwiK21ha2VMZWdhbEZ1bmN0aW9uTmFtZShodW1hbk5hbWUpK1wiKFwiK2FyZ3NMaXN0K1wiKSB7XFxuXCIrXCJpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gXCIrKGFyZ0NvdW50LTIpK1wiKSB7XFxuXCIrXCJ0aHJvd0JpbmRpbmdFcnJvcignZnVuY3Rpb24gXCIraHVtYW5OYW1lK1wiIGNhbGxlZCB3aXRoICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBhcmd1bWVudHMsIGV4cGVjdGVkIFwiKyhhcmdDb3VudC0yKStcIiBhcmdzIScpO1xcblwiK1wifVxcblwiO2lmKG5lZWRzRGVzdHJ1Y3RvclN0YWNrKXtpbnZva2VyRm5Cb2R5Kz1cInZhciBkZXN0cnVjdG9ycyA9IFtdO1xcblwifXZhciBkdG9yU3RhY2s9bmVlZHNEZXN0cnVjdG9yU3RhY2s/XCJkZXN0cnVjdG9yc1wiOlwibnVsbFwiO3ZhciBhcmdzMT1bXCJ0aHJvd0JpbmRpbmdFcnJvclwiLFwiaW52b2tlclwiLFwiZm5cIixcInJ1bkRlc3RydWN0b3JzXCIsXCJyZXRUeXBlXCIsXCJjbGFzc1BhcmFtXCJdO3ZhciBhcmdzMj1bdGhyb3dCaW5kaW5nRXJyb3IsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyxydW5EZXN0cnVjdG9ycyxhcmdUeXBlc1swXSxhcmdUeXBlc1sxXV07aWYoaXNDbGFzc01ldGhvZEZ1bmMpe2ludm9rZXJGbkJvZHkrPVwidmFyIHRoaXNXaXJlZCA9IGNsYXNzUGFyYW0udG9XaXJlVHlwZShcIitkdG9yU3RhY2srXCIsIHRoaXMpO1xcblwifWZvcih2YXIgaT0wO2k8YXJnQ291bnQtMjsrK2kpe2ludm9rZXJGbkJvZHkrPVwidmFyIGFyZ1wiK2krXCJXaXJlZCA9IGFyZ1R5cGVcIitpK1wiLnRvV2lyZVR5cGUoXCIrZHRvclN0YWNrK1wiLCBhcmdcIitpK1wiKTsgLy8gXCIrYXJnVHlwZXNbaSsyXS5uYW1lK1wiXFxuXCI7YXJnczEucHVzaChcImFyZ1R5cGVcIitpKTthcmdzMi5wdXNoKGFyZ1R5cGVzW2krMl0pfWlmKGlzQ2xhc3NNZXRob2RGdW5jKXthcmdzTGlzdFdpcmVkPVwidGhpc1dpcmVkXCIrKGFyZ3NMaXN0V2lyZWQubGVuZ3RoPjA/XCIsIFwiOlwiXCIpK2FyZ3NMaXN0V2lyZWR9aW52b2tlckZuQm9keSs9KHJldHVybnM/XCJ2YXIgcnYgPSBcIjpcIlwiKStcImludm9rZXIoZm5cIisoYXJnc0xpc3RXaXJlZC5sZW5ndGg+MD9cIiwgXCI6XCJcIikrYXJnc0xpc3RXaXJlZCtcIik7XFxuXCI7aWYobmVlZHNEZXN0cnVjdG9yU3RhY2spe2ludm9rZXJGbkJvZHkrPVwicnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpO1xcblwifWVsc2V7Zm9yKHZhciBpPWlzQ2xhc3NNZXRob2RGdW5jPzE6MjtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe3ZhciBwYXJhbU5hbWU9aT09PTE/XCJ0aGlzV2lyZWRcIjpcImFyZ1wiKyhpLTIpK1wiV2lyZWRcIjtpZihhcmdUeXBlc1tpXS5kZXN0cnVjdG9yRnVuY3Rpb24hPT1udWxsKXtpbnZva2VyRm5Cb2R5Kz1wYXJhbU5hbWUrXCJfZHRvcihcIitwYXJhbU5hbWUrXCIpOyAvLyBcIithcmdUeXBlc1tpXS5uYW1lK1wiXFxuXCI7YXJnczEucHVzaChwYXJhbU5hbWUrXCJfZHRvclwiKTthcmdzMi5wdXNoKGFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbil9fX1pZihyZXR1cm5zKXtpbnZva2VyRm5Cb2R5Kz1cInZhciByZXQgPSByZXRUeXBlLmZyb21XaXJlVHlwZShydik7XFxuXCIrXCJyZXR1cm4gcmV0O1xcblwifWVsc2V7fWludm9rZXJGbkJvZHkrPVwifVxcblwiO2FyZ3MxLnB1c2goaW52b2tlckZuQm9keSk7dmFyIGludm9rZXJGdW5jdGlvbj1uZXdfKEZ1bmN0aW9uLGFyZ3MxKS5hcHBseShudWxsLGFyZ3MyKTtyZXR1cm4gaW52b2tlckZ1bmN0aW9ufWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2Z1bmN0aW9uKHJhd0NsYXNzVHlwZSxtZXRob2ROYW1lLGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcixpbnZva2VyU2lnbmF0dXJlLHJhd0ludm9rZXIsY29udGV4dCxpc1B1cmVWaXJ0dWFsKXt2YXIgcmF3QXJnVHlwZXM9aGVhcDMyVmVjdG9yVG9BcnJheShhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIpO21ldGhvZE5hbWU9cmVhZExhdGluMVN0cmluZyhtZXRob2ROYW1lKTtyYXdJbnZva2VyPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGludm9rZXJTaWduYXR1cmUscmF3SW52b2tlcik7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sW3Jhd0NsYXNzVHlwZV0sZnVuY3Rpb24oY2xhc3NUeXBlKXtjbGFzc1R5cGU9Y2xhc3NUeXBlWzBdO3ZhciBodW1hbk5hbWU9Y2xhc3NUeXBlLm5hbWUrXCIuXCIrbWV0aG9kTmFtZTtpZihpc1B1cmVWaXJ0dWFsKXtjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLnB1cmVWaXJ0dWFsRnVuY3Rpb25zLnB1c2gobWV0aG9kTmFtZSl9ZnVuY3Rpb24gdW5ib3VuZFR5cGVzSGFuZGxlcigpe3Rocm93VW5ib3VuZFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIFwiK2h1bWFuTmFtZStcIiBkdWUgdG8gdW5ib3VuZCB0eXBlc1wiLHJhd0FyZ1R5cGVzKX12YXIgcHJvdG89Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZTt2YXIgbWV0aG9kPXByb3RvW21ldGhvZE5hbWVdO2lmKHVuZGVmaW5lZD09PW1ldGhvZHx8dW5kZWZpbmVkPT09bWV0aG9kLm92ZXJsb2FkVGFibGUmJm1ldGhvZC5jbGFzc05hbWUhPT1jbGFzc1R5cGUubmFtZSYmbWV0aG9kLmFyZ0NvdW50PT09YXJnQ291bnQtMil7dW5ib3VuZFR5cGVzSGFuZGxlci5hcmdDb3VudD1hcmdDb3VudC0yO3VuYm91bmRUeXBlc0hhbmRsZXIuY2xhc3NOYW1lPWNsYXNzVHlwZS5uYW1lO3Byb3RvW21ldGhvZE5hbWVdPXVuYm91bmRUeXBlc0hhbmRsZXJ9ZWxzZXtlbnN1cmVPdmVybG9hZFRhYmxlKHByb3RvLG1ldGhvZE5hbWUsaHVtYW5OYW1lKTtwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW2FyZ0NvdW50LTJdPXVuYm91bmRUeXBlc0hhbmRsZXJ9d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10scmF3QXJnVHlwZXMsZnVuY3Rpb24oYXJnVHlwZXMpe3ZhciBtZW1iZXJGdW5jdGlvbj1jcmFmdEludm9rZXJGdW5jdGlvbihodW1hbk5hbWUsYXJnVHlwZXMsY2xhc3NUeXBlLHJhd0ludm9rZXIsY29udGV4dCk7aWYodW5kZWZpbmVkPT09cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZSl7bWVtYmVyRnVuY3Rpb24uYXJnQ291bnQ9YXJnQ291bnQtMjtwcm90b1ttZXRob2ROYW1lXT1tZW1iZXJGdW5jdGlvbn1lbHNle3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJnQ291bnQtMl09bWVtYmVyRnVuY3Rpb259cmV0dXJuW119KTtyZXR1cm5bXX0pfXZhciBlbXZhbF9mcmVlX2xpc3Q9W107dmFyIGVtdmFsX2hhbmRsZV9hcnJheT1be30se3ZhbHVlOnVuZGVmaW5lZH0se3ZhbHVlOm51bGx9LHt2YWx1ZTp0cnVlfSx7dmFsdWU6ZmFsc2V9XTtmdW5jdGlvbiBfX2VtdmFsX2RlY3JlZihoYW5kbGUpe2lmKGhhbmRsZT40JiYwPT09LS1lbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS5yZWZjb3VudCl7ZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV09dW5kZWZpbmVkO2VtdmFsX2ZyZWVfbGlzdC5wdXNoKGhhbmRsZSl9fWZ1bmN0aW9uIGNvdW50X2VtdmFsX2hhbmRsZXMoKXt2YXIgY291bnQ9MDtmb3IodmFyIGk9NTtpPGVtdmFsX2hhbmRsZV9hcnJheS5sZW5ndGg7KytpKXtpZihlbXZhbF9oYW5kbGVfYXJyYXlbaV0hPT11bmRlZmluZWQpeysrY291bnR9fXJldHVybiBjb3VudH1mdW5jdGlvbiBnZXRfZmlyc3RfZW12YWwoKXtmb3IodmFyIGk9NTtpPGVtdmFsX2hhbmRsZV9hcnJheS5sZW5ndGg7KytpKXtpZihlbXZhbF9oYW5kbGVfYXJyYXlbaV0hPT11bmRlZmluZWQpe3JldHVybiBlbXZhbF9oYW5kbGVfYXJyYXlbaV19fXJldHVybiBudWxsfWZ1bmN0aW9uIGluaXRfZW12YWwoKXtNb2R1bGVbXCJjb3VudF9lbXZhbF9oYW5kbGVzXCJdPWNvdW50X2VtdmFsX2hhbmRsZXM7TW9kdWxlW1wiZ2V0X2ZpcnN0X2VtdmFsXCJdPWdldF9maXJzdF9lbXZhbH1mdW5jdGlvbiBfX2VtdmFsX3JlZ2lzdGVyKHZhbHVlKXtzd2l0Y2godmFsdWUpe2Nhc2UgdW5kZWZpbmVkOntyZXR1cm4gMX1jYXNlIG51bGw6e3JldHVybiAyfWNhc2UgdHJ1ZTp7cmV0dXJuIDN9Y2FzZSBmYWxzZTp7cmV0dXJuIDR9ZGVmYXVsdDp7dmFyIGhhbmRsZT1lbXZhbF9mcmVlX2xpc3QubGVuZ3RoP2VtdmFsX2ZyZWVfbGlzdC5wb3AoKTplbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoO2VtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdPXtyZWZjb3VudDoxLHZhbHVlOnZhbHVlfTtyZXR1cm4gaGFuZGxlfX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZW12YWwocmF3VHlwZSxuYW1lKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKGhhbmRsZSl7dmFyIHJ2PWVtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnZhbHVlO19fZW12YWxfZGVjcmVmKGhhbmRsZSk7cmV0dXJuIHJ2fSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7cmV0dXJuIF9fZW12YWxfcmVnaXN0ZXIodmFsdWUpfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6c2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXIsZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX1mdW5jdGlvbiBfZW1iaW5kX3JlcHIodil7aWYodj09PW51bGwpe3JldHVyblwibnVsbFwifXZhciB0PXR5cGVvZiB2O2lmKHQ9PT1cIm9iamVjdFwifHx0PT09XCJhcnJheVwifHx0PT09XCJmdW5jdGlvblwiKXtyZXR1cm4gdi50b1N0cmluZygpfWVsc2V7cmV0dXJuXCJcIit2fX1mdW5jdGlvbiBmbG9hdFJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2hpZnQpe3N3aXRjaChzaGlmdCl7Y2FzZSAyOnJldHVybiBmdW5jdGlvbihwb2ludGVyKXtyZXR1cm4gdGhpc1tcImZyb21XaXJlVHlwZVwiXShIRUFQRjMyW3BvaW50ZXI+PjJdKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihwb2ludGVyKXtyZXR1cm4gdGhpc1tcImZyb21XaXJlVHlwZVwiXShIRUFQRjY0W3BvaW50ZXI+PjNdKX07ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBmbG9hdCB0eXBlOiBcIituYW1lKX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZmxvYXQocmF3VHlwZSxuYW1lLHNpemUpe3ZhciBzaGlmdD1nZXRTaGlmdEZyb21TaXplKHNpemUpO25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24odmFsdWUpe3JldHVybiB2YWx1ZX0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwibnVtYmVyXCImJnR5cGVvZiB2YWx1ZSE9PVwiYm9vbGVhblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBcIicrX2VtYmluZF9yZXByKHZhbHVlKSsnXCIgdG8gJyt0aGlzLm5hbWUpfXJldHVybiB2YWx1ZX0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmZsb2F0UmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSxzaGlmdCksZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX1mdW5jdGlvbiBpbnRlZ2VyUmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSxzaGlmdCxzaWduZWQpe3N3aXRjaChzaGlmdCl7Y2FzZSAwOnJldHVybiBzaWduZWQ/ZnVuY3Rpb24gcmVhZFM4RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVA4W3BvaW50ZXJdfTpmdW5jdGlvbiByZWFkVThGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gSEVBUFU4W3BvaW50ZXJdfTtjYXNlIDE6cmV0dXJuIHNpZ25lZD9mdW5jdGlvbiByZWFkUzE2RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVAxNltwb2ludGVyPj4xXX06ZnVuY3Rpb24gcmVhZFUxNkZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBIRUFQVTE2W3BvaW50ZXI+PjFdfTtjYXNlIDI6cmV0dXJuIHNpZ25lZD9mdW5jdGlvbiByZWFkUzMyRnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVAzMltwb2ludGVyPj4yXX06ZnVuY3Rpb24gcmVhZFUzMkZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBIRUFQVTMyW3BvaW50ZXI+PjJdfTtkZWZhdWx0OnRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGludGVnZXIgdHlwZTogXCIrbmFtZSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXIocHJpbWl0aXZlVHlwZSxuYW1lLHNpemUsbWluUmFuZ2UsbWF4UmFuZ2Upe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtpZihtYXhSYW5nZT09PS0xKXttYXhSYW5nZT00Mjk0OTY3Mjk1fXZhciBzaGlmdD1nZXRTaGlmdEZyb21TaXplKHNpemUpO3ZhciBmcm9tV2lyZVR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiB2YWx1ZX07aWYobWluUmFuZ2U9PT0wKXt2YXIgYml0c2hpZnQ9MzItOCpzaXplO2Zyb21XaXJlVHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHZhbHVlPDxiaXRzaGlmdD4+PmJpdHNoaWZ0fX12YXIgaXNVbnNpZ25lZFR5cGU9bmFtZS5pbmRleE9mKFwidW5zaWduZWRcIikhPS0xO3JlZ2lzdGVyVHlwZShwcmltaXRpdmVUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmcm9tV2lyZVR5cGUsXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwibnVtYmVyXCImJnR5cGVvZiB2YWx1ZSE9PVwiYm9vbGVhblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBcIicrX2VtYmluZF9yZXByKHZhbHVlKSsnXCIgdG8gJyt0aGlzLm5hbWUpfWlmKHZhbHVlPG1pblJhbmdlfHx2YWx1ZT5tYXhSYW5nZSl7dGhyb3cgbmV3IFR5cGVFcnJvcignUGFzc2luZyBhIG51bWJlciBcIicrX2VtYmluZF9yZXByKHZhbHVlKSsnXCIgZnJvbSBKUyBzaWRlIHRvIEMvQysrIHNpZGUgdG8gYW4gYXJndW1lbnQgb2YgdHlwZSBcIicrbmFtZSsnXCIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFsnK21pblJhbmdlK1wiLCBcIittYXhSYW5nZStcIl0hXCIpfXJldHVybiBpc1Vuc2lnbmVkVHlwZT92YWx1ZT4+PjA6dmFsdWV8MH0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0LG1pblJhbmdlIT09MCksZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldyhyYXdUeXBlLGRhdGFUeXBlSW5kZXgsbmFtZSl7dmFyIHR5cGVNYXBwaW5nPVtJbnQ4QXJyYXksVWludDhBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheV07dmFyIFRBPXR5cGVNYXBwaW5nW2RhdGFUeXBlSW5kZXhdO2Z1bmN0aW9uIGRlY29kZU1lbW9yeVZpZXcoaGFuZGxlKXtoYW5kbGU9aGFuZGxlPj4yO3ZhciBoZWFwPUhFQVBVMzI7dmFyIHNpemU9aGVhcFtoYW5kbGVdO3ZhciBkYXRhPWhlYXBbaGFuZGxlKzFdO3JldHVybiBuZXcgVEEoYnVmZmVyLGRhdGEsc2l6ZSl9bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpkZWNvZGVNZW1vcnlWaWV3LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpkZWNvZGVNZW1vcnlWaWV3fSx7aWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9uczp0cnVlfSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZyhyYXdUeXBlLG5hbWUpe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTt2YXIgc3RkU3RyaW5nSXNVVEY4PW5hbWU9PT1cInN0ZDo6c3RyaW5nXCI7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXt2YXIgbGVuZ3RoPUhFQVBVMzJbdmFsdWU+PjJdO3ZhciBzdHI7aWYoc3RkU3RyaW5nSXNVVEY4KXt2YXIgZGVjb2RlU3RhcnRQdHI9dmFsdWUrNDtmb3IodmFyIGk9MDtpPD1sZW5ndGg7KytpKXt2YXIgY3VycmVudEJ5dGVQdHI9dmFsdWUrNCtpO2lmKGk9PWxlbmd0aHx8SEVBUFU4W2N1cnJlbnRCeXRlUHRyXT09MCl7dmFyIG1heFJlYWQ9Y3VycmVudEJ5dGVQdHItZGVjb2RlU3RhcnRQdHI7dmFyIHN0cmluZ1NlZ21lbnQ9VVRGOFRvU3RyaW5nKGRlY29kZVN0YXJ0UHRyLG1heFJlYWQpO2lmKHN0cj09PXVuZGVmaW5lZCl7c3RyPXN0cmluZ1NlZ21lbnR9ZWxzZXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoMCk7c3RyKz1zdHJpbmdTZWdtZW50fWRlY29kZVN0YXJ0UHRyPWN1cnJlbnRCeXRlUHRyKzF9fX1lbHNle3ZhciBhPW5ldyBBcnJheShsZW5ndGgpO2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7YVtpXT1TdHJpbmcuZnJvbUNoYXJDb2RlKEhFQVBVOFt2YWx1ZSs0K2ldKX1zdHI9YS5qb2luKFwiXCIpfV9mcmVlKHZhbHVlKTtyZXR1cm4gc3RyfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7dmFsdWU9bmV3IFVpbnQ4QXJyYXkodmFsdWUpfXZhciBnZXRMZW5ndGg7dmFyIHZhbHVlSXNPZlR5cGVTdHJpbmc9dHlwZW9mIHZhbHVlPT09XCJzdHJpbmdcIjtpZighKHZhbHVlSXNPZlR5cGVTdHJpbmd8fHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheXx8dmFsdWUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8dmFsdWUgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gc3RkOjpzdHJpbmdcIil9aWYoc3RkU3RyaW5nSXNVVEY4JiZ2YWx1ZUlzT2ZUeXBlU3RyaW5nKXtnZXRMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gbGVuZ3RoQnl0ZXNVVEY4KHZhbHVlKX19ZWxzZXtnZXRMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdmFsdWUubGVuZ3RofX12YXIgbGVuZ3RoPWdldExlbmd0aCgpO3ZhciBwdHI9X21hbGxvYyg0K2xlbmd0aCsxKTtIRUFQVTMyW3B0cj4+Ml09bGVuZ3RoO2lmKHN0ZFN0cmluZ0lzVVRGOCYmdmFsdWVJc09mVHlwZVN0cmluZyl7c3RyaW5nVG9VVEY4KHZhbHVlLHB0cis0LGxlbmd0aCsxKX1lbHNle2lmKHZhbHVlSXNPZlR5cGVTdHJpbmcpe2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7dmFyIGNoYXJDb2RlPXZhbHVlLmNoYXJDb2RlQXQoaSk7aWYoY2hhckNvZGU+MjU1KXtfZnJlZShwdHIpO3Rocm93QmluZGluZ0Vycm9yKFwiU3RyaW5nIGhhcyBVVEYtMTYgY29kZSB1bml0cyB0aGF0IGRvIG5vdCBmaXQgaW4gOCBiaXRzXCIpfUhFQVBVOFtwdHIrNCtpXT1jaGFyQ29kZX19ZWxzZXtmb3IodmFyIGk9MDtpPGxlbmd0aDsrK2kpe0hFQVBVOFtwdHIrNCtpXT12YWx1ZVtpXX19fWlmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxwdHIpfXJldHVybiBwdHJ9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246ZnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpfX0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF93c3RyaW5nKHJhd1R5cGUsY2hhclNpemUsbmFtZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3ZhciBkZWNvZGVTdHJpbmcsZW5jb2RlU3RyaW5nLGdldEhlYXAsbGVuZ3RoQnl0ZXNVVEYsc2hpZnQ7aWYoY2hhclNpemU9PT0yKXtkZWNvZGVTdHJpbmc9VVRGMTZUb1N0cmluZztlbmNvZGVTdHJpbmc9c3RyaW5nVG9VVEYxNjtsZW5ndGhCeXRlc1VURj1sZW5ndGhCeXRlc1VURjE2O2dldEhlYXA9ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUFUxNn07c2hpZnQ9MX1lbHNlIGlmKGNoYXJTaXplPT09NCl7ZGVjb2RlU3RyaW5nPVVURjMyVG9TdHJpbmc7ZW5jb2RlU3RyaW5nPXN0cmluZ1RvVVRGMzI7bGVuZ3RoQnl0ZXNVVEY9bGVuZ3RoQnl0ZXNVVEYzMjtnZXRIZWFwPWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVBVMzJ9O3NoaWZ0PTJ9cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXt2YXIgbGVuZ3RoPUhFQVBVMzJbdmFsdWU+PjJdO3ZhciBIRUFQPWdldEhlYXAoKTt2YXIgc3RyO3ZhciBkZWNvZGVTdGFydFB0cj12YWx1ZSs0O2Zvcih2YXIgaT0wO2k8PWxlbmd0aDsrK2kpe3ZhciBjdXJyZW50Qnl0ZVB0cj12YWx1ZSs0K2kqY2hhclNpemU7aWYoaT09bGVuZ3RofHxIRUFQW2N1cnJlbnRCeXRlUHRyPj5zaGlmdF09PTApe3ZhciBtYXhSZWFkQnl0ZXM9Y3VycmVudEJ5dGVQdHItZGVjb2RlU3RhcnRQdHI7dmFyIHN0cmluZ1NlZ21lbnQ9ZGVjb2RlU3RyaW5nKGRlY29kZVN0YXJ0UHRyLG1heFJlYWRCeXRlcyk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudH1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnR9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrY2hhclNpemV9fV9mcmVlKHZhbHVlKTtyZXR1cm4gc3RyfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYoISh0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIEMrKyBzdHJpbmcgdHlwZSBcIituYW1lKX12YXIgbGVuZ3RoPWxlbmd0aEJ5dGVzVVRGKHZhbHVlKTt2YXIgcHRyPV9tYWxsb2MoNCtsZW5ndGgrY2hhclNpemUpO0hFQVBVMzJbcHRyPj4yXT1sZW5ndGg+PnNoaWZ0O2VuY29kZVN0cmluZyh2YWx1ZSxwdHIrNCxsZW5ndGgrY2hhclNpemUpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxwdHIpfXJldHVybiBwdHJ9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246ZnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpfX0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQocmF3VHlwZSxuYW1lKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse2lzVm9pZDp0cnVlLG5hbWU6bmFtZSxcImFyZ1BhY2tBZHZhbmNlXCI6MCxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKCl7cmV0dXJuIHVuZGVmaW5lZH0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsbyl7cmV0dXJuIHVuZGVmaW5lZH19KX1mdW5jdGlvbiByZXF1aXJlSGFuZGxlKGhhbmRsZSl7aWYoIWhhbmRsZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgdXNlIGRlbGV0ZWQgdmFsLiBoYW5kbGUgPSBcIitoYW5kbGUpfXJldHVybiBlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS52YWx1ZX1mdW5jdGlvbiByZXF1aXJlUmVnaXN0ZXJlZFR5cGUocmF3VHlwZSxodW1hbk5hbWUpe3ZhciBpbXBsPXJlZ2lzdGVyZWRUeXBlc1tyYXdUeXBlXTtpZih1bmRlZmluZWQ9PT1pbXBsKXt0aHJvd0JpbmRpbmdFcnJvcihodW1hbk5hbWUrXCIgaGFzIHVua25vd24gdHlwZSBcIitnZXRUeXBlTmFtZShyYXdUeXBlKSl9cmV0dXJuIGltcGx9ZnVuY3Rpb24gX19lbXZhbF9hcyhoYW5kbGUscmV0dXJuVHlwZSxkZXN0cnVjdG9yc1JlZil7aGFuZGxlPXJlcXVpcmVIYW5kbGUoaGFuZGxlKTtyZXR1cm5UeXBlPXJlcXVpcmVSZWdpc3RlcmVkVHlwZShyZXR1cm5UeXBlLFwiZW12YWw6OmFzXCIpO3ZhciBkZXN0cnVjdG9ycz1bXTt2YXIgcmQ9X19lbXZhbF9yZWdpc3RlcihkZXN0cnVjdG9ycyk7SEVBUDMyW2Rlc3RydWN0b3JzUmVmPj4yXT1yZDtyZXR1cm4gcmV0dXJuVHlwZVtcInRvV2lyZVR5cGVcIl0oZGVzdHJ1Y3RvcnMsaGFuZGxlKX1mdW5jdGlvbiBfX2VtdmFsX2xvb2t1cFR5cGVzKGFyZ0NvdW50LGFyZ1R5cGVzKXt2YXIgYT1uZXcgQXJyYXkoYXJnQ291bnQpO2Zvcih2YXIgaT0wO2k8YXJnQ291bnQ7KytpKXthW2ldPXJlcXVpcmVSZWdpc3RlcmVkVHlwZShIRUFQMzJbKGFyZ1R5cGVzPj4yKStpXSxcInBhcmFtZXRlciBcIitpKX1yZXR1cm4gYX1mdW5jdGlvbiBfX2VtdmFsX2NhbGwoaGFuZGxlLGFyZ0NvdW50LGFyZ1R5cGVzLGFyZ3Ype2hhbmRsZT1yZXF1aXJlSGFuZGxlKGhhbmRsZSk7dmFyIHR5cGVzPV9fZW12YWxfbG9va3VwVHlwZXMoYXJnQ291bnQsYXJnVHlwZXMpO3ZhciBhcmdzPW5ldyBBcnJheShhcmdDb3VudCk7Zm9yKHZhciBpPTA7aTxhcmdDb3VudDsrK2kpe3ZhciB0eXBlPXR5cGVzW2ldO2FyZ3NbaV09dHlwZVtcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCJdKGFyZ3YpO2FyZ3YrPXR5cGVbXCJhcmdQYWNrQWR2YW5jZVwiXX12YXIgcnY9aGFuZGxlLmFwcGx5KHVuZGVmaW5lZCxhcmdzKTtyZXR1cm4gX19lbXZhbF9yZWdpc3Rlcihydil9ZnVuY3Rpb24gX19lbXZhbF9pbmNyZWYoaGFuZGxlKXtpZihoYW5kbGU+NCl7ZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0ucmVmY291bnQrPTF9fWZ1bmN0aW9uIF9fZW12YWxfcnVuX2Rlc3RydWN0b3JzKGhhbmRsZSl7dmFyIGRlc3RydWN0b3JzPWVtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnZhbHVlO3J1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKTtfX2VtdmFsX2RlY3JlZihoYW5kbGUpfWZ1bmN0aW9uIF9hYm9ydCgpe2Fib3J0KCl9ZnVuY3Rpb24gX2xvbmdqbXAoZW52LHZhbHVlKXtfc2V0VGhyZXcoZW52LHZhbHVlfHwxKTt0aHJvd1wibG9uZ2ptcFwifWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2xvbmdqbXAoYTAsYTEpe3JldHVybiBfbG9uZ2ptcChhMCxhMSl9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyhkZXN0LHNyYyxudW0pe0hFQVBVOC5jb3B5V2l0aGluKGRlc3Qsc3JjLHNyYytudW0pfWZ1bmN0aW9uIGFib3J0T25DYW5ub3RHcm93TWVtb3J5KHJlcXVlc3RlZFNpemUpe2Fib3J0KFwiT09NXCIpfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwKHJlcXVlc3RlZFNpemUpe3JlcXVlc3RlZFNpemU9cmVxdWVzdGVkU2l6ZT4+PjA7YWJvcnRPbkNhbm5vdEdyb3dNZW1vcnkocmVxdWVzdGVkU2l6ZSl9ZnVuY3Rpb24gX2dldFRlbXBSZXQwKCl7cmV0dXJuIGdldFRlbXBSZXQwKCl8MH1mdW5jdGlvbiBfc2V0VGVtcFJldDAoJGkpe3NldFRlbXBSZXQwKCRpfDApfWVtYmluZF9pbml0X2NoYXJDb2RlcygpO0JpbmRpbmdFcnJvcj1Nb2R1bGVbXCJCaW5kaW5nRXJyb3JcIl09ZXh0ZW5kRXJyb3IoRXJyb3IsXCJCaW5kaW5nRXJyb3JcIik7SW50ZXJuYWxFcnJvcj1Nb2R1bGVbXCJJbnRlcm5hbEVycm9yXCJdPWV4dGVuZEVycm9yKEVycm9yLFwiSW50ZXJuYWxFcnJvclwiKTtpbml0X0NsYXNzSGFuZGxlKCk7aW5pdF9SZWdpc3RlcmVkUG9pbnRlcigpO2luaXRfZW1iaW5kKCk7VW5ib3VuZFR5cGVFcnJvcj1Nb2R1bGVbXCJVbmJvdW5kVHlwZUVycm9yXCJdPWV4dGVuZEVycm9yKEVycm9yLFwiVW5ib3VuZFR5cGVFcnJvclwiKTtpbml0X2VtdmFsKCk7dmFyIEFTU0VSVElPTlM9ZmFsc2U7ZnVuY3Rpb24gaW50QXJyYXlUb1N0cmluZyhhcnJheSl7dmFyIHJldD1bXTtmb3IodmFyIGk9MDtpPGFycmF5Lmxlbmd0aDtpKyspe3ZhciBjaHI9YXJyYXlbaV07aWYoY2hyPjI1NSl7aWYoQVNTRVJUSU9OUyl7YXNzZXJ0KGZhbHNlLFwiQ2hhcmFjdGVyIGNvZGUgXCIrY2hyK1wiIChcIitTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikrXCIpICBhdCBvZmZzZXQgXCIraStcIiBub3QgaW4gMHgwMC0weEZGLlwiKX1jaHImPTI1NX1yZXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikpfXJldHVybiByZXQuam9pbihcIlwiKX12YXIgZGVjb2RlQmFzZTY0PXR5cGVvZiBhdG9iPT09XCJmdW5jdGlvblwiP2F0b2I6ZnVuY3Rpb24oaW5wdXQpe3ZhciBrZXlTdHI9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO3ZhciBvdXRwdXQ9XCJcIjt2YXIgY2hyMSxjaHIyLGNocjM7dmFyIGVuYzEsZW5jMixlbmMzLGVuYzQ7dmFyIGk9MDtpbnB1dD1pbnB1dC5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL1xcPV0vZyxcIlwiKTtkb3tlbmMxPWtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMyPWtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMzPWtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmM0PWtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtjaHIxPWVuYzE8PDJ8ZW5jMj4+NDtjaHIyPShlbmMyJjE1KTw8NHxlbmMzPj4yO2NocjM9KGVuYzMmMyk8PDZ8ZW5jNDtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMSk7aWYoZW5jMyE9PTY0KXtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMil9aWYoZW5jNCE9PTY0KXtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMyl9fXdoaWxlKGk8aW5wdXQubGVuZ3RoKTtyZXR1cm4gb3V0cHV0fTtmdW5jdGlvbiBpbnRBcnJheUZyb21CYXNlNjQocyl7aWYodHlwZW9mIEVOVklST05NRU5UX0lTX05PREU9PT1cImJvb2xlYW5cIiYmRU5WSVJPTk1FTlRfSVNfTk9ERSl7dmFyIGJ1Zjt0cnl7YnVmPUJ1ZmZlci5mcm9tKHMsXCJiYXNlNjRcIil9Y2F0Y2goXyl7YnVmPW5ldyBCdWZmZXIocyxcImJhc2U2NFwiKX1yZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmW1wiYnVmZmVyXCJdLGJ1ZltcImJ5dGVPZmZzZXRcIl0sYnVmW1wiYnl0ZUxlbmd0aFwiXSl9dHJ5e3ZhciBkZWNvZGVkPWRlY29kZUJhc2U2NChzKTt2YXIgYnl0ZXM9bmV3IFVpbnQ4QXJyYXkoZGVjb2RlZC5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8ZGVjb2RlZC5sZW5ndGg7KytpKXtieXRlc1tpXT1kZWNvZGVkLmNoYXJDb2RlQXQoaSl9cmV0dXJuIGJ5dGVzfWNhdGNoKF8pe3Rocm93IG5ldyBFcnJvcihcIkNvbnZlcnRpbmcgYmFzZTY0IHN0cmluZyB0byBieXRlcyBmYWlsZWQuXCIpfX1mdW5jdGlvbiB0cnlQYXJzZUFzRGF0YVVSSShmaWxlbmFtZSl7aWYoIWlzRGF0YVVSSShmaWxlbmFtZSkpe3JldHVybn1yZXR1cm4gaW50QXJyYXlGcm9tQmFzZTY0KGZpbGVuYW1lLnNsaWNlKGRhdGFVUklQcmVmaXgubGVuZ3RoKSl9dmFyIGFzbUxpYnJhcnlBcmc9e1wiZ1wiOl9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24sXCJmXCI6X19fY3hhX3Rocm93LFwiQlwiOl9fZW1iaW5kX3JlZ2lzdGVyX2Jvb2wsXCJHXCI6X19lbWJpbmRfcmVnaXN0ZXJfY2xhc3MsXCJGXCI6X19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfY29uc3RydWN0b3IsXCJrXCI6X19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb24sXCJBXCI6X19lbWJpbmRfcmVnaXN0ZXJfZW12YWwsXCJ0XCI6X19lbWJpbmRfcmVnaXN0ZXJfZmxvYXQsXCJsXCI6X19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcixcImpcIjpfX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldyxcInVcIjpfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nLFwiclwiOl9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF93c3RyaW5nLFwiQ1wiOl9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQsXCJwXCI6X19lbXZhbF9hcyxcInFcIjpfX2VtdmFsX2NhbGwsXCJoXCI6X19lbXZhbF9kZWNyZWYsXCJuXCI6X19lbXZhbF9pbmNyZWYsXCJvXCI6X19lbXZhbF9ydW5fZGVzdHJ1Y3RvcnMsXCJtXCI6X2Fib3J0LFwiY1wiOl9lbXNjcmlwdGVuX2xvbmdqbXAsXCJ5XCI6X2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyxcInpcIjpfZW1zY3JpcHRlbl9yZXNpemVfaGVhcCxcImFcIjpfZ2V0VGVtcFJldDAsXCJlXCI6aW52b2tlX2lpaSxcIkRcIjppbnZva2VfaWlpaSxcInZcIjppbnZva2VfdixcImlcIjppbnZva2VfdmksXCJ3XCI6aW52b2tlX3ZpaWRpaSxcImRcIjppbnZva2VfdmlpaSxcInNcIjppbnZva2VfdmlpaWksXCJFXCI6aW52b2tlX3ZpaWlpaSxcInhcIjppbnZva2VfdmlqLFwiYlwiOl9zZXRUZW1wUmV0MH07dmFyIGFzbT1jcmVhdGVXYXNtKCk7dmFyIF9fX3dhc21fY2FsbF9jdG9ycz1Nb2R1bGVbXCJfX193YXNtX2NhbGxfY3RvcnNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fd2FzbV9jYWxsX2N0b3JzPU1vZHVsZVtcIl9fX3dhc21fY2FsbF9jdG9yc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJJXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfbWFsbG9jPU1vZHVsZVtcIl9tYWxsb2NcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX21hbGxvYz1Nb2R1bGVbXCJfbWFsbG9jXCJdPU1vZHVsZVtcImFzbVwiXVtcIktcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9mcmVlPU1vZHVsZVtcIl9mcmVlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9mcmVlPU1vZHVsZVtcIl9mcmVlXCJdPU1vZHVsZVtcImFzbVwiXVtcIkxcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2dldFR5cGVOYW1lPU1vZHVsZVtcIl9fX2dldFR5cGVOYW1lXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX2dldFR5cGVOYW1lPU1vZHVsZVtcIl9fX2dldFR5cGVOYW1lXCJdPU1vZHVsZVtcImFzbVwiXVtcIk1cIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2VtYmluZF9yZWdpc3Rlcl9uYXRpdmVfYW5kX2J1aWx0aW5fdHlwZXM9TW9kdWxlW1wiX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlc1wiXT1mdW5jdGlvbigpe3JldHVybihfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzPU1vZHVsZVtcIl9fX2VtYmluZF9yZWdpc3Rlcl9uYXRpdmVfYW5kX2J1aWx0aW5fdHlwZXNcIl09TW9kdWxlW1wiYXNtXCJdW1wiTlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgc3RhY2tTYXZlPU1vZHVsZVtcInN0YWNrU2F2ZVwiXT1mdW5jdGlvbigpe3JldHVybihzdGFja1NhdmU9TW9kdWxlW1wic3RhY2tTYXZlXCJdPU1vZHVsZVtcImFzbVwiXVtcIk9cIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIHN0YWNrUmVzdG9yZT1Nb2R1bGVbXCJzdGFja1Jlc3RvcmVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oc3RhY2tSZXN0b3JlPU1vZHVsZVtcInN0YWNrUmVzdG9yZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJQXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfc2V0VGhyZXc9TW9kdWxlW1wiX3NldFRocmV3XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9zZXRUaHJldz1Nb2R1bGVbXCJfc2V0VGhyZXdcIl09TW9kdWxlW1wiYXNtXCJdW1wiUVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF92aWo9TW9kdWxlW1wiZHluQ2FsbF92aWpcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF92aWo9TW9kdWxlW1wiZHluQ2FsbF92aWpcIl09TW9kdWxlW1wiYXNtXCJdW1wiUlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTtmdW5jdGlvbiBpbnZva2VfaWlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiB3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMil9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpKGluZGV4LGExKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpaShpbmRleCxhMSxhMixhMyl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXt3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMixhMyl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpaWlpKGluZGV4LGExLGEyLGEzLGE0KXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzLGE0KX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpaWlpKGluZGV4LGExLGEyLGEzLGE0LGE1KXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzLGE0LGE1KX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpaShpbmRleCxhMSxhMixhMyl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtyZXR1cm4gd2FzbVRhYmxlLmdldChpbmRleCkoYTEsYTIsYTMpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV92aWlkaWkoaW5kZXgsYTEsYTIsYTMsYTQsYTUpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7d2FzbVRhYmxlLmdldChpbmRleCkoYTEsYTIsYTMsYTQsYTUpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV92KGluZGV4KXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKCl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpaihpbmRleCxhMSxhMixhMyl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtkeW5DYWxsX3ZpaihpbmRleCxhMSxhMixhMyl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19dmFyIGNhbGxlZFJ1bjtmdW5jdGlvbiBFeGl0U3RhdHVzKHN0YXR1cyl7dGhpcy5uYW1lPVwiRXhpdFN0YXR1c1wiO3RoaXMubWVzc2FnZT1cIlByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoXCIrc3RhdHVzK1wiKVwiO3RoaXMuc3RhdHVzPXN0YXR1c31kZXBlbmRlbmNpZXNGdWxmaWxsZWQ9ZnVuY3Rpb24gcnVuQ2FsbGVyKCl7aWYoIWNhbGxlZFJ1bilydW4oKTtpZighY2FsbGVkUnVuKWRlcGVuZGVuY2llc0Z1bGZpbGxlZD1ydW5DYWxsZXJ9O2Z1bmN0aW9uIHJ1bihhcmdzKXthcmdzPWFyZ3N8fGFyZ3VtZW50c187aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1wcmVSdW4oKTtpZihydW5EZXBlbmRlbmNpZXM+MCl7cmV0dXJufWZ1bmN0aW9uIGRvUnVuKCl7aWYoY2FsbGVkUnVuKXJldHVybjtjYWxsZWRSdW49dHJ1ZTtNb2R1bGVbXCJjYWxsZWRSdW5cIl09dHJ1ZTtpZihBQk9SVClyZXR1cm47aW5pdFJ1bnRpbWUoKTtwcmVNYWluKCk7cmVhZHlQcm9taXNlUmVzb2x2ZShNb2R1bGUpO2lmKE1vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdKU1vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdKCk7cG9zdFJ1bigpfWlmKE1vZHVsZVtcInNldFN0YXR1c1wiXSl7TW9kdWxlW1wic2V0U3RhdHVzXCJdKFwiUnVubmluZy4uLlwiKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe01vZHVsZVtcInNldFN0YXR1c1wiXShcIlwiKX0sMSk7ZG9SdW4oKX0sMSl9ZWxzZXtkb1J1bigpfX1Nb2R1bGVbXCJydW5cIl09cnVuO2lmKE1vZHVsZVtcInByZUluaXRcIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwcmVJbml0XCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicHJlSW5pdFwiXT1bTW9kdWxlW1wicHJlSW5pdFwiXV07d2hpbGUoTW9kdWxlW1wicHJlSW5pdFwiXS5sZW5ndGg+MCl7TW9kdWxlW1wicHJlSW5pdFwiXS5wb3AoKSgpfX1ub0V4aXRSdW50aW1lPXRydWU7cnVuKCk7XHJcblxyXG5cclxuICByZXR1cm4gQUxHTElCTW9kdWxlLnJlYWR5XHJcbn1cclxuKTtcclxufSkoKTtcclxuaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JylcclxuICBtb2R1bGUuZXhwb3J0cyA9IEFMR0xJQk1vZHVsZTtcclxuZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKVxyXG4gIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7IHJldHVybiBBTEdMSUJNb2R1bGU7IH0pO1xyXG5lbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXHJcbiAgZXhwb3J0c1tcIkFMR0xJQk1vZHVsZVwiXSA9IEFMR0xJQk1vZHVsZTtcclxuLy9DZXJlcyBIZWxwZXIgSlNcclxuXHJcbmV4cG9ydCBjbGFzcyBBbGdsaWIge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5sb2FkZWQgPSBmYWxzZVxyXG5cdFx0dGhpcy5meG4gPSBbXVxyXG5cdFx0dGhpcy5lcXVhbGl0eV9jb25zdHJhaW50ID0gW11cclxuXHRcdHRoaXMuaW5lcXVhbGl0eV9jb25zdHJhaW50ID0gW11cclxuXHRcdHRoaXMuY2FsbGJhY2sgPSBbXVxyXG5cdFx0dGhpcy5zdGF0ID0gW107XHJcblx0XHR0aGlzLmphY29iaWFuID0gW107XHJcblx0XHR0aGlzLmNvdW50RXZhbHMgPSAwXHJcblx0XHRcclxuXHRcdC8vIENyZWF0ZSBleGFtcGxlIGRhdGEgdG8gdGVzdCBmbG9hdF9tdWx0aXBseV9hcnJheVxyXG5cdFx0dGhpcy52YXJMZW5ndGggPSAwXHJcblx0XHR0aGlzLm1heExlbmd0aCA9IDEwMDBcclxuXHRcdHRoaXMuZGF0YSA9IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5tYXhMZW5ndGgpO1xyXG5cdFx0XHJcblx0XHR0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xyXG5cdFx0XHRBTEdMSUJNb2R1bGUoKS50aGVuKGZ1bmN0aW9uKE1vZHVsZSl7XHJcblx0XHRcdFx0dGhpcy5pbnN0YW5jZSA9IG5ldyBNb2R1bGUuQUxHTElCanNcclxuXHJcblx0XHRcdFx0Ly8gR2V0IGRhdGEgYnl0ZSBzaXplLCBhbGxvY2F0ZSBtZW1vcnkgb24gRW1zY3JpcHRlbiBoZWFwLCBhbmQgZ2V0IHBvaW50ZXJcclxuXHRcdFx0XHRsZXQgbkRhdGFCeXRlcyA9IHRoaXMuZGF0YS5sZW5ndGggKiB0aGlzLmRhdGEuQllURVNfUEVSX0VMRU1FTlQ7XHJcblx0XHRcdFx0bGV0IGRhdGFQdHIgPSBNb2R1bGUuX21hbGxvYyhuRGF0YUJ5dGVzKTtcclxuXHJcblx0XHRcdFx0Ly8gQ29weSBkYXRhIHRvIEVtc2NyaXB0ZW4gaGVhcCAoZGlyZWN0bHkgYWNjZXNzZWQgZnJvbSBNb2R1bGUuSEVBUFU4KVxyXG5cdFx0XHRcdHRoaXMuZGF0YUhlYXAgPSBuZXcgRmxvYXQ2NEFycmF5KE1vZHVsZS5IRUFQRjY0LmJ1ZmZlciwgZGF0YVB0ciwgbkRhdGFCeXRlcyk7XHJcblx0XHRcdFx0dGhpcy5kYXRhSGVhcC5zZXQobmV3IEZsb2F0NjRBcnJheSh0aGlzLmRhdGEuYnVmZmVyKSk7XHJcblx0XHRcdFx0dGhpcy5sb2FkZWQgPSB0cnVlXHJcblx0XHRcdFx0cmVzb2x2ZSgpXHJcblx0XHRcdH0uYmluZCh0aGlzKSlcclxuXHRcdH0uYmluZCh0aGlzKSlcclxuXHR9XHJcblx0Ly8gTWV0aG9kXHJcblx0YWRkX2Z1bmN0aW9uKGZuKSB7XHJcblx0XHR0aGlzLmZ4bi5wdXNoKGZuKVxyXG5cdH1cclxuXHQvLyBNZXRob2RcclxuXHRhZGRfZ3JlYXRlcl90aGFuX29yX2VxdWFsX3RvX2NvbnN0cmFpbnQoZm4pIHtcclxuXHRcdGxldCBmID0gZnVuY3Rpb24oeCl7XHJcblx0XHRcdHJldHVybiAtZm4oeCk7XHJcblx0XHR9XHJcblx0XHR0aGlzLmVxdWFsaXR5X2NvbnN0cmFpbnQucHVzaChmKVxyXG5cdH1cclxuXHQvLyBNZXRob2RcclxuXHRhZGRfbGVzc190aGFuX29yX2VxdWFsX3RvX2NvbnN0cmFpbnQoZm4pIHtcclxuXHRcdHRoaXMuZXF1YWxpdHlfY29uc3RyYWludC5wdXNoKGZuKVxyXG5cdH1cclxuXHQvLyBNZXRob2RcclxuXHRhZGRfZXF1YWxpdHlfY29uc3RyYWludChmbikge1xyXG5cdFx0dGhpcy5lcXVhbGl0eV9jb25zdHJhaW50LnB1c2goZm4pXHJcblx0fVxyXG5cdC8vIE1ldGhvZFxyXG5cdGFkZF9pbmVxdWFsaXR5X2NvbnN0cmFpbnQoZm4pIHtcclxuXHRcdHRoaXMuaW5lcXVhbGl0eV9jb25zdHJhaW50LnB1c2goZm4pXHJcblx0fVxyXG5cdGFkZF9qYWNvYmlhbihmbil7XHJcblx0XHR0aGlzLmphY29iaWFuLnB1c2goZm4pXHJcblx0fVxyXG5cdC8vIE1ldGhvZFxyXG5cdGFkZF9jYWxsYmFjayhmbikge1xyXG5cdFx0dGhpcy5jYWxsYmFjay5wdXNoKGZuKVxyXG5cdH1cclxuXHRyZXNldCgpe1xyXG5cdFx0dGhpcy5pbnN0YW5jZS5yZXNldCgpO1xyXG5cdFx0dGhpcy5meG4gPSBbXVxyXG5cdFx0dGhpcy5lcXVhbGl0eV9jb25zdHJhaW50ID0gW11cclxuXHRcdHRoaXMuaW5lcXVhbGl0eV9jb25zdHJhaW50ID0gW11cclxuXHRcdHRoaXMuY2FsbGJhY2sgPSBbXVxyXG5cdFx0dGhpcy5qYWNvYmlhbiA9IFtdXHJcblx0XHRcclxuXHR9XHJcblx0Ly9NZXRob2RcclxuXHRsb2FkX2Z4bnMoKXtcclxuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmZ4bi5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdGxldCBuZXdmdW5jID0gZnVuY3Rpb24gZigpe1xyXG5cdFx0XHRcdGxldCB4ID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmRhdGFIZWFwLmJ1ZmZlciwgdGhpcy5kYXRhSGVhcC5ieXRlT2Zmc2V0LCB0aGlzLnZhckxlbmd0aCk7XHJcblx0XHRcdFx0aWYodGhpcy5zdGF0Lmxlbmd0aDwxMDAwMCl7XHJcblx0XHRcdFx0XHRsZXQgc3RyID0gXCJcIlxyXG5cdFx0XHRcdFx0Zm9yKGxldCBqPTA7IGo8IHgubGVuZ3RoOyBqKyspe1xyXG5cdFx0XHRcdFx0XHRzdHIgKz0geFtqXS50b0V4cG9uZW50aWFsKDUpK1wiXFx0XCJcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuc3RhdC5wdXNoKHN0cilcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGhpcy5jb3VudEV2YWxzKytcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5meG5baV0oeClcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLmluc3RhbmNlLmFkZF9mdW5jdGlvbihuZXdmdW5jLmJpbmQodGhpcykpO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHRoaXMuamFjb2JpYW4ubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRsZXQgbmV3ZnVuYyA9IGZ1bmN0aW9uIGYoail7XHJcblx0XHRcdFx0bGV0IHggPSBuZXcgRmxvYXQ2NEFycmF5KHRoaXMuZGF0YUhlYXAuYnVmZmVyLCB0aGlzLmRhdGFIZWFwLmJ5dGVPZmZzZXQsIHRoaXMudmFyTGVuZ3RoKTtcclxuXHRcdFx0XHR0aGlzLmNvdW50RXZhbHMrK1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmphY29iaWFuW2ldKHgsailcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLmluc3RhbmNlLmFkZF9qYWNvYmlhbihuZXdmdW5jLmJpbmQodGhpcykpO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHRoaXMuZXF1YWxpdHlfY29uc3RyYWludC5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdGxldCBuZXdmdW5jID0gZnVuY3Rpb24gZigpe1xyXG5cdFx0XHRcdGxldCB4ID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmRhdGFIZWFwLmJ1ZmZlciwgdGhpcy5kYXRhSGVhcC5ieXRlT2Zmc2V0LCB0aGlzLnZhckxlbmd0aCk7XHJcblx0XHRcdFx0dGhpcy5jb3VudEV2YWxzKytcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5lcXVhbGl0eV9jb25zdHJhaW50W2ldKHgpXHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5pbnN0YW5jZS5hZGRfZXF1YWxpdHlfY29uc3RyYWludChuZXdmdW5jLmJpbmQodGhpcykpO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHRoaXMuaW5lcXVhbGl0eV9jb25zdHJhaW50Lmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0bGV0IG5ld2Z1bmMgPSBmdW5jdGlvbiBmKCl7XHJcblx0XHRcdFx0bGV0IHggPSBuZXcgRmxvYXQ2NEFycmF5KHRoaXMuZGF0YUhlYXAuYnVmZmVyLCB0aGlzLmRhdGFIZWFwLmJ5dGVPZmZzZXQsIHRoaXMudmFyTGVuZ3RoKTtcclxuXHRcdFx0XHR0aGlzLmNvdW50RXZhbHMrK1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmluZXF1YWxpdHlfY29uc3RyYWludFtpXSh4KVxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuaW5zdGFuY2UuYWRkX2luZXF1YWxpdHlfY29uc3RyYWludChuZXdmdW5jLmJpbmQodGhpcykpO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2FsbGJhY2subGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRsZXQgbmV3ZnVuYyA9IGZ1bmN0aW9uIGYoZXZhbHVhdGVfamFjb2JpYW5zLCBuZXdfZXZhbHVhdGlvbl9wb2ludCl7XHJcblx0XHRcdFx0bGV0IHggPSBuZXcgRmxvYXQ2NEFycmF5KHRoaXMuZGF0YUhlYXAuYnVmZmVyLCB0aGlzLmRhdGFIZWFwLmJ5dGVPZmZzZXQsIHRoaXMudmFyTGVuZ3RoKTtcclxuXHRcdFx0XHR0aGlzLmNvdW50RXZhbHMrK1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNhbGxiYWNrW2ldKHgsIGV2YWx1YXRlX2phY29iaWFucywgbmV3X2V2YWx1YXRpb25fcG9pbnQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuaW5zdGFuY2UuYWRkX2NhbGxiYWNrKG5ld2Z1bmMuYmluZCh0aGlzKSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHNvbHZlKG1vZGUsIHhpLCB4cz1bXSwgbWF4X2l0ZXJhdGlvbnM9NTAwMDAsIHBlbmFsdHk9NTAuMCwgcmFkaXVzPTAuMSwgZGlmZnN0ZXA9MC4wMDAwMDEsIHN0b3BfdGhyZXNob2xkPTAuMDAwMDEpIHtcclxuXHRcdGlmKHRoaXMubG9hZGVkID09IHRydWUpe1xyXG5cclxuXHRcdFx0Y29uc3QgdDAgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHRcdFx0aWYodGhpcy5qYWNvYmlhbi5sZW5ndGg+MCl7XHJcblx0XHRcdFx0bGV0IGphY29iaWFuX3Jvd3MgPSAxK3RoaXMuZXF1YWxpdHlfY29uc3RyYWludC5sZW5ndGgrdGhpcy5pbmVxdWFsaXR5X2NvbnN0cmFpbnQubGVuZ3RoXHJcblx0XHRcdFx0aWYoamFjb2JpYW5fcm93cyAhPSB0aGlzLmphY29iaWFuLmxlbmd0aCl7dGhyb3coXCJFcnJvcjogbm90IGVub3VnaCBqYWNvYmlhbiBmdW5jdGlvbnMgZGVmaW5lZC4gRGVmaW5lIG9uZSBmb3IgdGhlIG9wdGltaXphdGlvbiBmdW5jdGlvbiBhbmQgb25lIGZvciBlYWNoIGNvbnN0cmFpbnQuIE5lZWQgXCIramFjb2JpYW5fcm93cyl9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHRoaXMuY291bnRFdmFscyA9IDBcclxuXHRcdFx0dGhpcy5zdGF0ID0gW11cclxuXHRcdFx0bGV0IHN0ciA9IFwiXCJcclxuXHRcdFx0Zm9yKGxldCBqPTA7IGo8IHhpLmxlbmd0aDsgaisrKXtcclxuXHRcdFx0XHRzdHIgKz0gXCIgICAgeFwiK2orXCJcXHRcXHRcIlxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuc3RhdC5wdXNoKHN0cilcclxuXHRcdFx0dGhpcy5tb2RlID0gbW9kZVxyXG5cdFx0XHR0aGlzLm1pbm1heCA9IDBcclxuXHRcdFx0aWYobW9kZSA9PSBcIm1pblwiKXt0aGlzLm1pbm1heCA9IDF9XHJcblx0XHRcdGVsc2UgaWYobW9kZSA9PSBcIm1heFwiKXt0aGlzLm1pbm1heCA9IDJ9XHJcblx0XHRcdFxyXG5cdFx0XHRpZih0aGlzLnZhckxlbmd0aCA8PSB0aGlzLm1heExlbmd0aCApe3RoaXMudmFyTGVuZ3RoID0geGkubGVuZ3RofVxyXG5cdFx0XHRlbHNle3Rocm93IFwiTWF4IG51bWJlciBvZiB2YXJzIGV4Y2VlZGVkXCJ9XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLmxvYWRfZnhucygpXHJcblx0XHRcdFxyXG5cdFx0XHRmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy52YXJMZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0aWYoTnVtYmVyLmlzRmluaXRlKHhzW2ldKSl7XHJcblx0XHRcdFx0XHR0aGlzLmRhdGFIZWFwW2ldID0geHNbaV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHR0aGlzLmRhdGFIZWFwW2ldID0gMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLmluc3RhbmNlLnNldF94cyh0aGlzLmRhdGFIZWFwLmJ5dGVPZmZzZXQsIHRoaXMudmFyTGVuZ3RoKTtcclxuXHRcdFx0XHJcblx0XHRcdGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnZhckxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHR0aGlzLmRhdGFIZWFwW2ldID0geGlbaV07XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5pbnN0YW5jZS5zZXR1cF94KHRoaXMuZGF0YUhlYXAuYnl0ZU9mZnNldCwgdGhpcy52YXJMZW5ndGgpO1xyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy5pbnN0YW5jZS5zb2x2ZSh0aGlzLm1pbm1heCwgbWF4X2l0ZXJhdGlvbnMsIHBlbmFsdHksIHJhZGl1cywgZGlmZnN0ZXAsIHN0b3BfdGhyZXNob2xkKVxyXG5cdFx0XHRcclxuXHRcdFx0bGV0IHggPSBuZXcgRmxvYXQ2NEFycmF5KHRoaXMuZGF0YUhlYXAuYnVmZmVyLCB0aGlzLmRhdGFIZWFwLmJ5dGVPZmZzZXQsIHRoaXMudmFyTGVuZ3RoKVxyXG5cdFx0XHRsZXQgbm9ybWFsQXJyYXkgPSBbXS5zbGljZS5jYWxsKHgpO1xyXG5cdFx0XHR0aGlzLnJlc3VsdHMgPSBub3JtYWxBcnJheVxyXG5cdFx0XHR0aGlzLnRlcm1UeXBlID0gdGhpcy5pbnN0YW5jZS5nZXRfc3RhdHVzKClcclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IHQxID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblx0XHRcdHRoaXMudGltaW5nID0gXCJDYWxsIHRvIG9wdGltaXplciB0b29rIFwiKyh0MSAtIHQwKStcIiBtaWxsaXNlY29uZHMuXCI7XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0fVxyXG5cdFx0ZWxzZXtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJXYXJuaW5nIHRoZSBBbGdsaWIuanMgd2FzbSBoYXMgbm90IGJlZW4gbG9hZGVkIHlldC5cIilcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHR9XHJcblx0fVxyXG5cdGdldF9yZXN1bHRzKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5yZXN1bHRzXHJcblx0fVxyXG5cdGdldF9zdGF0dXMoKXtcclxuXHRcdC8qb3B0aW1pemF0aW9uIHJlcG9ydC4gWW91IHNob3VsZCBjaGVjayBSZXAuVGVybWluYXRpb25UeXBlXHJcblx0XHRpbiAgb3JkZXIgIHRvICBkaXN0aW5ndWlzaCAgc3VjY2Vzc2Z1bCAgdGVybWluYXRpb24gIGZyb21cclxuXHRcdHVuc3VjY2Vzc2Z1bCBvbmU6XHJcblx0XHQqIC04ICAgaW50ZXJuYWwgaW50ZWdyaXR5IGNvbnRyb2wgIGRldGVjdGVkICBpbmZpbml0ZSAgb3JcclxuXHRcdFx0ICAgTkFOICAgdmFsdWVzICAgaW4gICBmdW5jdGlvbi9ncmFkaWVudC4gICAgQWJub3JtYWxcclxuXHRcdFx0ICAgdGVybWluYXRpb24gc2lnbmFsbGVkLlxyXG5cdFx0KiAtMyAgIGJveCBjb25zdHJhaW50cyBhcmUgaW5jb25zaXN0ZW50XHJcblx0XHQqIC0xICAgaW5jb25zaXN0ZW50IHBhcmFtZXRlcnMgd2VyZSBwYXNzZWQ6XHJcblx0XHRcdCAgICogcGVuYWx0eSBwYXJhbWV0ZXIgZm9yIG1pbm5zc2V0YWxnb2FncygpIGlzIHplcm8sXHJcblx0XHRcdFx0IGJ1dCB3ZSBoYXZlIG5vbmxpbmVhciBjb25zdHJhaW50cyBzZXQgYnkgbWlubnNzZXRubGMoKVxyXG5cdFx0KiAgMiAgIHNhbXBsaW5nIHJhZGl1cyBkZWNyZWFzZWQgYmVsb3cgZXBzeFxyXG5cdFx0KiAgNyAgICBzdG9wcGluZyBjb25kaXRpb25zIGFyZSB0b28gc3RyaW5nZW50LFxyXG5cdFx0XHRcdGZ1cnRoZXIgaW1wcm92ZW1lbnQgaXMgaW1wb3NzaWJsZSxcclxuXHRcdFx0XHRYIGNvbnRhaW5zIGJlc3QgcG9pbnQgZm91bmQgc28gZmFyLlxyXG5cdFx0KiAgOCAgICBVc2VyIHJlcXVlc3RlZCB0ZXJtaW5hdGlvbiB2aWEgbWlubnNyZXF1ZXN0dGVybWluYXRpb24oKSovXHJcblx0XHR2YXIgdGVybVR5cGVUZXh0ID0gXCJcIlxyXG5cdFx0aWYodGhpcy50ZXJtVHlwZSA9PSAyKXt0ZXJtVHlwZVRleHQgPSBcIkZvdW5kIGxvY2FsIG1heC9taW4uIFNhbXBsaW5nIHJhZGl1cyBkZWNyZWFzZWQgYmVsb3cgdGhlIHRocmVzaG9sZCB2YWx1ZVwifVxyXG5cdFx0ZWxzZSBpZih0aGlzLnRlcm1UeXBlID09IDcpe3Rlcm1UeXBlVGV4dCA9IFwiU3RvcHBpbmcgY29uZGl0aW9ucyBhcmUgdG9vIHN0cmluZ2VudC4gRnVydGhlciBpbXByb3ZlbWVudCBpcyBpbXBvc3NpYmxlLiBYIGNvbnRhaW5zIGJlc3QgcG9pbnQgZm91bmQgc28gZmFyLlwifVxyXG5cdFx0ZWxzZSBpZih0aGlzLnRlcm1UeXBlID09IDgpe3Rlcm1UeXBlVGV4dCA9IFwiVXNlciByZXF1ZXN0ZWQgdGVybWluYXRpb25cIn1cclxuXHRcdGVsc2UgaWYodGhpcy50ZXJtVHlwZSA9PSAtOCl7dGVybVR5cGVUZXh0ID0gXCJJbnRlcm5hbCBpbnRlZ3JpdHkgY29udHJvbCBkZXRlY3RlZCBpbmZpbml0ZSBvciBOQU4gdmFsdWVzIGluIGZ1bmN0aW9uL2dyYWRpZW50LiBBYm5vcm1hbCB0ZXJtaW5hdGlvbiBzaWduYWxsZWQuXCJ9XHJcblx0XHRlbHNlIGlmKHRoaXMudGVybVR5cGUgPT0gLTMpe3Rlcm1UeXBlVGV4dCA9IFwiQm94IGNvbnN0cmFpbnRzIGFyZSBpbmNvbnNpc3RlbnRcIn1cclxuXHRcdGVsc2UgaWYodGhpcy50ZXJtVHlwZSA9PSAtMSl7dGVybVR5cGVUZXh0ID0gXCJJbmNvbnNpc3RlbnQgcGFyYW1ldGVycyB3ZXJlIHBhc3NlZFwifVxyXG5cdFx0ZWxzZXt0ZXJtVHlwZVRleHQgPSBcIlVua25vd24gcmV0dXJuIHR5cGVcIn1cclxuXHRcdHJldHVybiB0ZXJtVHlwZVRleHRcclxuXHR9XHJcblx0Z2V0X3JlcG9ydCgpe1xyXG5cdFx0bGV0IHggPSB0aGlzLmdldF9yZXN1bHRzKClcclxuXHRcdHZhciByZXBvcnRUZXh0ID0gXCJUaGUgc29sdmVyIGF0dGVtcHRlZCBmaW5kIHRoZSBcIit0aGlzLm1vZGUrXCIgb2YgZih4KSBzdWJqZWN0IHRvIFwiK3RoaXMuZXF1YWxpdHlfY29uc3RyYWludC5sZW5ndGgrXCIgZXF1YWxpdHkgY29uc3RyYWludHMgYW5kIFwiK3RoaXMuaW5lcXVhbGl0eV9jb25zdHJhaW50Lmxlbmd0aCtcIiBpbmVxdWFsaXR5IGNvbnN0cmFpbnRzLlxcXHJcblx0XHRcXG5UZXJtaW5hdGlvbiBjb25kaXRpb246IFxcXCJcIit0aGlzLmdldF9zdGF0dXMoKStcIlxcXCJcXFxyXG5cdFx0XFxuVGhlIGZpbmFsIHZhbHVlIG9mIHRoZSBvcHRpbWl6YXRpb24gZnVuY3Rpb24gd2FzIGYoeCkgPSBcIit0aGlzLmZ4blswXSh4KStcIlxcXHJcblx0XHRcXG5UaGUgZmluYWwgdmFyaWFibGUgdmFsdWVzIHdlcmU6IFtcIit0aGlzLmdldF9yZXN1bHRzKCkrXCJdXFxcclxuXHRcdFxcbk51bWJlciBvZiBmdW5jdGlvbiBldmFsdWF0aW9uczogXCIrdGhpcy5jb3VudEV2YWxzK1wiXFxcclxuXHRcdFxcblwiK3RoaXMudGltaW5nK1wiXFxcclxuXHRcdFxcblxcbkl0ZXJhdGlvbiBSZXBvcnQ6XFxcclxuXHRcdFxcblwiK3RoaXMuc3RhdC5qb2luKFwiXFxuXCIpK1wiXFxcclxuXHRcdFxcblwiXHJcblx0XHRyZXR1cm4gcmVwb3J0VGV4dFxyXG5cdH1cclxuXHRyZW1vdmUoKXtcclxuXHRcdHRoaXMubG9hZGVkID09IGZhbHNlO1xyXG5cdFx0dGhpcy5pbnN0YW5jZS5kZWxldGUoKTtcclxuXHR9XHJcbn0iXSwKICAibWFwcGluZ3MiOiAiQUFDQSxJQUFJLGVBQWdCLFdBQVc7QUFDN0IsTUFBSSxhQUFhLE9BQU8sYUFBYSxlQUFlLFNBQVMsZ0JB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YUFBUyxjQUFjLE9BQU0sSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHO0FBQUMsVUFBSSxLQUFHLFVBQVU7QUFBRSxVQUFHO0FBQUMsa0JBQVUsSUFBSSxLQUFLLEVBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFO0FBQUEsTUFBQyxTQUFPLEdBQUU7QUFBQyxxQkFBYSxFQUFFO0FBQUUsWUFBRyxNQUFJLElBQUUsS0FBRyxNQUFJO0FBQVUsZ0JBQU07QUFBRSxrQkFBVSxHQUFFLENBQUM7QUFBQSxNQUFDO0FBQUEsSUFBQztBQUFDLGFBQVMsWUFBWSxPQUFNLElBQUcsSUFBRyxJQUFHO0FBQUMsVUFBSSxLQUFHLFVBQVU7QUFBRSxVQUFHO0FBQUMsZUFBTyxVQUFVLElBQUksS0FBSyxFQUFFLElBQUcsSUFBRyxFQUFFO0FBQUEsTUFBQyxTQUFPLEdBQUU7QUFBQyxxQkFBYSxFQUFFO0FBQUUsWUFBRyxNQUFJLElBQUUsS0FBRyxNQUFJO0FBQVUsZ0JBQU07QUFBRSxrQkFBVSxHQUFFLENBQUM7QUFBQSxNQUFDO0FBQUEsSUFBQztBQUFDLGFBQVMsY0FBYyxPQUFNLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRztBQUFDLFVBQUksS0FBRyxVQUFVO0FBQUUsVUFBRztBQUFDLGtCQUFVLElBQUksS0FBSyxFQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRTtBQUFBLE1BQUMsU0FBTyxHQUFFO0FBQUMscUJBQWEsRUFBRTtBQUFFLFlBQUcsTUFBSSxJQUFFLEtBQUcsTUFBSTtBQUFVLGdCQUFNO0FBQUUsa0JBQVUsR0FBRSxDQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxhQUFTLFNBQVMsT0FBTTtBQUFDLFVBQUksS0FBRyxVQUFVO0FBQUUsVUFBRztBQUFDLGtCQUFVLElBQUksS0FBSyxFQUFFO0FBQUEsTUFBQyxTQUFPLEdBQUU7QUFBQyxxQkFBYSxFQUFFO0FBQUUsWUFBRyxNQUFJLElBQUUsS0FBRyxNQUFJO0FBQVUsZ0JBQU07QUFBRSxrQkFBVSxHQUFFLENBQUM7QUFBQSxNQUFDO0FBQUEs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
